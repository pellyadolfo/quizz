{
	"install": "SECTION",
	"Espresso": "Use Espresso to write concise, beautiful, and reliable Android UI tests.",
	"Espresso - HowTo - Setup - Set up your test environment": "To avoid flakiness, we highly recommend that you turn off system animations on the virtual or physical devices used for testing. On your device, under Settings > Developer options, disable the following 3 settings: Window animation scale, Transition animation scale, Animator duration scale",
	"Espresso - HowTo - Setup - Add Espresso dependencies": "Add androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2' androidTestImplementation 'com.android.support.test:runner:1.0.2' androidTestImplementation 'com.android.support.test:rules:1.0.2' to app/build.gradle",
	"Espresso - HowTo - Setup - Set the instrumentation runner": "Add to the same build.gradle file the following line in android.defaultConfig: testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner' to app/build.gradle",
	"Espresso - HowTo - Setup - Analytics": "In order to make sure we are on the right track with each new release, the test runner collects analytics. More specifically, it uploads a hash of the package name of the application under test for each invocation. This allows us to measure both the count of unique packages using Espresso as well as the volume of usage. If you do not wish to upload this data, you can opt out by including the disableAnalytics argument in your instrumentation command: adb shell am instrument -e disableAnalytics true",
	"Espresso - HowTo - Test - Add test": "Android Studio creates tests by default in src/androidTest/java/com.example.package/.",
	"Espresso - HowTo - Run - from Android Studio": "To create a test configuration in Android Studio, complete the following steps: (1) Open Run > Edit Configurations. (2) Add a new Android Tests configuration. (3) Choose a module. (4) Add a specific instrumentation runner: android.support.test.runner.AndroidJUnitRunner (5) Run the newly created configuration.",
	"Espresso - HowTo - Run - from Command Line": "Execute the following Gradle command: ./gradlew connectedAndroidTest",
	
	"test suite": "SECTION",
	"Espresso - TestSuite": "To organize the execution of your instrumented unit tests, you can group a collection of test classes in a test suite class and run these tests together. Test suites can be nested, your test suite can group other test suites and run all their component test classes together.",
	"Espresso - TestSuite - declare": "@RunWith(Suite.class) @Suite.SuiteClasses({CalculatorInstrumentationTest.class,",
	"Espresso - TestSuite - Run - Android Studio": "",
	"Espresso - TestSuite - Run - Firebase Test Lab": "",

	"test": "SECTION",
	"Espresso - Rules": "This rule provides functional testing of a single Activity. When launchActivity is set to true in the constructor, the Activity under test will be launched before each test annotated with Test and before methods annotated with Before, and it will be terminated after the test is completed and methods annotated with After are finished. The Activity can be manually launched with launchActivity(Intent), and manually finished with finishActivity(). If the Activity is running at the end of the test, the test rule will finish it. During the duration of the test you will be able to manipulate your Activity directly using the reference obtained from getActivity(). If the Activity is finished and relaunched, the reference returned by getActivity() will always point to the current instance of the Activity.",
	"Espresso - Rules - Run Activity - ActivityTestRule": "This rule provides functional testing of a single Activity. When launchActivity is set to true in the constructor, the Activity under test will be launched before each test annotated with Test and before methods annotated with Before, and it will be terminated after the test is completed and methods annotated with After are finished. The Activity can be manually launched with launchActivity(Intent), and manually finished with finishActivity(). If the Activity is running at the end of the test, the test rule will finish it. During the duration of the test you will be able to manipulate your Activity directly using the reference obtained from getActivity(). If the Activity is finished and relaunched, the reference returned by getActivity() will always point to the current instance of the Activity.",
	"Espresso - Rules - Run Service - ServiceTestRule": "A JUnit rule that provides a simplified mechanism to start and shutdown your service before and after the duration of your test. It also guarantees that the service is successfully connected when starting (or binding to) a service. The service can be started (or bound) using one of the helper methods. It will automatically be stopped (or unbound) after the test completes and any methods annotated with After are finished. Note: This rule doesn't support IntentService because it's automatically destroyed when onHandleIntent(android.content.Intent) finishes all outstanding commands. So there is no guarantee to establish a successful connection in a timely manner.",
	"Espresso - Rules - Grant Permission - GrantPermissionRule": "The GrantPermissionRule Rule allows granting of runtime permissions on Android M (API 23) and above. Use this Rule when a test requires a runtime permission to do its work. When applied to a test class this Rule attempts to grant all requested runtime permissions. The requested permissions will then be granted on the device and will take immediate effect. Permissions can only be requested on Android M (API 23) or above and will be ignored on all other API levels. Once a permission is granted it will apply for all tests running in the current Instrumentation. There is no way of revoking a permission after it was granted. Attempting to do so will crash the Instrumentation process. Note, this Rule is usually used to grant runtime permissions to avoid the permission dialog from showing up and blocking the App's Ui. This is especially helpful for Ui-Testing to avoid loosing control over the app under test. The requested permissions will be granted for all test methods in the test class. Use grant(String) static factory method to request a variable number of permissions. Usage: @Rule public GrantPermissionRule mRuntimePermissionRule = GrantPermissionRule .grant(android.Manifest.permission.ACCESS_FINE_LOCATION)",
	"Espresso - General Rule": "onView(ViewMatcher).perform(ViewAction).check(ViewAssertion),",
	"Espresso - Find View": "In the vast majority of cases, the onView() method takes a hamcrest matcher that is expected to match one — and only one — view within the current view hierarchy.",
	"Espresso - Find View - View Types - View": "View",
	"Espresso - Find View - View Types - AdapterView": "AdapterView is a special type of widget that loads its data dynamically from an Adapter. The most common example of an AdapterView is ListView. As opposed to static widgets like LinearLayout, only a subset of the AdapterView children may be loaded into the current view hierarchy.",
	"Espresso - Find View - View Types - AdapterView vs View": "AdapterViews such as ListView, GridView, or Spinner, are different than the usual layouts (e.g. LinearLayout) because they don’t keep all their child elements in the view hierarchy. The main purpose of AdapterViews is to show large data sets on the screen efficiently, so they have to optimize memory use and performance by only maintaining a View object for data elements that currently fit inside the viewport. A simple onView() search would not find views that are not currently loaded. Espresso handles this by providing a separate onData() entry point which is able to first load the adapter item in question, bringing it into focus prior to operating on it or any of its children.",
	"Espresso - Find View - View Types - RecyclerView": "At first it might seem like the same method should be applied to a RecyclerView, as it also uses adapters to hold data and reuses a small amount of View objects to display that data on the screen. Unfortunately, RecyclerView does not inherit from AdapterView (it’s a direct subclass of ViewGroup instead), so you can’t use onData with it. Instead, you should use one of the RecyclerViewActions methods to scroll the RecyclerView to the desired item and perform a ViewAction on it (using a ViewHolder matcher or position):",
	"Espresso - Find View - Espresso.onView(Matcher<View> viewMatcher)": "Creates a ViewInteraction for a given view.",
	"Espresso - Find View - ViewMatchers": "A collection of hamcrest matchers that match Views.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.": "",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withId(Matcher<Integer> integerMatcher)": "Returns a matcher that matches Views based on resource ids.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withId(int id)": "A matcher that matches Views based on its resource id.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withText(Matcher<String> stringMatcher)": "Returns a matcher that matches TextViews based on text property value.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withText(String text)": "Returns a matcher that matches TextView based on its text property value.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withText(int resourceId)": "Returns a matcher that matches a descendant of TextView that is displaying the string associated with the given resource id.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withTagKey(int key)": "Returns a matcher that matches View based on tag keys.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withTagKey(int key, Matcher<Object> objectMatcher)": "Returns a matcher that matches Views based on tag keys.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withTagValue(Matcher<Object> tagValueMatcher)": "Returns a matcher that matches Views based on tag property values.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.hasContentDescription()": "Returns an Matcher that matches Views with any content description.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withContentDescription(int resourceId)": "Returns a Matcher that matches Views based on content description property value.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withContentDescription(String text)": "Returns an Matcher that matches Views based on content description property value.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withContentDescription(Matcher< ? extends CharSequence> charSequenceMatcher)": "Returns an Matcher that matches Views based on content description property value.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withHint(Matcher<String> stringMatcher)": "Returns a matcher that matches TextViews based on hint property value.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withHint(int resourceId)": "Returns a matcher that matches a descendant of TextView that is displaying the hint associated with the given resource id.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withHint(String hintText)": "Returns a matcher that matches TextView based on it's hint property value.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withSpinnerText(int resourceId)": "Returns a matcher that matches a descendant of Spinner that is displaying the string of the selected item associated with the given resource id.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withSpinnerText(String text)": "Returns a matcher that matches Spinner based on it's selected item's toString value.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.withSpinnerText(Matcher<String> stringMatcher)": "Returns a matcher that matches Spinner's based on toString value of the selected item.",
	"Espresso - Find View - ViewMatchers - By User Property - ViewMatchers.hasLinks()": "Returns a matcher that matches TextViews that have links.",
	"Espresso - Find View - ViewMatchers - By User Property - LayoutMatchers.hasEllipsizedText()": "Matches TextView elements having ellipsized text.",
	"Espresso - Find View - ViewMatchers - By User Property - LayoutMatchers.hasMultilineText()": "Matches TextView elements having multiline text.",
	"Espresso - Find View - ViewMatchers - By UI Properties - ViewMatchers.isDisplayed()": "Returns a matcher that matches Views that are currently displayed on the screen to the user.",
	"Espresso - Find View - ViewMatchers - By UI Properties - ViewMatchers.isCompletelyDisplayed()": "Returns a matcher which only accepts a view whose height and width fit perfectly within the currently displayed region of this view.",
	"Espresso - Find View - ViewMatchers - By UI Properties - ViewMatchers.isEnabled()": "Returns a matcher that matches Views that are enabled.",
	"Espresso - Find View - ViewMatchers - By UI Properties - ViewMatchers.hasFocus()": "Returns a matcher that matches Views currently have focus.",
	"Espresso - Find View - ViewMatchers - By UI Properties - ViewMatchers.isClickable()": "Returns a matcher that matches Views that are clickable.",
	"Espresso - Find View - ViewMatchers - By UI Properties - ViewMatchers.isChecked()": "Returns a matcher that accepts if and only if the view is a CompoundButton (or subtype of) and is in checked state.",
	"Espresso - Find View - ViewMatchers - By UI Properties - ViewMatchers.isNotChecked()": "Returns a matcher that accepts if and only if the view is a CompoundButton (or subtype of) and is not in checked state.",
	"Espresso - Find View - ViewMatchers - By UI Properties - ViewMatchers.withEffectiveVisibility(ViewMatchers.Visibility visibility)": "Returns a matcher that matches Views that have 'effective' visibility set to the given value.",
	"Espresso - Find View - ViewMatchers - By UI Properties - ViewMatchers.isSelected()": "Returns a matcher that matches Views that are selected.",
	"Espresso - Find View - ViewMatchers - By Object Matcher - Hamcrest.Matchers.allOf(....) ": "Creates a matcher that matches if the examined object matches ALL of the specified matchers.",
	"Espresso - Find View - ViewMatchers - By Object Matcher - Hamcrest.Matchers.anyOf(...) ": "Creates a matcher that matches if the examined object matches ANY of the specified matchers.",
	"Espresso - Find View - ViewMatchers - By Object Matcher - Hamcrest.Matchers.is(...)": "A shortcut to the frequently used is(instanceOf(SomeClass.class)).",
	"Espresso - Find View - ViewMatchers - By Object Matcher - Hamcrest.Matchers.not(Matcher<T> matcher) ": "Creates a matcher that wraps an existing matcher, but inverts the logic by which it will match.",
	"Espresso - Find View - ViewMatchers - By Object Matcher - Hamcrest.Matchers.endsWith(java.lang.String suffix) ": "Creates a matcher that matches if the examined String ends with the specified String.",
	"Espresso - Find View - ViewMatchers - By Object Matcher - Hamcrest.Matchers.startsWith(java.lang.String prefix)": "Creates a matcher that matches if the examined String starts with the specified String.",
	"Espresso - Find View - ViewMatchers - By Object Matcher - Hamcrest.Matchers.instanceOf(java.lang.Class< ?> type) ": "Creates a matcher that matches when the examined object is an instance of the specified type, as determined by calling the Class.isInstance(Object) method on that type, passing the the examined object.",
	"Espresso - Find View - ViewMatchers - By Hierarchy - ViewMatchers.withParent(Matcher<View> parentMatcher)": "A matcher that accepts a view if and only if the view's parent is accepted by the provided matcher.",
	"Espresso - Find View - ViewMatchers - By Hierarchy - ViewMatchers.withChild(Matcher<View> childMatcher)": "Returns true only if the view's child is accepted by the provided matcher.",
	"Espresso - Find View - ViewMatchers - By Hierarchy - ViewMatchers.hasDescendant(Matcher<View> descendantMatcher)": "Returns a matcher that matches Views based on the presence of a descendant in its view hierarchy.",
	"Espresso - Find View - ViewMatchers - By Hierarchy - ViewMatchers.isDescendantOfA(Matcher<View> ancestorMatcher)": "Returns a matcher that matches Views based on the given ancestor type.",
	"Espresso - Find View - ViewMatchers - By Hierarchy - ViewMatchers.hasSibling(Matcher<View> siblingMatcher)": "Returns an Matcher that matches Views based on their siblings.",
	"Espresso - Find View - ViewMatchers - By Hierarchy - ViewMatchers.isRoot()": "Returns a matcher that matches root View.",
	"Espresso - Find View - ViewMatchers - By Input - ViewMatchers.supportsInputMethods()": "Returns a matcher that matches views that support input methods.",
	"Espresso - Find View - ViewMatchers - By Input - ViewMatchers.hasImeAction(int imeAction)": "Returns a matcher that matches views that support input methods (e.g.",
	"Espresso - Find View - ViewMatchers - By Input - ViewMatchers.hasImeAction(Matcher<Integer> imeActionMatcher)": "Returns a matcher that matches views that support input methods (e.g.",
	"Espresso - Find View - ViewMatchers - By Class - ViewMatchers.isAssignableFrom(Class< ? extends View> clazz)": "Matches Views based on instance or subclass of the provided class.",
	"Espresso - Find View - ViewMatchers - By Class - ViewMatchers.withClassName(Matcher<String> classNameMatcher)": "Returns a matcher that matches Views with class name matching the given matcher.",
	"Espresso - Find View - ViewMatchers - By Root Matchers - RootMatchers.isFocusable()": "Matches Roots that can take window focus.",
	"Espresso - Find View - ViewMatchers - By Root Matchers - RootMatchers.isTouchable()": "Matches Roots that can receive touch events.",
	"Espresso - Find View - ViewMatchers - By Root Matchers - RootMatchers.isDialog()": "Matches Roots that are dialogs (i.e.",
	"Espresso - Find View - ViewMatchers - By Root Matchers - RootMatchers.withDecorView(Matcher<View> decorViewMatcher)": "Matches Roots with decor views that match the given view matcher.",
	"Espresso - Find View - ViewMatchers - By Root Matchers - RootMatchers.isPlatformPopup()": "Matches Roots that are popups - like autocomplete suggestions or the actionbar spinner.",
	"Espresso - Define action - ViewInteraction": "Provides the primary interface for test authors to perform actions or asserts on views. Each interaction is associated with a view identified by a view matcher. All view actions and asserts are performed on the UI thread (thus ensuring sequential execution). The same goes for retrieval of views (this is done to ensure that view state is 'fresh' prior to execution of each operation).",
	"Espresso - Define action - ViewInteraction.perform(ViewAction... viewActions)": "Performs the given action(s) on the view selected by the current view matcher.",
	"Espresso - Define action - DataInteraction": "An interface to interact with data displayed in AdapterViews. This interface builds on top of ViewInteraction and should be the preferred way to interact with elements displayed inside AdapterViews. This is necessary because an AdapterView may not load all the data held by its Adapter into the view hierarchy until a user interaction makes it necessary. Also it is more fluent / less brittle to match upon the data object being rendered into the display then the rendering itself. By default, a DataInteraction takes place against any AdapterView found within the current screen, if you have multiple AdapterView objects displayed, you will need to narrow the selection by using the inAdapterView method. The check and perform method operate on the top level child of the adapter view, if you need to operate on a subview (eg: a Button within the list) use the onChildView method before calling perform or check.",
	"Espresso - Define action - DataInteraction.inRoot(Matcher<Root> rootMatcher)": "Makes this ViewInteraction scoped to the root selected by the given root matcher.",
	"Espresso - Define action - DataInteraction.perform(ViewAction... actions)": "Performs an action on the view after we force the data to be loaded.",
	"Espresso - Define action - RecyclerViewAction.scrollTo(Matcher<View> itemViewMatcher)": "Returns a ViewAction which scrolls RecyclerView to the view matched by itemViewMatcher.",
	"Espresso - Define action - RecyclerViewAction.scrollToHolder(Matcher<VH> viewHolderMatcher)": "Returns a ViewAction which scrolls RecyclerView to the view matched by viewHolderMatcher.",
	"Espresso - Define action - RecyclerViewAction.scrollToPosition(int position)": "Returns a ViewAction which scrolls RecyclerView to a position.",
	"Espresso - Define action - RecyclerViewAction.actionOnItem(Matcher<View> itemViewMatcher, ViewAction viewAction)": "Performs a ViewAction on a view matched by viewHolderMatcher.",
	"Espresso - Define action - RecyclerViewAction.actionOnItemAtPosition(int position, ViewAction viewAction)": "Performs a ViewAction on a view at position.",
	"Espresso - Define action - RecyclerViewAction.actionOnHolderItem(Matcher<VH> viewHolderMatcher, ViewAction viewAction)": "Performs a ViewAction on a view matched by viewHolderMatcher..",
	"Espresso - Execute action - ViewActions": "A collection of common ViewActions..",
	"Espresso - Execute action - ViewActions.click(int inputDevice, int buttonState)": "Returns an action that clicks the view for a specific input device and button state.",
	"Espresso - Execute action - ViewActions.click(ViewAction rollbackAction)": "Returns an action that performs a single click on the view.",
	"Espresso - Execute action - ViewActions.click()": "Same as click(int inputDevice, int buttonState), but uses SOURCE_UNKNOWN as the inputDevice and BUTTON_PRIMARY as the buttonState.",
	"Espresso - Execute action - ViewActions.doubleClick()": "Returns an action that double clicks the view.",
	"Espresso - Execute action - ViewActions.longClick()": "Returns an action that long clicks the view.",
	"Espresso - Execute action - ViewActions.typeText(String stringToBeTyped)": "Returns an action that selects the view (by clicking on it) and types the provided string into the view.",
	"Espresso - Execute action - ViewActions.typeTextIntoFocusedView(String stringToBeTyped)": "Returns an action that types the provided string into the view.",
	"Espresso - Execute action - ViewActions.clearText()": "Returns an action that clears text on the view.",
	"Espresso - Execute action - ViewActions.replaceText(String stringToBeSet)": "Returns an action that updates the text attribute of a view.",
	"Espresso - Execute action - ViewActions.pressBack()": "Returns an action that clicks the back button.",
	"Espresso - Execute action - ViewActions.pressKey(int keyCode)": "Returns an action that presses the key specified by the keyCode (eg.",
	"Espresso - Execute action - ViewActions.scrollTo()": "Returns an action that scrolls to the view.",
	"Espresso - Assert result - DataInteraction.check(ViewAssertion assertion)": "Performs an assertion on the state of the view after we force the data to be loaded.",
	"Espresso - Assert result - ViewAssertions": "Collection of common ViewAssertions..",
	"Espresso - Assert result - ViewAssertions.matches(Matcher< ? super View> viewMatcher)": "Returns a generic ViewAssertion that asserts that a view exists in the view hierarchy and is matched by the given view matcher.",
	"Espresso - Assert result - ViewMatchers.assertThat(String message, T actual, Matcher<T> matcher)/assertThat(T actual, Matcher<T> matcher)": "A replacement for MatcherAssert.assertThat that renders View objects nicely.",			
	
	"Espresso - Assert result - RootMatchers": "A collection of matchers for Root objects.",
	"Espresso - Assert result - RootMatchers.isDialog()": "Matches Roots that are dialogs",
	"Espresso - Assert result - RootMatchers.isFocusable()": "Matches Roots that can take window focus.",
	"Espresso - Assert result - RootMatchers.isPlatformPopup()": "Matches Roots that are popups - like autocomplete suggestions or the actionbar spinner.",
	"Espresso - Assert result - RootMatchers.isSystemAlertWindow()": "Matches Roots that are system alert windows",
	"Espresso - Assert result - RootMatchers.isTouchable()": "Matches Roots that can receive touch events.",
	"Espresso - Assert result - RootMatchers.withDecorView(Matcher<View> decorViewMatcher)": "Matches Roots with decor views that match the given view matcher.",
	
	"Espresso - Idling Resources": "An idling resource represents an asynchronous operation whose results affect subsequent operations in a UI test. By registering idling resources with Espresso, you can validate these asynchronous operations more reliably when testing your app.",
	"Espresso - Idling Resources - Use Cases": "When performing operations similar to the following examples in your tests, consider using an idling resource: Loading data from the internet or a local data source., Establishing connections with databases and callbacks.. Managing services, either using a system service or an instance of IntentService., Performing complex business logic, such as bitmap transformations. It's especially important to register idling resources when these operations update a UI that your tests then validate..",
	"Espresso - Idling Resources - Workarounds": "If you don't use idling resources when testing the results of your app's asynchronous work, you might find yourself having to use one of the following bad workarounds to improve your tests' reliability: Adding calls to Thread.sleep(), Implementing retry wrappers, which use a loop to repeatedly check whether your app is still performing asynchronous work until a timeout occurs, Using instances of CountDownLatch, which allow one or more threads to wait until a specific number of operations being executed in another thread are complete. .",
	"Espresso - Idling Resources - Espresso.onIdle()/onIdle(Callable<T> action)": "Loops the main thread until the app goes idle.",
	"Espresso - Idling Resources - CountingIdlingResource": "An implementation of IdlingResource that determines idleness by maintaining an internal counter. When the counter is 0 - it is considered to be idle, when it is non-zero it is not idle. This is very similar to the way a Semaphore behaves. The counter may be incremented or decremented from any thread. If it reaches an illogical state (like counter less than zero) it will throw an IllegalStateException..",
	"Espresso - Idling Resources - custom": "There are three things that you need to do when implementing IdlingResource interface: getName() - Returns the name of your idling resource., isIdleNow() - Checks whether your xyz object, operation, etc. is idle at the moment., registerIdleTransitionCallback (IdlingResource.ResourceCallback callback) - Provides a callback which you should call when your object transitions to idle."
}