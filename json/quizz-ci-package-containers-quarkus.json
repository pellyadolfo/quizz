{
	"Quarkus": "SECTION",
	"Quarkus ": "Quarkus is an open-source stack of technologies with MicroProfile support aimed at optimizing Jakarta EE for building microservices.",
	"Quarkus - 1.0 - March 2020": "First stable release.",
	"Quarkus - 2.0 - July 2021": "Major improvements in Dev UI, Reactive SQL, and Hibernate Reactive.",
	"Quarkus - 3.0 - June 2023": "Big upgrade to Jakarta EE 10, new extensions, and performance improvements.",
	"Quarkus - 4.0": ".",

	"Quarkus - Controllers": "SECTION",
	"Quarkus - Controllers ": "",
	"Quarkus - Controllers - Patterns": "Quarkus supports both imperative and reactive programming models.",
	"Quarkus - Controllers - Patterns - Imperative": "Imperative programming is the traditional way of writing Java applications, where commands are executed sequentially.",
	"Quarkus - Controllers - Patterns - Reactive": "Reactive programming is an event-driven approach that allows for handling large volumes of asynchronous data efficiently. It’s especially useful in scenarios involving streaming, real-time data, or services that need to handle numerous concurrent requests.",
	"Quarkus - Controllers - Patterns - Reactive ": "https://quarkus.io/guides/quarkus-reactive-architecture",
	"Quarkus - Controllers - RESTEasy": "",
	"Quarkus - Controllers - JakartaREST": "Jakarta RESTful Web Services, commonly known as Jakarta REST or JAX-RS, provides a standardized, annotation-based API for building RESTful web services in Java. It's a key specification in the Jakarta EE umbrella specification, enabling the creation of scalable and interoperable web services using the REST architectural style.",
	"Quarkus - Controllers - JAX-RS": "",
	"Quarkus - Controllers - Vert.X": "",
	"Quarkus - Controllers - Mutiny": "",
	"Quarkus - Controllers - RxJava": "",
	"Quarkus - Controllers - JakartaBeanValidation": "",
	"Quarkus - Controllers - JakartaRESTfulWebServices": "",
	"Quarkus - Controllers - JakartaJSONProcessing": "",
	"Quarkus - Controllers - JakartaJSONBinding": "",
	"Quarkus - Controllers - MicroProfileOpenAPI": "",
	"Quarkus - Controllers - MicroProfileRESTClient": "",
	"Quarkus - Controllers - MicroProfileReactiveStreamsOperators": "",
	"Quarkus - Controllers - MicroProfileGraphQL": "",
	"Quarkus - Controllers - MicroProfileLongRunningActions": "",
	"Quarkus - Controllers - Libs": "",
	"Quarkus - Controllers - Libs - quarkus-qute": "Templating engine.",
	"Quarkus - Controllers - Libs - quarkus-resteasy": "REST API support (JAX-RS).",
	"Quarkus - Controllers - Libs - Reactive - quarkus-resteasy-reactive": "REST API support (JAX-RS).",
	"Quarkus - Controllers - Libs - Reactive - quarkus-resteasy-reactive-jackson": "JSON support for REST APIs.",
	"Quarkus - Controllers - Libs - Reactive - quarkus-resteasy-reactive-jsonb": "Alternative JSON provider.",
	"Quarkus - Controllers - Libs - Reactive - quarkus-vertx": "Underlying reactive framework (Eclipse Vert.x).",
	"Quarkus - Controllers - Libs - Reactive - quarkus-vertx-web": "Low-level HTTP routing.",
	"Quarkus - Controllers - Libs - Reactive - quarkus-smallrye-context-propagation": "Context propagation for reactive apps.",
	"Quarkus - Controllers - Libs - quarkus-arc": "Dependency injection (CDI-based).",
	"Quarkus - Controllers - Libs - quarkus-core": "The core Quarkus runtime.",

	"Quarkus - Services": "SECTION",
	"Quarkus - Services - POJOs": "",
	"Quarkus - Services - DI - JavaCDI": "Contexts and Dependency Injection",
	"Quarkus - Services - DI - JavaCDI - Arc": "Quarkus lightweight CDI implementation",

	"Quarkus - Middleware": "SECTION",
	"Quarkus - Middleware ": "",
	"Quarkus - Middleware - ApacheKafka": "",
	"Quarkus - Middleware - ApacheCamel": "",
	"Quarkus - Middleware - MicroProfile Reactive Messaging": "",
	"Quarkus - Middleware - Libs": "",
	"Quarkus - Middleware - Libs - quarkus-mutiny": "Reactive programming (Mutiny).",
	"Quarkus - Middleware - Libs - quarkus-smallrye-reactive-messaging": "Reactive messaging (Kafka, AMQP, etc.).",
	"Quarkus - Middleware - Libs - quarkus-smallrye-reactive-streams-operators": "Reactive streams utilities.",
	"Quarkus - Middleware - Messaging": "https://quarkus.io/guides/messaging",
	"Quarkus - Middleware - JMS": "https://quarkus.io/guides/jms",

	"Quarkus - Repository": "SECTION",
	"Quarkus - Repository ": "",
	"Quarkus - Repository - Datasources": "https://quarkus.io/guides/datasource",
	"Quarkus - Repository - Cache": "https://quarkus.io/guides/cache-infinispan-reference",
	"Quarkus - Repository - JakartaTransactions": "",
	"Quarkus - Repository - JakartaPersistence": "",
	"Quarkus - Repository - JakartaJakartaBatch": "",
	"Quarkus - Repository - Hibernate": "",
	"Quarkus - Repository - JPA": "",
	"Quarkus - Repository - Libs": "",
	"Quarkus - Repository - Libs - quarkus-hibernate-orm": "JPA with Hibernate.",
	"Quarkus - Repository - Libs - quarkus-jdbc-postgresql": "JDBC driver.",
	"Quarkus - Repository - Libs - quarkus-hibernate-reactive": "Reactive Hibernate ORM.",
	"Quarkus - Repository - Libs - quarkus-mongodb-panache": "MongoDB with Panache.",
	"Quarkus - Repository - Libs - quarkus-flyway": "Database migration.",
	"Quarkus - Repository - Libs - quarkus-liquibase": "Database migration.",
	"Quarkus - Repository - Libs - quarkus-dev-services": "Auto-start dev databases.",

	"CI - Coding": "SECTION",
	"CI - Coding - DI": "Quarkus DI solution (also called ArC) is based on the Jakarta Contexts and Dependency Injection 4.1 specification. It implements the CDI Lite specification, with selected improvements on top, and passes the CDI Lite TCK. It does not implement CDI Full.",
	"CI - Coding - Async": "https://quarkus.io/guides/mutiny-primer",
	"CI - Coding - MicroProfileJWTRBAC": "",
	"CI - Coding - MicroProfileFaultTolerance": "",
	"CI - Coding - Codestarts": "Codestarts are templates which can be used to generate applications for users. Extensions can provide their own codestart templates.",
	"CI - Coding - Migration - Spring - spring-boot-starter-web": "quarkus-resteasy (JAX-RS) or quarkus-vertx-web (Reactive)",
	"CI - Coding - Migration - Spring - spring-data-jpa": "quarkus-hibernate-orm-panache",
	"CI - Coding - Migration - Spring - spring-security": "quarkus-elytron-security or quarkus-oidc",
	"CI - Coding - Migration - Spring - spring-cloud-config": "quarkus-config-yaml + Vault extensions",
	"CI - Coding - Migration - Spring - spring-kafka": "quarkus-kafka-client",
	"CI - Coding - Security - Libs": "",
	"CI - Coding - Security - Libs - quarkus-elytron-security": "Jakarta Security (Basic Auth, JWT, OAuth2).",
	"CI - Coding - Security - Libs - quarkus-oidc": "OpenID Connect support.",
	"CI - Coding - Security - Libs - quarkus-keycloak-authorization": "Keycloak integration.",
	"CI - Coding - Security - Testing": "https://quarkus.io/guides/security-testing",
	"CI - Coding - Security - Secrets": "https://quarkus.io/guides/config-secrets",
	"CI - Coding - Performance": "",
	"CI - Coding - Performance - StaticInitialization": "Do as much initialization as much as possible statically. This avoid runtime overhead.",
	"CI - Coding - Performance - Jandex": "Replace reflection with generated bytecodE. Many Java libraries make heavy use of reflection to delay decisions to run-time. Quarkus aims to improve performance by moving logic to build time, reducing unnecessary dynamism. Extensions should aim to replace reflection with build-time code. This is enabled by Jandex, an 'offline reflection' library. It may also be necessary to do some bytecode transformation of existing libraries..",
	"CI - Coding - Performance - VirtualThreads": "",
	"CI - Coding - Performance - VirtualThreads - @RunOnVirtualThread": "",
	"CI - Coding - Performance - VirtualThreads - ThreadPerTaskExecutor": "In order to run tasks on virtual threads Quarkus manages an internal ThreadPerTaskExecutor.",
	"CI - Coding - Performance - VirtualThreads - @VirtualThreads": "In rare instances where you’d need to access this executor directly you can inject it using the @VirtualThreads CDI qualifier.",
	"CI - Coding - Performance - Reactive": "Quarkus’s reactive core is a key contributor to its excellent throughput and scalability. Extensions should consider adopting this model for their own internal operations.",
	"CI - Coding - Performance - MutinyBasedAPIs": "For maximum scalability, go beyond the reactive core and enable fully reactive programming, using Mutiny. Most projects that support a reactive programming model offer two distinct extensions, a -reactive and a plain one.",
	"CI - Coding - Performance - LoadShedding": "https://quarkus.io/guides/load-shedding-reference",
	"CI - Coding - Performance - Measuring": "https://quarkus.io/guides/performance-measure",
	"CI - Coding - Reliability - FaultTolerance": "https://quarkus.io/guides/smallrye-fault-tolerance",

  "CI - Packaging": "SECTION",
	"CI - Packaging - Maven": "./mvnw clean package -Dquarkus.container-image.build=true",
	"CI - Packaging - Docker": "docker push my-docker-username/my-quarkus-app:1.0.0",
	"CI - Packaging - Jib": "./mvnw package -Dquarkus.container-image.build=true -Dquarkus.container-image.builder=jib",

	"CI - Building": "SECTION",
	"CI - Building - DevServices": "Dev Services automatically provision databases (Postgres, Kafka, etc.) in dev mode using Testcontainers, eliminating manual setup.",
	"CI - Building - DevServices - Overview": "https://quarkus.io/guides/dev-services",
	"CI - Building - DevServices - Include": "To provide a Dev Service, use the DevServicesResultBuildItem build item.",
	"CI - Building - DevServices - Compose": "https://quarkus.io/guides/compose-dev-services",
	"CI - Building - BuildItems": "https://quarkus.io/guides/all-builditems",
	"CI - Building - BuildAnalytics": "https://quarkus.io/guides/build-analytics",
	"CI - Building - BuildTime": "Quarkus moves as much work as possible to build-time (e.g., dependency injection, bean discovery, proxy generation) to reduce runtime overhead.",
	"CI - Building - BuildTime - ClassLoading": "Quarkus avoids dynamic class loading by resolving dependencies at build time, unlike Spring Boot, which often does runtime classpath scanning.",
	"CI - Building - CLI": "https://quarkus.io/guides/cli-tooling",
	"CI - Building - Native": "",
	"CI - Building - LiveCoding": "Hot Reload. Quarkus uses JBoss Modules + bytecode transformation to reload changes without restarting the JVM.",
	"CI - Building - Compressing": "https://quarkus.io/guides/upx",
	"CI - Building - Native - Configure - HotSpot": "",
	"CI - Building - Native - Configure - GraalVM": "",
	"CI - Building - Native - Run": "quarkus build --native",

	"CI - Integration": "SECTION",
	"CI - Integration - Manifest": "Quarkus auto-generates target/kubernetes/kubernetes.yml.",
	"CI - Integration - Manifest - apply": "kubectl apply -f target/kubernetes/kubernetes.yml",
	"CI - Integration - Manifest - generate": "This will create: Deployment (manages Pods). Service (exposes the app internally). Ingress (if enabled, exposes externally).",
	"CI - Integration - Bootstrap": "https://quarkus.io/guides/class-loading-reference",
	"CI - Integration - Bootstrap - Automatic": "Quarkus applications typically start via io.quarkus.runtime.Quarkus, which initializes the framework automatically when the application runs.",
	"CI - Integration - Bootstrap - Automatic - main": "Quarkus applications typically start via io.quarkus.runtime.Quarkus, which initializes the framework automatically when the application runs.",
	"CI - Integration - Bootstrap - Custom": "If you do need custom logic at startup, you can define a main method in a class annotated with @io.quarkus.runtime.annotations.QuarkusMain.",
	"CI - Integration - Bootstrap - Custom - Checks": "Running pre-startup checks (e.g., environment validation).",
	"CI - Integration - Execution": ".",
	"CI - Integration - Execution - RunModes": ".",
	"CI - Integration - Execution - RunModes - WorksInJVMMode": "For most extensions, this is the minimum expectation. When wrapping an existing library, this is usually trivial to achieve; if an extension is providing net-new capability, it might be a bit more work. Quarkus provides tools for unit testing and integration testing extensions.",
	"CI - Integration - Execution - RunModes - WorksInDevMode": "In some cases, extra work may be needed to ensure any wrapped libraries can tolerate dev mode, since the classloading is different and hot reloading can break some assumptions. Extensions may also wish to add some special handling for dev mode. To add automated tests which validate dev mode, you can add tests which extend the QuarkusDevModeTest.",
	"CI - Integration - Execution - RunModes - WorksAsNativeApplication": "For many libraries, native mode support is the primary motivation for creating an extension. See the guide on native executable support for more discussion about some of the adaptations that might be needed.",
	"CI - Integration - CommandLine": "https://quarkus.io/guides/command-mode-reference",
	"CI - Integration - Initialization": "https://quarkus.io/guides/lifecycle",
	"CI - Integration - Initialization2": "https://quarkus.io/guides/init-tasks",

	"CI - Testing": "SECTION",
	"CI - Testing - Verify": "./mvnw verify -Dnative",
	"CI - Testing - @DisabledOnIntegrationTest": "",
	"CI - Testing - Continuous": "https://quarkus.io/guides/continuous-testing",
	"CI - Testing - Libs": "https://quarkus.io/guides/getting-started-testing",
	"CI - Testing - Libs - quarkus-junit5": "JUnit 5 support.",
	"CI - Testing - Libs - quarkus-test-security": "Security testing.",
	"CI - Testing - Libs - quarkus-rest-client": "REST client testing.",
	"CI - Testing - Libs - quarkus-mockito": "Mocking support.",

	"CD - Deploying": "SECTION",
	"CD - Deploying - Kubernetes": "",
	"CD - Deploying - AWSLambda": "https://quarkus.io/guides/aws-lambda",
	"CD - Deploying - AWSLambda - SnapStart": "https://quarkus.io/guides/aws-lambda-snapstart",
	"CD - Deploying - ApacheCamel": "https://quarkus.io/guides/camel",
	"CD - Deploying - Kafka": "https://quarkus.io/guides/kafka",
	"CD - Deploying - Pulsar": "https://quarkus.io/guides/pulsar",
	"CD - Deploying - Openshift": "https://quarkus.io/guides/deploying-to-openshift",
	"CD - Deploying - GCP": "https://quarkus.io/guides/deploying-to-google-cloud",
	"CD - Deploying - Heroku": "https://quarkus.io/guides/deploying-to-heroku",
	"CD - Deploying - Azure": "https://quarkus.io/guides/deploying-to-azure-cloud",
	"CD - Deploying - Libs": "",
	"CD - Deploying - Libs - quarkus-kubernetes": "Kubernetes deployment.",
	"CD - Deploying - Libs - quarkus-container-image-jib": "Docker image building.",
	"CD - Deploying - Libs - quarkus-openshift": "OpenShift support.",

	"CD - Monitoring": "SECTION",
	"CD - Monitoring - Logging": "Quarkus uses JBoss Logging as its logging engine, and supports several logging APIs. (This is normal Java logging, not OpenTelemetry logging.)",
	"CD - Monitoring - Logging - Config": "https://quarkus.io/guides/logging",
	"CD - Monitoring - Logging - Centralized": "https://quarkus.io/guides/centralized-log-management",
	"CD - Monitoring - Health": "Extensions may wish to define library-specific endpoints for health criteria which are specific to that extension. To add a new endpoint, extensions should produce a NonApplicationRootPathBuildItem.",
	"CD - Monitoring - TracingContext": "You should test that OpenTelemetry output for applications using your extension have properly-defined spans. You may need to do extra work to ensure spans are created with the right tracing ID. For example, extensions which have reactive internals should support duplicated contexts for correct context propagation.",
	"CD - Monitoring - OpenTelemetry": "",
	"CD - Monitoring - NMT": "How would you diagnose memory leaks in a Quarkus native app? A: Use Native Memory Tracking (NMT) or heap dumps with -XX:+HeapDumpOnOutOfMemoryError.",
	"CD - Monitoring - MicroProfileTelemetry": "",
	"CD - Monitoring - MicroMeter": "https://quarkus.io/guides/telemetry-micrometer",
	"CD - Monitoring - Observability": "https://quarkus.io/guides/observability",
	"CD - Monitoring - Libs": "",
	"CD - Monitoring - Libs - quarkus-smallrye-health": "Health checks.",
	"CD - Monitoring - Libs - quarkus-smallrye-metrics": "Metrics.",
	"CD - Monitoring - Libs - quarkus-smallrye-opentracing": "Distributed tracing.",

	"CD - Operation": "SECTION",
	"CD - Operation - Config": "https://quarkus.io/guides/config-reference https://quarkus.io/guides/all-config",
	"CD - Operation - MicroProfileConfig": "",
	"CD - Operation - MicroProfileContextPropagation": "",
	"CD - Operation - MicroProfileHealth": ""
	
}