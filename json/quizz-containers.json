{
	"Virtual Machines": "SECTION",
	"VM": "A virtual machine, also known as a VM, emulates a real computer that can execute programs and applications without having direct contact with any actual hardware. Microsoft Azure defines a VM as a “computer file, typically called an image, that behaves like an actual computer. In other words, a computer is created within a computer.”",
	"VM - How": "VMs provide hardware virtualization. VMs work by operating on top of a hypervisor, which, in turn, is stacked up on top of either a host machine or a 'bare-metal' (the hardware) host. A hypervisor, also known as a machine monitor, can either be a piece of software, firmware, or hardware that enables you to create and run VMs. Each VM runs its own unique guest operating system, thus enabling you to have a group of VMs sitting alongside each other, each one with its own unique operating system. For example, you can have Linux VM sitting next to a UNIX VM. Each VM carries their own virtualized hardware stack that comprises of network adapters, storage, applications, binaries, libraries and its own CPU.",

	"Container": "SECTION",
	"Container ": "While virtual machines virtualize a machine, a container virtualizes an entire operating system so that multiple workloads can run on a single OS instance. With VMs, the hardware is being virtualized to run multiple OS instances — which slows everything down and gradually increases the total cost of ownership. To avoid all of that, containers leverage one OS, increasing deployment speed and portability while lowering costs. A container is a Linux-based application that is used to isolate a service and its dependencies into a self-contained unit that you can run in any environment. The sole purpose of containers is to promote efficient use of the allocated server space and resources, thus enabling the isolated processes to run more efficiently and quickly, while giving developers the ability to scale up or down these individual containers very easily.",
	"Container  ": "Containers provide operating system-level virtualization. Each container comes packaged with its own user space to enable multiple containers to run on a single host. And since the OS is shared across all the containers, the components that need to be developed from scratch are the binaries and libraries — which can easily be added by a Docker image."
}