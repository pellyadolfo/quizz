{

	"1. BuildApp": "SECTION",
	"1. BuildApp - description": "build application",

	"2. ChooseContainerRuntime": "SECTION",
  "2. ChooseContainerRuntime - description": "Each node runs a container runtime, which is responsible for downloading images and running containers.",
	"2. ChooseContainerRuntime - supported - Docker ****": "",
  "2. ChooseContainerRuntime - supported - rkt": "",
  "2. ChooseContainerRuntime - supported - runC": "The runc container runtime is a lightweight, portable implementation of the Open Container Initiative (OCI) container runtime specification.",
  "2. ChooseContainerRuntime - supported - OCI": "any OCI runtime-spec implementation",
	"2. ChooseContainerRuntime - CICD - Work Steps - 2. container": "choose container provider",
	"2. ChooseContainerRuntime - Virtualization": "",
	"2. ChooseContainerRuntime - VM": "A virtual machine, also known as a VM, emulates a real computer that can execute programs and applications without having direct contact with any actual hardware. Microsoft Azure defines a VM as a “computer file, typically called an image, that behaves like an actual computer. In other words, a computer is created within a computer.”",
	"2. ChooseContainerRuntime - VM - How": "VMs provide hardware virtualization. VMs work by operating on top of a hypervisor, which, in turn, is stacked up on top of either a host machine or a 'bare-metal' (the hardware) host. A hypervisor, also known as a machine monitor, can either be a piece of software, firmware, or hardware that enables you to create and run VMs. Each VM runs its own unique guest operating system, thus enabling you to have a group of VMs sitting alongside each other, each one with its own unique operating system. For example, you can have Linux VM sitting next to a UNIX VM. Each VM carries their own virtualized hardware stack that comprises of network adapters, storage, applications, binaries, libraries and its own CPU.",
	"2. ChooseContainerRuntime - Container": "",
  "2. ChooseContainerRuntime - Container - list": "Virtualization is an abstract version of a physical machine, while containerization is the abstract version of an application.",
	"2. ChooseContainerRuntime - Container ": "While virtual machines virtualize a machine, a container virtualizes an entire operating system so that multiple workloads can run on a single OS instance. With VMs, the hardware is being virtualized to run multiple OS instances — which slows everything down and gradually increases the total cost of ownership. To avoid all of that, containers leverage one OS, increasing deployment speed and portability while lowering costs. A container is a Linux-based application that is used to isolate a service and its dependencies into a self-contained unit that you can run in any environment. The sole purpose of containers is to promote efficient use of the allocated server space and resources, thus enabling the isolated processes to run more efficiently and quickly, while giving developers the ability to scale up or down these individual containers very easily.",
	"2. ChooseContainerRuntime - Container  ": "Containers provide operating system-level virtualization. Each container comes packaged with its own user space to enable multiple containers to run on a single host. And since the OS is shared across all the containers, the components that need to be developed from scratch are the binaries and libraries — which can easily be added by a Docker image.",
	"2. ChooseContainerRuntime - Docker - Container - Features": "Containerization is increasingly popular because containers are: Flexible: Even the most complex applications can be containerized, Lightweight: Containers leverage and share the host kernel., Interchangeable: You can deploy updates and upgrades on-the-fly., Portable: You can build locally, deploy to the cloud, and run anywhere., Scalable: You can increase and automatically distribute container replicas., Stackable: You can stack services vertically and on-the-fly..",

	"3. BuildImage": "SECTION",
	"3. BuildImage - definition": "A container is defined by its image as well as any configuration options you provide to it when you create or start it.",
	"3. BuildImage - Images": "A container is launched by running an image. An image is an executable package that includes everything needed to run an application--the code, a runtime, libraries, environment variables, and configuration files..",
	"3. BuildImage - CICD - Work Steps - 3. image": "create docker image",
	"3. BuildImage - Docker - Container": "A container is a runnable instance of an image.",

	"4. RunImage": "SECTION",
	"4. RunImage - Docker - Container - Namespace": "Docker uses a technology called namespaces to provide the isolated workspace called the container. When you run a container, Docker creates a set of namespaces for that container. These namespaces provide a layer of isolation. Each aspect of a container runs in a separate namespace and its access is limited to that namespace.",
	"4. RunImage - Docker - Container - Namespace - pid": "The pid namespace: Process isolation (PID: Process ID).",
	"4. RunImage - Docker - Container - Namespace - net": "The net namespace: Managing network interfaces (NET: Networking).",
	"4. RunImage - Docker - Container - Namespace - ipc": "The ipc namespace: Managing access to IPC resources (IPC: InterProcess Communication).",
	"4. RunImage - Docker - Container - Namespace - mnt": "The mnt namespace: Managing filesystem mount points (MNT: Mount).",
	"4. RunImage - Docker - Container - Namespace - uts": "The uts namespace: Isolating kernel and version identifiers. (UTS: Unix Timesharing System).",

	"5. AddImageToRegistry": "SECTION",
	"5. AddImageToRegistry - public": "Public registries are commonly used by individuals or small teams that want to get up and running with their registry as quickly as possible. However, as their organizations grow, this can bring more complex security issues like patching, privacy, and access control that can arise. ",
	"5. AddImageToRegistry - private": "Private registries provide a way to incorporate security and privacy into enterprise container image storage, either hosted remotely or on-premises. These private registries often come with advanced security features and technical support. ",
	"5. AddImageToRegistry - private - Google Container Registry": "",
	"5. AddImageToRegistry - private - ECR": "Amazon Elastic Container Registry (ECR)",
	"5. AddImageToRegistry - private - Azure Container Registry": "",

	"6. ChooseCO": "SECTION",
	"6. ChooseCO - CICD - Work Steps - 6. COs": "choose container orchestrator",
	"6. ChooseCO - CICD - Work Steps - 7. Kubernetes": "eg kubernetes",
	"6. ChooseCO - CICD - Work Steps - 8. Kubernetes Impl": "choose cloud or reference implementation or provider",
  "6. ChooseCO - COs Market - definition": "Container Orchestrator Systems (COs)",
  "6. ChooseCO - COs Market - Providers - Kubernetes": "",
  "6. ChooseCO - COs Market - Providers - Mesos": "",
  "6. ChooseCO - COs Market - Providers - Docker swarm": "",
  "6. ChooseCO - COs Market - Providers - cloud foundry": "",
  "6. ChooseCO - K8s Market - Implementations - Providers": ".",
  "6. ChooseCO - K8s Market - Implementations - Providers - Kubernetes Reference Implementation": "Installing Kubernetes yourself on cloud or on-premises infrastructure with a Kubernetes installation tool like kubeadm or kops",
  "6. ChooseCO - K8s Market - Implementations - Providers - Minikube": "It’s not suitable for production but can be used in a test environment. Maintained by main Kubernetes project..",
  "6. ChooseCO - K8s Market - Implementations - Providers - K3S/K3D": "Developed by Rancher, for mainly IoT and Edge devices. It uses SQLite as a default storage backend rather than etcd3.",
  "6. ChooseCO - K8s Market - Implementations - Providers - MicroK8S": "It is lightweight K8S, developed by Canonical(a.k.a. Ubuntu). It is suitable for Edge and IoT devices.",
  "6. ChooseCO - K8s Market - Implementations - Providers - KinD": "It means Kubernetes-IN-Docker. It runs k8s inside a docker container.",
  "6. ChooseCO - K8s Market - Implementations - Providers - K0S": "It is certificated(CNCF) Kubernetes distribution works on any infrastructure (Cloud, Edge, IoT…)",
  "6. ChooseCO - K8s Market - Implementations - Providers - Docker Desktop": ".",
  "6. ChooseCO - K8s Market - Implementations - Cloud": ".",
  "6. ChooseCO - K8s Market - Implementations - Cloud - GKE": "Google Kubernetes Engine.",
  "6. ChooseCO - K8s Market - Implementations - Cloud - EKS": "Amazon Elastic Kubernetes Service.",
  "6. ChooseCO - K8s Market - Implementations - Cloud - AKS": "Microsoft Azure Kubernetes Service.",
  "6. ChooseCO - K8s Market - Implementations - Cloud - OCP": "Redhat OpenShift Container Platform.",

	"7. DeployContainer": "SECTION",
	"7. DeployContainer - CICD - Work Steps - 9. Deploy": "deploy container",

	"8. ManageCO": "SECTION",
	"8. ManageCO - CICD - Work Steps - 10. Manage": "with kubectl, kubeadm or some UI or cloud cluster admin tool",
	"8. ManageCO - Runtime": "A container is a runtime instance of an image--what the image becomes in memory when executed (that is, an image with state, or a user process).",
	"8. ManageCO - handle": "You can create, start, stop, move, or delete a container using the Docker API or CLI. You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.",
	"8. ManageCO - isolation": "By default, a container is relatively well isolated from other containers and its host machine. You can control how isolated a container’s network, storage, or other underlying subsystems are from other containers or from the host machine.",
	"8. ManageCO - removal": "When a container is removed, any changes to its state that are not stored in persistent storage disappear."

}