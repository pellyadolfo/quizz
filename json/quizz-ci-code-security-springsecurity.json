{
	"SpringSecurity": "SECTION",

	"Config": "SECTION",
	"Config - springSecurityFilterChain": "The configuration creates a Servlet Filter known as the springSecurityFilterChain which is responsible for all the security (protecting the application URLs, validating submitted username and passwords, redirecting to the log in form, etc) within your application.",
	"Config - Register": "",
	"Config - Register - WebApplicationInitializer": "How do you get the DispatcherServlet registered with the Web container without web.xml? The answer was provided in Spring 3.1 (and of course is available with Spring 4 which came out in December 2013) with the WebApplicationInitializer.  An implementation of the WebApplicationInitializer interface configures the ServletContext programmatically.  In particular, it allows for the creation, configuration, and registration of the DispatcherServlet programmatically.  Thereby allowing the web.xml file to be removed from modern Spring MVC applications.",
	"Config - Register - WebApplicationInitializer - onStartup(ServletContext container)": "",
	"Config - Register - WebApplicationInitializer - AbstractSecurityWebApplicationInitializer": "Spring Security provides a base class AbstractSecurityWebApplicationInitializer that will ensure the springSecurityFilterChain gets registered for you.",
	"Config - WebSecurityConfigurer": "Provides a convenient base class for creating a WebSecurityConfigurer instance.",
	"Config - WebSecurityConfigurerAdapter": "Basically WebSecurityConfigurerAdapter is used to create the FilterChainProxy.",
	"Config - WebSecurityConfigurerAdapter - deprecated": "Spring Security 5.7.0-M2 deprecated the WebSecurityConfigurerAdapter, as we encourage users to move towards a component-based security configuration.",
	"Config - WebSecurityConfigurerAdapter - @EnableWebSecurity": "Add this annotation to an @Configuration class to have the Spring Security configuration defined in any WebSecurityConfigurer or more likely by extending the WebSecurityConfigurerAdapter base class and overriding individual methods (@EnableGlobalAuthentication + @Configuration",
	"Config - WebSecurityConfigurerAdapter - auth - WebSecurityConfigurerAdapter.configure(AuthenticationManagerBuilder auth)": "Used by the default implementation of authenticationManager() to attempt to obtain an AuthenticationManager.",
	"Config - WebSecurityConfigurerAdapter - auth - UserDetails": "",
	"Config - WebSecurityConfigurerAdapter - auth - UserDetails - UserDetailsService": "Core interface which loads user-specific data. It is used throughout the framework as a user DAO and is the strategy used by the DaoAuthenticationProvider. The interface requires only one read-only method, which simplifies support for new data-access strategies.",
	"Config - WebSecurityConfigurerAdapter - auth - UserDetails - UserDetailsService - CachingUserDetailsService": "",
	"Config - WebSecurityConfigurerAdapter - auth - UserDetails - UserDetailsService - InMemoryUserDetailsManager": "",
	"Config - WebSecurityConfigurerAdapter - auth - UserDetails - UserDetailsService - JdbcDaoImpl": "",
	"Config - WebSecurityConfigurerAdapter - auth - UserDetails - UserDetailsService - JdbcUserDetailsManager": "",
	"Config - WebSecurityConfigurerAdapter - auth - UserDetails - UserDetailsService - LdapUserDetailsManager": "",
	"Config - WebSecurityConfigurerAdapter - auth - UserDetails - UserDetailsService - LdapUserDetailsService": "",
	"Config - WebSecurityConfigurerAdapter - auth - AuthenticationManagerBuilder.userDetailsService(T userDetailsService)": "Add authentication based upon the custom UserDetailsService that is passed in. It then returns a DaoAuthenticationConfigurer to allow customization of the authentication. This method also ensure that the UserDetailsService is available for the getDefaultUserDetailsService() method. Note that additional UserDetailsService's may override this UserDetailsService as the default.",
	"Config - WebSecurityConfigurerAdapter - http - WebSecurityConfigurerAdapter.configure(HttpSecurity http)": "Override this method to configure the HttpSecurity. Allows configuration of web based security at a resource level, based on a selection match",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity ": "A HttpSecurity is similar to Spring Security's XML <http> element in the namespace configuration. It allows configuring web based security for specific http requests. By default it will be applied to all requests, but can be restricted using requestMatcher(RequestMatcher) or other similar methods.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.authorizeRequests()": "Allows restricting access based upon the HttpServletRequest",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.antMatcher(java.lang.String antPattern)": "Allows configuring the HttpSecurity to only be invoked when matching the provided ant pattern.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.regexMatcher(java.lang.String pattern)": "Allows configuring the HttpSecurity to only be invoked when matching the provided regex pattern.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.mvcMatcher(java.lang.String mvcPattern)": "Allows configuring the HttpSecurity to only be invoked when matching the provided Spring MVC pattern.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.cors()": "Adds a CorsFilter to be used. If a bean by the name of corsFilter is provided, that CorsFilter is used. Else if corsConfigurationSource is defined, then that CorsConfiguration is used. Otherwise, if Spring MVC is on the classpath a HandlerMappingIntrospector is used.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.csrf()": "Adds CSRF support. This is activated by default when using WebSecurityConfigurerAdapter's default constructor. You can disable it using .csrf().disable()",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.addFilter(javax.servlet.Filter filter)": "Adds a Filter that must be an instance of or extend one of the Filters provided within the Security framework.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.addFilterAfter(javax.servlet.Filter filter, java.lang.Class< ? extends javax.servlet.Filter> afterFilter)": "Allows adding a Filter after one of the known Filter classes.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.addFilterAt(javax.servlet.Filter filter, java.lang.Class< ? extends javax.servlet.Filter> atFilter)": "Adds the Filter at the location of the specified Filter class.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.addFilterBefore(javax.servlet.Filter filter, java.lang.Class< ? extends javax.servlet.Filter> beforeFilter": "Allows adding a Filter before one of the known Filter classes.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.anonymous()": "Allows configuring how an anonymous user is represented.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.formLogin()": "Specifies to support form based authentication.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.httpBasic()": "Configures HTTP Basic authentication.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.userDetailsService(UserDetailsService userDetailsService)": "Allows adding an additional UserDetailsService to be used",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurityConfigurerAdapter.configure(WebSecurity web)": "Override this method to configure WebSecurity. Used for configuration settings that impact global security (ignore resources, set debug mode, reject requests by implementing a custom firewall definition)",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurity.ignoring()": "Allows adding RequestMatcher instances that Spring Security should ignore.",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurity.httpFirewall(HttpFirewall httpFirewall)": "Allows customizing the HttpFirewall.",
	"Config - DelegatingFilterProxy": "Springâ€™s DelegatingFilterProxy provides the link between web.xml and the application context.",
	"Config - FilterChainProxy": "FilterChainProxy lets us add a single entry to web.xml and deal entirely with the application context file for managing our web security beans",
	"Config - SecurityFilterChain": "",
	"Config - SecurityFilterChain - Filters - ChannelProcessingFilter": "Ensures requests are received over the correct channel (HTTP/HTTPS). Redirects between HTTP and HTTPS based on configuration",
	"Config - SecurityFilterChain - Filters - WebAsyncManagerIntegrationFilter": "Integrates Spring Security with Spring's WebAsyncManager. Ensures security context propagates to async threads",
	"Config - SecurityFilterChain - Filters - SecurityContextPersistenceFilter": "Manages the SecurityContext repository. Restores SecurityContext from storage (like HTTP Session) at start of request. Stores SecurityContext at end of request",
	"Config - SecurityFilterChain - Filters - HeaderWriterFilter": "Adds security-related headers to responses. Includes headers like X-Content-Type-Options, X-Frame-Options, etc.",
	"Config - SecurityFilterChain - Filters - LogoutFilter": "Processes logout requests. Clears authentication and invalidates session",
	"Config - SecurityFilterChain - Filters - DefaultLoginPageGeneratingFilter": "Generates default login page when no custom page is configured",
	"Config - SecurityFilterChain - Filters - DefaultLogoutPageGeneratingFilter": "Generates default logout confirmation page",
	"Config - SecurityFilterChain - Filters - ConcurrentSessionFilter": "Checks for session expiration due to concurrent session control. Handles maximum sessions per user restrictions",
	"Config - SecurityFilterChain - Filters - RequestCacheAwareFilter": "Restores saved requests after authentication. Handles redirects after successful login",
	"Config - SecurityFilterChain - Filters - SecurityContextHolderAwareRequestFilter": "Wraps the HttpServletRequest with security-aware variants. Provides methods like isUserInRole()",
	"Config - SecurityFilterChain - Filters - SessionManagementFilter": "Handles session fixation protection. Detects session timeouts",
	"Config - SecurityFilterChain - Filters - ExceptionTranslationFilter": "Translates security exceptions to HTTP responses. Handles AuthenticationException and AccessDeniedException",
	"Config - SecurityFilterChain - Filters - SwitchUserFilter": "Allows administrators to impersonate other users",
	"Config - SecurityFilterChain - Filters - Authentication - X509AuthenticationFilter": "Processes X.509 client certificates for authentication",
	"Config - SecurityFilterChain - Filters - Authentication - AbstractPreAuthenticatedProcessingFilter": "Base class for pre-authentication scenarios",
	"Config - SecurityFilterChain - Filters - Authentication - UsernamePasswordAuthenticationFilter": "Processes form-based username/password authentication. Handles /login endpoint by default",
	"Config - SecurityFilterChain - Filters - Authentication - OAuth2AuthorizationRequestRedirectFilter": "Initiates OAuth2 authorization code flow. Redirects to authorization server",
	"Config - SecurityFilterChain - Filters - Authentication - Saml2WebSsoAuthenticationRequestFilter": "Initiates SAML SSO authentication flow. For SAML-based authentication",
	"Config - SecurityFilterChain - Filters - Authentication - CasAuthenticationFilter": "Processes CAS service tickets (for CAS SSO)",
	"Config - SecurityFilterChain - Filters - Authentication - RememberMeAuthenticationFilter": "Processes remember-me cookie authentication. Automatically authenticates users with valid remember-me tokens",
	"Config - SecurityFilterChain - Filters - Authentication - DigestAuthenticationFilter": "Processes HTTP Digest authentication headers",
	"Config - SecurityFilterChain - Filters - Authentication - BearerTokenAuthenticationFilter": "Processes OAuth2 bearer tokens. Used in resource server configurations",
	"Config - SecurityFilterChain - Filters - Authentication - BasicAuthenticationFilter": "Processes HTTP Basic authentication headers",
	"Config - SecurityFilterChain - Filters - Authentication - JaasApiIntegrationFilter": "Integrates with JAAS (Java Authentication and Authorization Service)",
	"Config - SecurityFilterChain - Filters - Authentication - AnonymousAuthenticationFilter": "Creates anonymous authentication token when no other authentication exists. Assigns 'ROLE_ANONYMOUS' by default",
	"Config - SecurityFilterChain - Filters - Authentication - OpenIDAuthenticationFilter": "Processes OpenID authentication responses",
	"Config - SecurityFilterChain - Filters - ExploitProtections - CsrfFilter": "Protects against CSRF (Cross-Site Request Forgery) attacks. Validates CSRF tokens on state-changing requests",
	"Config - SecurityFilterChain - Filters - ExploitProtections - CorsFilter": "Handles Cross-Origin Resource Sharing (CORS) requests. Processes CORS pre-flight requests",
	"Config - SecurityFilterChain - Filters - Authorization - FilterSecurityInterceptor": "Makes final access control decisions. Authorizes requests based on security constraints. AuthorizationFilter supersedes FilterSecurityInterceptor.",
	"Config - SecurityFilterChain - Filters - Authorization - AuthorizationFilter": "The AuthorizationFilter is last in the Spring Security filter chain by default.",
	"Config - SecurityFilterChain - Filters - Authorization - OAuth2AuthorizationCodeGrantFilter": "Processes OAuth2 authorization code grant responses",
	"Config - SecurityWebFilterChain": "SecurityWebFilterChain is the reactive equivalent of SecurityFilterChain in Spring WebFlux applications. It's used to configure security for reactive Spring applications built with Spring WebFlux.",

	"Authentication": "SECTION",
	"Authentication - GlobalAuthenticationConfigurerAdapter": "A SecurityConfigurer that can be exposed as a bean to configure the global AuthenticationManagerBuilder. Beans of this type are automatically used by AuthenticationConfiguration to configure the global AuthenticationManagerBuilder.",		
	"Authentication - GlobalAuthenticationConfigurerAdapter.init(AuthenticationManagerBuilder auth)": "Initialize the SecurityBuilder. Here only shared state should be created and modified, but not properties on the SecurityBuilder used for building the object. This ensures that the SecurityConfigurer.configure(SecurityBuilder) method uses the correct shared objects when building.",			
	"Authentication - AbstractAuthenticationProcessingFilter": "AbstractAuthenticationProcessingFilter - a base Filter used for authentication. This also gives a good idea of the high level flow of authentication and how pieces work together.",		
	"Authentication - AuthenticationManager": "the API that defines how Spring Securityâ€™s Filters perform authentication.",
	"Authentication - AuthenticationManager - ProviderManager": "the most common implementation of AuthenticationManager.",
	"Authentication - AuthenticationProvider": "",
	"Authentication - AuthenticationProvider - Methods - authenticate": "Returns a fully populated Authentication object on success",
	"Authentication - AuthenticationProvider - Methods - supports": "Indicates which Authentication types this provider supports. Used by ProviderManager to route authentication requests",
	"Authentication - AuthenticationProvider - Impls - DaoAuthenticationProvider": "UsernamePassword - Uses a UserDetailsService to authenticate against a username/password",
	"Authentication - AuthenticationProvider - Impls - OAuth2LoginAuthenticationProvider": "OAuth2.0 - ",
	"Authentication - AuthenticationProvider - Impls - LdapAuthenticationProvider": "LDAP - ",
	"Authentication - AuthenticationProvider - Impls - JwtAuthenticationProvider": "JWT - ",
	"Authentication - AuthenticationProvider - Impls - Saml2AuthenticationProvider": "SAML2.0 - ",
	"Authentication - AuthenticationProvider - Impls - CasAuthenticationProvider": "CAS - ",
	"Authentication - AuthenticationProvider - Impls - AnonymousAuthenticationProvider": "Anonymous - ",
	"Authentication - AuthenticationProvider - Impls - RememberMeAuthenticationProvider": "RememberMe - ",
	"Authentication - AuthenticationProvider - Impls - AbstractJaasAuthenticationProvider": "JAAS - ",
	"Authentication - AuthenticationProvider - Impls - PreAuthenticatedAuthenticationProvider": "Pre-Authentication - ",
	"Authentication - AuthenticationProvider - Impls - runAsAuthenticationProvider": "RunAs - ",
	"Authentication - AuthenticationProvider - Impls - X509": "",
	"Authentication - SecurityContextHolder": "This is where we store details of the present security context of the application, which includes details of the principal currently using the application.",
	"Authentication - SecurityContextHolder - Principal": "Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal(),",
	"Authentication - SecurityContextHolder - SecurityContext": "The object returned by the call to getContext() is an instance of the SecurityContext interface.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.MODE_THREADLOCAL": "By default the SecurityContextHolder uses a ThreadLocal to store these details, which means that the security context is always available to methods in the same thread of execution, even if the security context is not explicitly passed around as an argument to those methods. Using a ThreadLocal in this way is quite safe if care is taken to clear the thread after the present principalâ€™s request is processed. Of course, Spring Security takes care of this for you automatically so there is no need to worry about it.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.MODE_GLOBAL": "You can use SecurityContextHolder.MODE_GLOBAL strategy for a standalone application.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.MODE_INHERITABLETHREADLOCAL": "Other applications might want to have threads spawned by the secure thread also assume the same security identity. This is achieved by using SecurityContextHolder.MODE_INHERITABLETHREADLOCAL.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.SYSTEM_PROPERTY": "",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getAuthorities()": "Set by an AuthenticationManager to indicate the authorities that the principal has been granted.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getCredentials()": "The credentials that prove the principal is correct.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getDetails()": "Stores additional details about the authentication request.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getPrincipal()": "The identity of the principal being authenticated.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.isAuthenticated()": "Used to indicate to AbstractSecurityInterceptor whether it should present the authentication token to the AuthenticationManager.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.setAuthenticated(boolean isAuthenticated)": "The identity of the principal being authenticated.",
	"Authentication - SecurityContext": "The SecurityContext is obtained from the SecurityContextHolder. The SecurityContext contains an Authentication object.",
	"Authentication - SecurityContext - status": "A user is authenticated when the SecurityContextHolder contains a fully populated Authentication object.",
	"Authentication - SecurityContext - status - automated": "You do not need to intriduce it yourself. It will happen authomatically, e.g. in a filter",
	"Authentication - SecurityContext - status - manual": "Spring Security doesnâ€™t mind how you put the Authentication object inside the SecurityContextHolder. The only critical requirement is that the SecurityContextHolder contains an Authentication which represents a principal before the AbstractSecurityInterceptor",
	"Authentication - Authentication": "",
	"Authentication - Authentication - principal": "Identifies the user. When authenticating with a username/password this is often an instance of UserDetails.",
	"Authentication - Authentication - credentials": "Often a password. In many cases, this is cleared after the user is authenticated, to ensure that it is not leaked.",
	"Authentication - Authentication - authorities": "The GrantedAuthority instances are high-level permissions the user is granted. Two examples are roles and scopes.",

	"Authorization": "SECTION",
	"Authorization - RequestBased": "Based upon the request for both Servlet and WebFlux environments.",
	"Authorization - RequestBased - HttpSecurity": ".",
	"Authorization - RequestBased - HttpSecurity - authorizeHttpRequests": ".",
	"Authorization - RequestBased - AuthorizationFilter": "The AuthorizationFilter is last in the Spring Security filter chain by default.",
	"Authorization - RequestBased - AuthorizationFilter - authorizeHttpRequests": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - Ant": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - Ant - Authorize": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - Regex": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - HttpMethod": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - DispatcherType": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - PathPatternRequestMatcher": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - Custom": ".",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - permitAll": "The request requires no authorization and is a public endpoint; note that in this case, the Authentication is never retrieved from the session",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - denyAll": "The request is not allowed under any circumstances; note that in this case, the Authentication is never retrieved from the session",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - hasAuthority": "The request requires that the Authentication have a GrantedAuthority that matches the given value",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - hasRole": "A shortcut for hasAuthority that prefixes ROLE_ or whatever is configured as the default prefix",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - hasAnyAuthority": "The request requires that the Authentication have a GrantedAuthority that matches any of the given values",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - hasAnyRole": "A shortcut for hasAnyAuthority that prefixes ROLE_ or whatever is configured as the default prefix",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - access": "The request uses this custom AuthorizationManager to determine access",
	"Authorization - MethodBased": "Based on the method invocation for both Servlet and WebFlux environments.",
	"Authorization - MessageBased": ".",
	"Authorization - SpringEL - SecurityExpressionRoot": "Spring Security 3.0 introduced the ability to use Spring EL expressions as an authorization mechanism in addition to the simple use of configuration attributes and access-decision voters which have seen before. Expression-based access control is built on the same architecture but allows complicated Boolean logic to be encapsulated in a single expression.",
	"Authorization - SpringEL - SecurityExpressionRoot.hasPermission(Object target, Object permission)": "Returns true if the user has access to the provided target for the given permission. For example, hasPermission(domainObject, 'read')",
	"Authorization - SpringEL - SecurityExpressionRoot.hasPermission(Object targetId, String targetType, Object permission)": "Returns true if the user has access to the provided target for the given permission. For example, hasPermission(1, 'com.example.domain.Message', 'read')",
	"Authorization - SpringEL - SecurityExpressionRoot.hasAuthority([authority])": "Returns true if the current principal has the specified authority.",
	"Authorization - SpringEL - SecurityExpressionRoot.hasAnyAuthority([authority1,authority2])": "Returns true if the current principal has any of the supplied authorities (given as a comma-separated list of strings)",
	"Authorization - SpringEL - SecurityExpressionRoot.hasRole([role])": "Returns true if the current principal has the specified role. By default if the supplied role does not start with 'ROLE_' it will be added. This can be customized by modifying the defaultRolePrefix on DefaultWebSecurityExpressionHandler.",
	"Authorization - SpringEL - SecurityExpressionRoot.hasAnyRole([role1,role2])": "Returns true if the current principal has any of the supplied roles (given as a comma-separated list of strings). By default if the supplied role does not start with 'ROLE_' it will be added. This can be customized by modifying the defaultRolePrefix on DefaultWebSecurityExpressionHandler.",
	"Authorization - SpringEL - SecurityExpressionRoot.isAnonymous()": "Determines if the SecurityExpressionOperations.getAuthentication() is anonymous",
	"Authorization - SpringEL - SecurityExpressionRoot.isAuthenticated()": "Determines ifthe SecurityExpressionOperations.getAuthentication() is authenticated",
	"Authorization - SpringEL - SecurityExpressionRoot.isFullyAuthenticated()": "Determines if the SecurityExpressionOperations.getAuthentication() authenticated without the use of remember me",
	"Authorization - SpringEL - SecurityExpressionRoot.isRememberMe()": "Determines if the SecurityExpressionOperations.getAuthentication() was authenticated using remember me",
	"Authorization - SpringEL - SecurityExpressionRoot.denyAll()": "Always denies access",
	"Authorization - SpringEL - SecurityExpressionRoot.permitAll()": "Always grants access.",
	"Authorization - SpringEL - SecurityExpressionRoot.getAuthentication()": "Gets the Authentication used for evaluating the expressions",
	"Authorization - SpringEL - SecurityExpressionRoot.getPrincipal()": "Convenience method to access Authentication.getPrincipal() from getAuthentication()",
	"Authorization - SpringEL - SecurityExpressionRoot.setDefaultRolePrefix(java.lang.String defaultRolePrefix)": "Sets the default prefix to be added to hasAnyRole(String...) or hasRole(String).",
	"Authorization - SpringEL - SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator permissionEvaluator)": "",
	"Authorization - SpringEL - SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy roleHierarchy)": "",
	"Authorization - SpringEL - SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver trustResolver)": "",
	"Authorization - ACL": "",
	"Authorization - ACL - AbstractSecurityInterceptor": "The AbstractSecurityInterceptor will ensure the proper startup configuration of the security interceptor. It will also implement the proper handling of secure object invocations, namely:",
	"Authorization - ACL - AbstractSecurityInterceptor - implementation - ChannelSecurityInterceptor": "",
	"Authorization - ACL - AbstractSecurityInterceptor - implementation - FilterSecurityInterceptor": "",
	"Authorization - ACL - AbstractSecurityInterceptor - implementation - MethodSecurityInterceptor": "",
	"Authorization - ACL - GrantedAuthority": "These represent the authorities that have been granted to the principal. the GrantedAuthority objects are inserted into the Authentication object by the AuthenticationManager and are later read by AccessDecisionManager s when making authorization decisions.",
	"Authorization - ACL - GrantedAuthority.getAuthority()": "This method allows AccessDecisionManager s to obtain a precise String representation of the GrantedAuthority. By returning a representation as a String, a GrantedAuthority can be easily 'read' by most AccessDecisionManager s. If a GrantedAuthority cannot be precisely represented as a String, the GrantedAuthority is considered 'complex' and getAuthority() must return null.",
	"Authorization - ACL - GrantedAuthority - SimpleGrantedAuthority": "Spring Security includes one concrete GrantedAuthority implementation, SimpleGrantedAuthority. This allows any user-specified String to be converted into a GrantedAuthority. All AuthenticationProvider s included with the security architecture use SimpleGrantedAuthority to populate the Authentication object",
	"Authorization - ACL - GrantedAuthority - UserDetailsService": "Authorities are typically loaded in a custom UserDetailsService:",
	"Authorization - ACL - Manager - AccessDecisionVoter": "",
	"Authorization - ACL - Manager - AccessDecisionManager": "The AccessDecisionManager is called by the AbstractSecurityInterceptor and is responsible for making final access control decisions.",
	"Authorization - ACL - Manager - AccessDecisionManager.decide(Authentication authentication, Object secureObject, Collection<ConfigAttribute> attrs) throws AccessDeniedException": "The AccessDecisionManager's decide method is passed all the relevant information it needs in order to make an authorization decision. In particular, passing the secure Object enables those arguments contained in the actual secure object invocation to be inspected. For example, letâ€™s assume the secure object was a MethodInvocation. It would be easy to query the MethodInvocation for any Customer argument, and then implement some sort of security logic in the AccessDecisionManager to ensure the principal is permitted to operate on that customer. Implementations are expected to throw an AccessDeniedException if access is denied.",
	"Authorization - ACL - Manager - AccessDecisionManager.supports(ConfigAttribute attribute)": "The supports(ConfigAttribute) method is called by the AbstractSecurityInterceptor at startup time to determine if the AccessDecisionManager can process the passed ConfigAttribute",
	"Authorization - ACL - Manager - AccessDecisionManager.supports(Class clazz)": "The supports(Class) method is called by a security interceptor implementation to ensure the configured AccessDecisionManager supports the type of secure object that the security interceptor will present.",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - AccessDecisionVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - RoleVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - AuthenticatedVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - custom": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - custom ": "Whilst users can implement their own AccessDecisionManager to control all aspects of authorization, Spring Security includes several AccessDecisionManager implementations that are based on voting.",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - RoleVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - AuthenticatedVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - CustomVoters": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - CustomVoters - AfterInvocationManager": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - CustomVoters - AfterInvocationManager - implementation - AfterInvocationProviderManager": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - CustomVoters - AfterInvocationManager - implementation - custom": ".",
	"Authorization - ACL - Manager - AuthorizationManager": "getAuthority()  is used by an AuthorizationManager instance to obtain a precise String representation of the GrantedAuthority.",
	"Authorization - ACL - Manager - AuthorizationManager - AuthorityAuthorizationManager": "",
	"Authorization - ACL - Manager - AuthorizationManager - AuthenticatedAuthorizationManager": "",
	"Authorization - ACL - Manager - AuthorizationManager - AuthorizationManagers": "",
	"Authorization - ACL - Manager - AuthorizationManager - CustomAuthorizationManagers": "",

	"OAuth2": "SECTION",
	"OAuth2 - Login": "",
	"OAuth2 - Client": "",
	"OAuth2 - ResourceServer": "",

	"SAML2": "SECTION",
	"SAML2 - Login": "",
	"SAML2 - Logout": "",
	"SAML2 - Metadata": ""

}