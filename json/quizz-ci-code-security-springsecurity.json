{
	"SpringSecurity": "SECTION",

	"@Configuration": "SECTION",
	"@Configuration - springSecurityFilterChain": "The configuration creates a Servlet Filter known as the springSecurityFilterChain which is responsible for all the security (protecting the application URLs, validating submitted username and passwords, redirecting to the log in form, etc) within your application.",
	"@Configuration - Register": "",
	"@Configuration - Register - WebApplicationInitializer": "How do you get the DispatcherServlet registered with the Web container without web.xml? The answer was provided in Spring 3.1 (and of course is available with Spring 4 which came out in December 2013) with the WebApplicationInitializer.  An implementation of the WebApplicationInitializer interface configures the ServletContext programmatically.  In particular, it allows for the creation, configuration, and registration of the DispatcherServlet programmatically.  Thereby allowing the web.xml file to be removed from modern Spring MVC applications.",
	"@Configuration - Register - WebApplicationInitializer - onStartup(ServletContext container)": "",
	"@Configuration - Register - WebApplicationInitializer - AbstractSecurityWebApplicationInitializer": "Spring Security provides a base class AbstractSecurityWebApplicationInitializer that will ensure the springSecurityFilterChain gets registered for you.",
	"@Configuration - @EnableWebSecurity": "Add this annotation to an @Configuration class to have the Spring Security configuration defined in any WebSecurityConfigurer or more likely by extending the WebSecurityConfigurerAdapter base class and overriding individual methods (@EnableGlobalAuthentication + @Configuration",
	"@Configuration - <SpringSecurity5.X - GlobalAuthenticationConfigurerAdapter": "A SecurityConfigurer that can be exposed as a bean to configure the global AuthenticationManagerBuilder. Beans of this type are automatically used by AuthenticationConfiguration to configure the global AuthenticationManagerBuilder.",		
	"@Configuration - <SpringSecurity5.X - GlobalAuthenticationConfigurerAdapter.init(AuthenticationManagerBuilder auth)": "Initialize the SecurityBuilder. Here only shared state should be created and modified, but not properties on the SecurityBuilder used for building the object. This ensures that the SecurityConfigurer.configure(SecurityBuilder) method uses the correct shared objects when building.",			
	"@Configuration - <SpringSecurity5.X - AbstractAuthenticationProcessingFilter": "AbstractAuthenticationProcessingFilter - a base Filter used for authentication. This also gives a good idea of the high level flow of authentication and how pieces work together.",		
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurer": "Provides a convenient base class for creating a WebSecurityConfigurer instance.",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter": "Basically WebSecurityConfigurerAdapter is used to create the FilterChainProxy.",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter - deprecated": "Spring Security 5.7.0-M2 deprecated the WebSecurityConfigurerAdapter, as we encourage users to move towards a component-based security configuration.",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter - auth - WebSecurityConfigurerAdapter.configure(AuthenticationManagerBuilder auth)": "Used by the default implementation of authenticationManager() to attempt to obtain an AuthenticationManager.",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter - auth - AuthenticationManagerBuilder.userDetailsService(T userDetailsService)": "Add authentication based upon the custom UserDetailsService that is passed in. It then returns a DaoAuthenticationConfigurer to allow customization of the authentication. This method also ensure that the UserDetailsService is available for the getDefaultUserDetailsService() method. Note that additional UserDetailsService's may override this UserDetailsService as the default.",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter - auth - UserDetailsService": "Authentication",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter - http - WebSecurityConfigurerAdapter.configure(HttpSecurity http)": "Override this method to configure the HttpSecurity. Allows configuration of web based security at a resource level, based on a selection match",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter - http - HttpSecurity": "Authorization",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter - web - WebSecurityConfigurerAdapter.configure(WebSecurity web)": "Override this method to configure WebSecurity. Used for configuration settings that impact global security (ignore resources, set debug mode, reject requests by implementing a custom firewall definition)",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter - web - WebSecurity.ignoring()": "Allows adding RequestMatcher instances that Spring Security should ignore.",
	"@Configuration - <SpringSecurity5.7.0-M2 - WebSecurityConfigurerAdapter - web - WebSecurity.httpFirewall(HttpFirewall httpFirewall)": "HttpFirewall.",
	"@Configuration - >Spring5 - DelegatingFilterProxy": "Springâ€™s DelegatingFilterProxy provides the link between web.xml and the application context.",
	"@Configuration - >Spring5 - FilterChainProxy": "FilterChainProxy lets us add a single entry to web.xml and deal entirely with the application context file for managing our web security beans",
	"@Configuration - >Spring5 - SecurityFilterChain": "",
	"@Configuration - >Spring5 - SecurityFilterChain - Filters": "",
	"@Configuration - >Spring5 - SecurityWebFilterChain": "SecurityWebFilterChain is the reactive equivalent of SecurityFilterChain in Spring WebFlux applications. It's used to configure security for reactive Spring applications built with Spring WebFlux.",

	"Beans": "SECTION",
	"Beans - UserDetailsService": "Core interface which loads user-specific data. It is used throughout the framework as a user DAO and is the strategy used by the DaoAuthenticationProvider. The interface requires only one read-only method, which simplifies support for new data-access strategies.",
	"Beans - UserDetailsService - CachingUserDetailsService": "",
	"Beans - UserDetailsService - InMemoryUserDetailsManager": "",
	"Beans - UserDetailsService - JdbcDaoImpl": "",
	"Beans - UserDetailsService - JdbcUserDetailsManager": "",
	"Beans - UserDetailsService - LdapUserDetailsManager": "",
	"Beans - UserDetailsService - LdapUserDetailsService": "",
	"Beans - GenericFilterBean - ChannelProcessingFilter": "Ensures requests are received over the correct channel (HTTP/HTTPS). Redirects between HTTP and HTTPS based on configuration",
	"Beans - GenericFilterBean - WebAsyncManagerIntegrationFilter": "Integrates Spring Security with Spring's WebAsyncManager. Ensures security context propagates to async threads",
	"Beans - GenericFilterBean - SecurityContextPersistenceFilter": "Manages the SecurityContext repository. Restores SecurityContext from storage (like HTTP Session) at start of request. Stores SecurityContext at end of request",
	"Beans - GenericFilterBean - HeaderWriterFilter": "Adds security-related headers to responses. Includes headers like X-Content-Type-Options, X-Frame-Options, etc.",
	"Beans - GenericFilterBean - RequestCacheAwareFilter": "Restores saved requests after authentication. Handles redirects after successful login",
	"Beans - GenericFilterBean - SecurityContextHolderAwareRequestFilter": "Wraps the HttpServletRequest with security-aware variants. Provides methods like isUserInRole()",
	"Beans - GenericFilterBean - ExceptionTranslationFilter": "Translates security exceptions to HTTP responses. Handles AuthenticationException and AccessDeniedException",
	"Beans - GenericFilterBean - SwitchUserFilter": "Allows administrators to impersonate other users",
	"Beans - GenericFilterBean - Authentication - AbstractPreAuthenticatedProcessingFilter": "Base class for pre-authentication scenarios",
	"Beans - GenericFilterBean - Authentication - AnonymousAuthenticationFilter": "Creates anonymous authentication token when no other authentication exists. Assigns 'ROLE_ANONYMOUS' by default",
	"Beans - GenericFilterBean - Authentication - RememberMeAuthenticationFilter": "Processes remember-me cookie authentication. Automatically authenticates users with valid remember-me tokens",
	"Beans - GenericFilterBean - Authentication - X509AuthenticationFilter": "Processes X.509 client certificates for authentication",
	"Beans - GenericFilterBean - Authentication - DigestAuthenticationFilter": "Processes HTTP Digest authentication headers",
	"Beans - GenericFilterBean - Authentication - BasicAuthenticationFilter": "Processes HTTP Basic authentication headers",
	"Beans - GenericFilterBean - Authentication - DefaultLoginPageGeneratingFilter": "Generates default login page when no custom page is configured",
	"Beans - GenericFilterBean - Authentication - DefaultLogoutPageGeneratingFilter": "Generates default logout confirmation page",
	"Beans - GenericFilterBean - Authentication - LogoutFilter": "Processes logout requests. Clears authentication and invalidates session",
	"Beans - GenericFilterBean - Authentication - UsernamePasswordAuthenticationFilter": "Processes form-based username/password authentication. Handles /login endpoint by default",
	"Beans - GenericFilterBean - Authentication - JaasApiIntegrationFilter": "Integrates with JAAS (Java Authentication and Authorization Service)",
	"Beans - GenericFilterBean - Authentication - CasAuthenticationFilter": "Processes CAS service tickets (for CAS SSO)",
	"Beans - GenericFilterBean - Authentication - Saml2WebSsoAuthenticationRequestFilter": "Initiates SAML SSO authentication flow. For SAML-based authentication",
	"Beans - GenericFilterBean - Authentication - BearerTokenAuthenticationFilter": "Processes OAuth2 bearer tokens. Used in resource server configurations",
	"Beans - GenericFilterBean - Authentication - OAuth2AuthorizationRequestRedirectFilter": "Initiates OAuth2 authorization code flow. Redirects to authorization server",
	"Beans - GenericFilterBean - Authentication - OpenIDAuthenticationFilter": "Processes OpenID authentication responses",
	"Beans - GenericFilterBean - Authentication - SessionManagementFilter": "Handles session fixation protection. Detects session timeouts",
	"Beans - GenericFilterBean - Authentication - ConcurrentSessionFilter": "Checks for session expiration due to concurrent session control. Handles maximum sessions per user restrictions",
	"Beans - GenericFilterBean - ExploitProtections - CsrfFilter": "Protects against CSRF (Cross-Site Request Forgery) attacks. Validates CSRF tokens on state-changing requests",
	"Beans - GenericFilterBean - ExploitProtections - CorsFilter": "Handles Cross-Origin Resource Sharing (CORS) requests. Processes CORS pre-flight requests",
	"Beans - GenericFilterBean - Authorization - FilterSecurityInterceptor": "Makes final access control decisions. Authorizes requests based on security constraints. AuthorizationFilter supersedes FilterSecurityInterceptor.",
	"Beans - GenericFilterBean - Authorization - AuthorizationFilter": "The AuthorizationFilter is last in the Spring Security filter chain by default.",
	"Beans - GenericFilterBean - Authorization - OAuth2AuthorizationCodeGrantFilter": "Processes OAuth2 authorization code grant responses",
	"Beans - HttpSecurity": "HttpSecurity focuses on request-level security. It allows configuring web based security for specific http requests.",
	"Beans - HttpSecurity - Features - request": "It allows configuring web based security for specific http requests.",
	"Beans - HttpSecurity - Features - default": "By default it will be applied to all requests, but can be restricted using requestMatcher(RequestMatcher) or other similar methods.",
	"Beans - HttpSecurity - Features - applied": "Applied after WebSecurity.",
	"Beans - HttpSecurity - Features - < http >": "A HttpSecurity is similar to Spring Security's XML <http> element in the namespace configuration.",
	"Beans - HttpSecurity - Features - Usage": "Authentication, authorization, CSRF.",
	"Beans - HttpSecurity - Methods - authorizeHttpRequests": "Allows restricting access based upon the HttpServletRequest",
	"Beans - HttpSecurity - Methods - antMatcher": "Allows configuring the HttpSecurity to only be invoked when matching the provided ant pattern.",
	"Beans - HttpSecurity - Methods - regexMatcher": "Allows configuring the HttpSecurity to only be invoked when matching the provided regex pattern.",
	"Beans - HttpSecurity - Methods - mvcMatcher": "Allows configuring the HttpSecurity to only be invoked when matching the provided Spring MVC pattern.",
	"Beans - HttpSecurity - Methods - cors()": "Adds a CorsFilter to be used. If a bean by the name of corsFilter is provided, that CorsFilter is used. Else if corsConfigurationSource is defined, then that CorsConfiguration is used. Otherwise, if Spring MVC is on the classpath a HandlerMappingIntrospector is used.",
	"Beans - HttpSecurity - Methods - csrf()": "Adds CSRF support. This is activated by default when using WebSecurityConfigurerAdapter's default constructor. You can disable it using .csrf().disable()",
	"Beans - HttpSecurity - Methods - addFilterBefore": "Allows adding a Filter before one of the known Filter classes.",
	"Beans - HttpSecurity - Methods - addFilterAfter": "Allows adding a Filter after one of the known Filter classes.",
	"Beans - HttpSecurity - Methods - addFilterAt": "Adds the Filter at the location of the specified Filter class.",
	"Beans - HttpSecurity - Methods - addFilter": "Adds a Filter that must be an instance of or extend one of the Filters provided within the Security framework.",
	"Beans - HttpSecurity - Methods - anonymous": "Allows configuring how an anonymous user is represented.",
	"Beans - HttpSecurity - Methods - formLogin": "Specifies to support form based authentication.",
	"Beans - HttpSecurity - Methods - httpBasic": "Configures HTTP Basic authentication.",
	"Beans - HttpSecurity - Methods - userDetailsService(UserDetailsService userDetailsService)": "Allows adding an additional UserDetailsService to be used",
	"Beans - WebSecurity": "WebSecurity handles global web security configuration.",
	"Beans - WebSecurity - Features - global": ".",
	"Beans - WebSecurity - Features - applied": "first.",
	"Beans - WebSecurity - Features - Usage": "Ignoring paths, debug mode, firewall. Use WebSecurity for static resources: Improve performance by ignoring static resources",
	"Beans - WebSecurity - WebSecurityCustomizer": "Configuration Method for WebSecurity.",
	"Beans - WebSecurity - WebSecurityCustomizer - Methods - ignoring": "The ignoring() method completely bypasses Spring Security for matched requests.",
	"Beans - WebSecurity - WebSecurityCustomizer - Methods - debug": ".",
	"Beans - WebSecurity - WebSecurityCustomizer - Methods - httpFirewall": ".",
	"Beans - HttpFirewall ": "The HttpFirewall interface in Spring Security provides a critical security layer that protects against certain types of HTTP attacks by enforcing strict validation of HTTP requests.",
	"Beans - HttpFirewall - Impls - StrictHttpFirewall": "The stricter implementation that rejects many potentially dangerous requests.",
	"Beans - HttpFirewall - Impls - StrictHttpFirewall - default": "Default since Spring Security 4.2.4. The HttpFirewall provides an important layer of protection that should generally be left at its strict settings unless you have specific requirements that necessitate relaxing certain rules.",
	"Beans - HttpFirewall - Impls - StrictHttpFirewall - customize": "Only relax restrictions when absolutely necessary",
	"Beans - HttpFirewall - Impls - StrictHttpFirewall - customize - setAllowedHttpMethods": "",
	"Beans - HttpFirewall - Impls - StrictHttpFirewall - customize - setAllowSemicolon": "",
	"Beans - HttpFirewall - Impls - StrictHttpFirewall - customize - setAllowUrlEncodedSlash": "",
	"Beans - HttpFirewall - Impls - StrictHttpFirewall - customize - setAllowBackSlash": "",
	"Beans - HttpFirewall - Impls - StrictHttpFirewall - customize - setAllowUrlEncodedPercent": "",
	"Beans - HttpFirewall - Impls - StrictHttpFirewall - customize - setAllowUrlEncodedDoubleSlash": "",
	"Beans - HttpFirewall - Impls - DefaultHttpFirewall": "The legacy implementation that's more permissive (used prior to Spring Security 4.2.4)",
	"Beans - HttpFirewall - Config": "",
	"Beans - HttpFirewall - Config - HTTP - invalid": "Rejects invalid HTTP methods",
	"Beans - HttpFirewall - Config - HTTP - tampering": "Protects against HTTP verb tampering attacks",
	"Beans - HttpFirewall - Config - URLPathValidation": "Blocks requests containing: Multiple forward slashes (//), Path traversal sequences (../), URL-encoded characters that could be malicious, Semicolons in the path",
	"Beans - HttpFirewall - Config - HeaderValidation": "Checks for malformed headers, Protects against header injection attacks",

	"Authentication": "SECTION",
	"Authentication - AuthenticationManager": "the API that defines how Spring Securityâ€™s Filters perform authentication.",
	"Authentication - AuthenticationManager - ProviderManager": "the most common implementation of AuthenticationManager.",
	"Authentication - AuthenticationProvider": "",
	"Authentication - AuthenticationProvider - Methods - authenticate": "Returns a fully populated Authentication object on success",
	"Authentication - AuthenticationProvider - Methods - supports": "Indicates which Authentication types this provider supports. Used by ProviderManager to route authentication requests",
	"Authentication - AuthenticationProvider - Impls - PreAuthenticatedAuthenticationProvider": "Pre-Authentication - ",
	"Authentication - AuthenticationProvider - Impls - AnonymousAuthenticationProvider": "The AnonymousAuthenticationProvider is a special authentication provider that handles anonymous (unauthenticated) users in Spring Security's authentication system.",
	"Authentication - AuthenticationProvider - Impls - RememberMeAuthenticationProvider": "The RememberMeAuthenticationProvider handles authentication for 'remember me' functionality in web applications, allowing users to remain authenticated across sessions without explicitly logging in.",
	"Authentication - AuthenticationProvider - Impls - RememberMeAuthenticationProvider - Components - RememberMeAuthenticationFilter": "RememberMeAuthenticationFilter detects remember-me cookie. Creates RememberMeAuthenticationToken",
	"Authentication - AuthenticationProvider - Impls - RememberMeAuthenticationProvider - Components - RememberMeAuthenticationToken": ".",
	"Authentication - AuthenticationProvider - Impls - RememberMeAuthenticationProvider - Components - RememberMeServices": ".",
	"Authentication - AuthenticationProvider - Impls - RememberMeAuthenticationProvider - Components - RememberMeServices - TokenBasedRememberMeServices": ".",
	"Authentication - AuthenticationProvider - Impls - RememberMeAuthenticationProvider - Components - RememberMeServices - PersistentTokenBasedRememberMeServices": ".",
	"Authentication - AuthenticationProvider - Impls - DaoAuthenticationProvider": "UsernamePassword",
	"Authentication - AuthenticationProvider - Impls - DaoAuthenticationProvider - Components - AnonymousAuthenticationToken": "Doesn't perform actual authentication. Simply verifies that the token is an AnonymousAuthenticationToken. Returns the same token it receives (no credential validation)",
	"Authentication - AuthenticationProvider - Impls - DaoAuthenticationProvider - Components - UserDetailsService": "Uses a UserDetailsService to authenticate against a username/password",
	"Authentication - AuthenticationProvider - Impls - DaoAuthenticationProvider - Components - PasswordEncoder": "",
	"Authentication - AuthenticationProvider - Impls - LdapAuthenticationProvider": "Unlike DaoAuthenticationProvider, LdapAuthenticationProvider delegates password verification to the LDAP server rather than handling it locally.",
	"Authentication - AuthenticationProvider - Impls - LdapAuthenticationProvider - Components - LdapAuthenticator": "Handles the actual authentication",
	"Authentication - AuthenticationProvider - Impls - LdapAuthenticationProvider - Components - LdapAuthoritiesPopulator": "Loads user's authorities/roles after authentication",
	"Authentication - AuthenticationProvider - Impls - AbstractJaasAuthenticationProvider": "JAAS - ",
	"Authentication - AuthenticationProvider - Impls - RunAsAuthenticationProvider": "The RunAsAuthenticationProvider is a specialized authentication provider that handles temporary elevation of user privileges through Spring Security's 'Run-As' mechanism.",
	"Authentication - AuthenticationProvider - Impls - RunAsAuthenticationProvider - Components - @RunAs": "Triggered by @RunAs annotation or configuration",
	"Authentication - AuthenticationProvider - Impls - RunAsAuthenticationProvider - Components - RunAsUserToken": "Creates a RunAsUserToken containing: Original authentication. Additional temporary authorities. A configurable key (for security validation)",
	"Authentication - AuthenticationProvider - Impls - X509AuthenticationProvider": "The X509AuthenticationProvider handles client certificate authentication (also called mutual TLS or mTLS) in Spring Security.",
	"Authentication - AuthenticationProvider - Impls - X509AuthenticationProvider - Features - NoPasswordAuthentication": ": Relies entirely on certificate validation by TLS layer. Spring Security just verifies the already-validated cert",
	"Authentication - AuthenticationProvider - Impls - X509AuthenticationProvider - Features - CertificateFieldsUsed": "Subject DN (Common Name, Organization, etc.). Alternative Names (email, DNS, etc.). Custom extensions",
	"Authentication - AuthenticationProvider - Impls - X509AuthenticationProvider - Features - UserDetailsIntegration": "Can combine with UserDetailsService for role loading. Or use certificate attributes exclusively",
	"Authentication - AuthenticationProvider - Impls - X509AuthenticationProvider - Components - X509AuthenticationFilter": "Extracts client certificates from HTTP requests. Creates unauthenticated X509AuthenticationToken",
	"Authentication - AuthenticationProvider - Impls - X509AuthenticationProvider - Config": "server.ssl.client-auth=need server.ssl.trust-store=classpath:truststore.jks server.ssl.trust-store-password=changeit",
	"Authentication - AuthenticationProvider - Impls - CasAuthenticationProvider": "The CasAuthenticationProvider handles authentication for the Central Authentication Service (CAS) protocol in Spring Security.",
	"Authentication - AuthenticationProvider - Impls - CasAuthenticationProvider - Components - CasAuthenticationToken": "Receives a CasAuthenticationToken containing a CAS service ticket. Contacts the CAS server to validate the ticket. Receives the authenticated principal's details if valid",
	"Authentication - AuthenticationProvider - Impls - CasAuthenticationProvider - Components - TicketValidator": "for CAS v3 protocol)",
	"Authentication - AuthenticationProvider - Impls - CasAuthenticationProvider - Components - TicketValidator - Cas20ServiceTicketValidator": "for CAS v2 protocol)",
	"Authentication - AuthenticationProvider - Impls - CasAuthenticationProvider - Components - TicketValidator - Cas30ServiceTicketValidator": "for CAS v3 protocol)",
	"Authentication - AuthenticationProvider - Impls - CasAuthenticationProvider - Components - UserDetailsService": "Loads user authorities after successful CAS validation Can be customized to map CAS attributes to Spring Security authorities",
	"Authentication - AuthenticationProvider - Impls - CasAuthenticationProvider - Components - ServiceProperties": "Contains CAS client configuration: service (callback URL), sendRenew (force login), authenticateAllArtifacts",
	"Authentication - AuthenticationProvider - Impls - CasAuthenticationProvider - Components - CasProxyDecider": "Proxy Configuration: Set up CasProxyDecider for proxy ticket handling",
	"Authentication - AuthenticationProvider - Impls - Saml2AuthenticationProvider": "The Saml2AuthenticationProvider is the core component that handles SAML 2.0 authentication in Spring Security.",
	"Authentication - AuthenticationProvider - Impls - Saml2AuthenticationProvider - Components - Saml2Authenticator": "",
	"Authentication - AuthenticationProvider - Impls - Saml2AuthenticationProvider - Components - Saml2ResponseValidator": "",
	"Authentication - AuthenticationProvider - Impls - Saml2AuthenticationProvider - Components - Saml2AuthenticationTokenConverter": "",
	"Authentication - AuthenticationProvider - Impls - JwtAuthenticationProvider": "An AuthenticationProvider implementation of the Jwt-encoded Bearer Tokens for protecting OAuth 2.0 Resource Servers. This AuthenticationProvider is responsible for decoding and verifying a Jwt-encoded access token, returning its claims set as part of the Authentication statement.",
	"Authentication - AuthenticationProvider - Impls - JwtAuthenticationProvider - Components - JwtAuthenticationFilter": "Typically created by a preceding JwtAuthenticationFilter",
	"Authentication - AuthenticationProvider - Impls - JwtAuthenticationProvider - Components - JwtAuthenticationToken": "Receives a JwtAuthenticationToken containing the raw JWT string.",
	"Authentication - AuthenticationProvider - Impls - JwtAuthenticationProvider - Components - JwtDecoder": "Verifies token signature using configured algorithm (HS256, RS256, etc.). Checks standard claims: exp (expiration), nbf (not before), iss (issuer) aud (audience). Handles clock skew for time validation.",
	"Authentication - AuthenticationProvider - Impls - JwtAuthenticationProvider - Components - AuthorityExtraction": "Typically maps JWT claims to Spring Security authorities",
	"Authentication - AuthenticationProvider - Impls - OAuth2LoginAuthenticationProvider": "The OAuth2LoginAuthenticationProvider is the core authentication provider that handles OAuth 2.0 and OpenID Connect (OIDC) login flows in Spring Security.",
	"Authentication - AuthenticationProvider - Impls - OAuth2LoginAuthenticationProvider - Components - OAuth2AccessTokenResponseClient": "Handles the authorization code for token exchange. Default implementation uses NimbusJwtClient",
	"Authentication - AuthenticationProvider - Impls - OAuth2LoginAuthenticationProvider - Components - OAuth2UserService": "Retrieves user attributes from UserInfo endpoint",
	"Authentication - AuthenticationProvider - Impls - OAuth2LoginAuthenticationProvider - Components - OAuth2UserService - DefaultOAuth2UserService": "",
	"Authentication - AuthenticationProvider - Impls - OAuth2LoginAuthenticationProvider - Components - OAuth2UserService - OidcUserService": "",
	"Authentication - AuthenticationProvider - Impls - OAuth2LoginAuthenticationProvider - Components - AuthoritiesMapper": "Maps OAuth2 scopes to Spring Security authorities. Can customize role prefixing/transformation",
	"Authentication - SecurityContextHolder": "This is where we store details of the present security context of the application, which includes details of the principal currently using the application.",
	"Authentication - SecurityContextHolder - Principal": "Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal(),",
	"Authentication - SecurityContextHolder - SecurityContext": "The object returned by the call to getContext() is an instance of the SecurityContext interface.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.MODE_THREADLOCAL": "By default the SecurityContextHolder uses a ThreadLocal to store these details, which means that the security context is always available to methods in the same thread of execution, even if the security context is not explicitly passed around as an argument to those methods. Using a ThreadLocal in this way is quite safe if care is taken to clear the thread after the present principalâ€™s request is processed. Of course, Spring Security takes care of this for you automatically so there is no need to worry about it.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.MODE_GLOBAL": "You can use SecurityContextHolder.MODE_GLOBAL strategy for a standalone application.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.MODE_INHERITABLETHREADLOCAL": "Other applications might want to have threads spawned by the secure thread also assume the same security identity. This is achieved by using SecurityContextHolder.MODE_INHERITABLETHREADLOCAL.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.SYSTEM_PROPERTY": "",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getAuthorities()": "Set by an AuthenticationManager to indicate the authorities that the principal has been granted.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getCredentials()": "The credentials that prove the principal is correct.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getDetails()": "Stores additional details about the authentication request.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getPrincipal()": "The identity of the principal being authenticated.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.isAuthenticated()": "Used to indicate to AbstractSecurityInterceptor whether it should present the authentication token to the AuthenticationManager.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.setAuthenticated(boolean isAuthenticated)": "The identity of the principal being authenticated.",
	"Authentication - SecurityContext": "The SecurityContext is obtained from the SecurityContextHolder. The SecurityContext contains an Authentication object.",
	"Authentication - SecurityContext - status": "A user is authenticated when the SecurityContextHolder contains a fully populated Authentication object.",
	"Authentication - SecurityContext - status - automated": "You do not need to intriduce it yourself. It will happen authomatically, e.g. in a filter",
	"Authentication - SecurityContext - status - manual": "Spring Security doesnâ€™t mind how you put the Authentication object inside the SecurityContextHolder. The only critical requirement is that the SecurityContextHolder contains an Authentication which represents a principal before the AbstractSecurityInterceptor",
	"Authentication - Authentication": "",
	"Authentication - Authentication - principal": "Identifies the user. When authenticating with a username/password this is often an instance of UserDetails.",
	"Authentication - Authentication - credentials": "Often a password. In many cases, this is cleared after the user is authenticated, to ensure that it is not leaked.",
	"Authentication - Authentication - authorities": "The GrantedAuthority instances are high-level permissions the user is granted. Two examples are roles and scopes.",

	"Authorization": "SECTION",
	"Authorization - SpringEL - SpringSecurity3.0": "Spring Security 3.0 introduced the ability to use Spring EL expressions as an authorization mechanism in addition to the simple use of configuration attributes and access-decision voters which have seen before.",
	"Authorization - SpringEL - SecurityExpressionRoot": "Expression-based access control is built on the same architecture but allows complicated Boolean logic to be encapsulated in a single expression.",
	"Authorization - SpringEL - SecurityExpressionRoot.hasPermission(Object target, Object permission)": "Returns true if the user has access to the provided target for the given permission. For example, hasPermission(domainObject, 'read')",
	"Authorization - SpringEL - SecurityExpressionRoot.hasPermission(Object targetId, String targetType, Object permission)": "Returns true if the user has access to the provided target for the given permission. For example, hasPermission(1, 'com.example.domain.Message', 'read')",
	"Authorization - SpringEL - SecurityExpressionRoot.hasAuthority([authority])": "Returns true if the current principal has the specified authority.",
	"Authorization - SpringEL - SecurityExpressionRoot.hasAnyAuthority([authority1,authority2])": "Returns true if the current principal has any of the supplied authorities (given as a comma-separated list of strings)",
	"Authorization - SpringEL - SecurityExpressionRoot.hasRole([role])": "Returns true if the current principal has the specified role. By default if the supplied role does not start with 'ROLE_' it will be added. This can be customized by modifying the defaultRolePrefix on DefaultWebSecurityExpressionHandler.",
	"Authorization - SpringEL - SecurityExpressionRoot.hasAnyRole([role1,role2])": "Returns true if the current principal has any of the supplied roles (given as a comma-separated list of strings). By default if the supplied role does not start with 'ROLE_' it will be added. This can be customized by modifying the defaultRolePrefix on DefaultWebSecurityExpressionHandler.",
	"Authorization - SpringEL - SecurityExpressionRoot.isAnonymous()": "Determines if the SecurityExpressionOperations.getAuthentication() is anonymous",
	"Authorization - SpringEL - SecurityExpressionRoot.isAuthenticated()": "Determines ifthe SecurityExpressionOperations.getAuthentication() is authenticated",
	"Authorization - SpringEL - SecurityExpressionRoot.isFullyAuthenticated()": "Determines if the SecurityExpressionOperations.getAuthentication() authenticated without the use of remember me",
	"Authorization - SpringEL - SecurityExpressionRoot.isRememberMe()": "Determines if the SecurityExpressionOperations.getAuthentication() was authenticated using remember me",
	"Authorization - SpringEL - SecurityExpressionRoot.denyAll()": "Always denies access",
	"Authorization - SpringEL - SecurityExpressionRoot.permitAll()": "Always grants access.",
	"Authorization - SpringEL - SecurityExpressionRoot.getAuthentication()": "Gets the Authentication used for evaluating the expressions",
	"Authorization - SpringEL - SecurityExpressionRoot.getPrincipal()": "Convenience method to access Authentication.getPrincipal() from getAuthentication()",
	"Authorization - SpringEL - SecurityExpressionRoot.setDefaultRolePrefix(java.lang.String defaultRolePrefix)": "Sets the default prefix to be added to hasAnyRole(String...) or hasRole(String).",
	"Authorization - SpringEL - SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator permissionEvaluator)": "",
	"Authorization - SpringEL - SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy roleHierarchy)": "",
	"Authorization - SpringEL - SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver trustResolver)": "",
	"Authorization - ACL": "",
	"Authorization - ACL - AbstractSecurityInterceptor": "The AbstractSecurityInterceptor will ensure the proper startup configuration of the security interceptor. It will also implement the proper handling of secure object invocations, namely:",
	"Authorization - ACL - AbstractSecurityInterceptor - implementation - ChannelSecurityInterceptor": "",
	"Authorization - ACL - AbstractSecurityInterceptor - implementation - FilterSecurityInterceptor": "",
	"Authorization - ACL - AbstractSecurityInterceptor - implementation - MethodSecurityInterceptor": "",
	"Authorization - ACL - GrantedAuthority": "These represent the authorities that have been granted to the principal. the GrantedAuthority objects are inserted into the Authentication object by the AuthenticationManager and are later read by AccessDecisionManager s when making authorization decisions.",
	"Authorization - ACL - GrantedAuthority.getAuthority()": "This method allows AccessDecisionManager s to obtain a precise String representation of the GrantedAuthority. By returning a representation as a String, a GrantedAuthority can be easily 'read' by most AccessDecisionManager s. If a GrantedAuthority cannot be precisely represented as a String, the GrantedAuthority is considered 'complex' and getAuthority() must return null.",
	"Authorization - ACL - GrantedAuthority - SimpleGrantedAuthority": "Spring Security includes one concrete GrantedAuthority implementation, SimpleGrantedAuthority. This allows any user-specified String to be converted into a GrantedAuthority. All AuthenticationProvider s included with the security architecture use SimpleGrantedAuthority to populate the Authentication object",
	"Authorization - ACL - GrantedAuthority - UserDetailsService": "Authorities are typically loaded in a custom UserDetailsService:",
	"Authorization - ACL - Manager - AccessDecisionVoter": "",
	"Authorization - ACL - Manager - AccessDecisionManager": "The AccessDecisionManager is called by the AbstractSecurityInterceptor and is responsible for making final access control decisions.",
	"Authorization - ACL - Manager - AccessDecisionManager.decide(Authentication authentication, Object secureObject, Collection<ConfigAttribute> attrs) throws AccessDeniedException": "The AccessDecisionManager's decide method is passed all the relevant information it needs in order to make an authorization decision. In particular, passing the secure Object enables those arguments contained in the actual secure object invocation to be inspected. For example, letâ€™s assume the secure object was a MethodInvocation. It would be easy to query the MethodInvocation for any Customer argument, and then implement some sort of security logic in the AccessDecisionManager to ensure the principal is permitted to operate on that customer. Implementations are expected to throw an AccessDeniedException if access is denied.",
	"Authorization - ACL - Manager - AccessDecisionManager.supports(ConfigAttribute attribute)": "The supports(ConfigAttribute) method is called by the AbstractSecurityInterceptor at startup time to determine if the AccessDecisionManager can process the passed ConfigAttribute",
	"Authorization - ACL - Manager - AccessDecisionManager.supports(Class clazz)": "The supports(Class) method is called by a security interceptor implementation to ensure the configured AccessDecisionManager supports the type of secure object that the security interceptor will present.",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - AccessDecisionVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - RoleVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - AuthenticatedVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - custom": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - implementation - custom ": "Whilst users can implement their own AccessDecisionManager to control all aspects of authorization, Spring Security includes several AccessDecisionManager implementations that are based on voting.",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - RoleVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - AuthenticatedVoter": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - CustomVoters": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - CustomVoters - AfterInvocationManager": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - CustomVoters - AfterInvocationManager - implementation - AfterInvocationProviderManager": ".",
	"Authorization - ACL - Manager - AccessDecisionManager - Voters - CustomVoters - AfterInvocationManager - implementation - custom": ".",
	"Authorization - ACL - Manager - AuthorizationManager": "getAuthority()  is used by an AuthorizationManager instance to obtain a precise String representation of the GrantedAuthority.",
	"Authorization - ACL - Manager - AuthorizationManager - AuthorityAuthorizationManager": "",
	"Authorization - ACL - Manager - AuthorizationManager - AuthenticatedAuthorizationManager": "",
	"Authorization - ACL - Manager - AuthorizationManager - AuthorizationManagers": "",
	"Authorization - ACL - Manager - AuthorizationManager - CustomAuthorizationManagers": "",
	"Authorization - RequestBased": "Based upon the request for both Servlet and WebFlux environments.",
	"Authorization - RequestBased - AuthorizationFilter": "The AuthorizationFilter is last in the Spring Security filter chain by default.",
	"Authorization - RequestBased - AuthorizationFilter - authorizeHttpRequests": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - Ant": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - Ant - Authorize": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - Regex": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - HttpMethod": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - DispatcherType": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - PathPatternRequestMatcher": ".",
	"Authorization - RequestBased - AuthorizationFilter - Matching - Custom": ".",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - permitAll": "The request requires no authorization and is a public endpoint; note that in this case, the Authentication is never retrieved from the session",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - denyAll": "The request is not allowed under any circumstances; note that in this case, the Authentication is never retrieved from the session",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - hasAuthority": "The request requires that the Authentication have a GrantedAuthority that matches the given value",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - hasRole": "A shortcut for hasAuthority that prefixes ROLE_ or whatever is configured as the default prefix",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - hasAnyAuthority": "The request requires that the Authentication have a GrantedAuthority that matches any of the given values",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - hasAnyRole": "A shortcut for hasAnyAuthority that prefixes ROLE_ or whatever is configured as the default prefix",
	"Authorization - RequestBased - AuthorizationFilter - Authorizing - access": "The request uses this custom AuthorizationManager to determine access",
	"Authorization - MethodBased": "Based on the method invocation for both Servlet and WebFlux environments.",
	"Authorization - MessageBased": ".",

	"OAuth2": "SECTION",
	"OAuth2 - Login": "",
	"OAuth2 - Client": "",
	"OAuth2 - ResourceServer": "",

	"SAML2": "SECTION",
	"SAML2 - Login": "",
	"SAML2 - Logout": "",
	"SAML2 - Metadata": ""

}