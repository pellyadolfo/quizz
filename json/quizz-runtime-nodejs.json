{
  "NodeJS": "SECTION",
  "NodeJS - 2009": "released",

	"Features": "SECTION",
	"Features - Node Green": "The website https://node.green/ provides an excellent overview over supported ECMAScript features in various versions of Node.js, based on kangax's compat-table",

	"Logic": "SECTION",
	"Logic - WebStreamsAPI - ReadableStream": "",
	"Logic - WebStreamsAPI - ReadableStreamDefaultReader": "",
	"Logic - WebStreamsAPI - ReadableStreamBYOBReader": "",
	"Logic - WebStreamsAPI - ReadableStreamDefaultController": "",
	"Logic - WebStreamsAPI - ReadableByteStreamController": "",
	"Logic - WebStreamsAPI - ReadableStreamBYOBRequest": "",
	"Logic - WebStreamsAPI - WritableStream": "",
	"Logic - WebStreamsAPI - WritableStreamDefaultWriter": "",
	"Logic - WebStreamsAPI - WritableStreamDefaultController": "",
	"Logic - WebStreamsAPI - TransformStream": "",
	"Logic - WebStreamsAPI - TransformStreamDefaultController": "",
	"Logic - WebStreamsAPI - ByteLengthQueuingStrategy": "",
	"Logic - WebStreamsAPI - CountQueuingStrategy": "",
	"Logic - WebStreamsAPI - TextEncoderStream": "",
	"Logic - WebStreamsAPI - TextDecoderStream": "",
	"Logic - WebStreamsAPI - CompressionStream": "",
	"Logic - WebStreamsAPI - DecompressionStream": "",
	"Logic - WebStreamsAPI - Consumers": "",
	"Logic - Async": "",
	"Logic - Async - AsyncLocalStorage": "Async context provides a way to handle asynchronous operations more gracefully, preserving the context across async calls, making debugging and tracing easier. A go-to feature for backend developers working with Node.js and complex async operations. AsyncLocalStorage  is a Node.js API (based on the async_hooks API) that is used to create asynchronous state within callbacks and promise chains.",
	"Logic - IO - Libuv": "Libuv is an open-source, multi-platform support library that provides asynchronous I/O capabilities.",
	"Logic - IO - Libuv - features - async": "Libuv was created to address the need for efficient, cross-platform, asynchronous I/O in Node.js.",
	"Logic - IO - Libuv - features - ThreadPool": "For operations that cannot be performed asynchronously (like certain file I/O operations on some platforms), Libuv uses a thread pool.",
	"Logic - IO - Libuv - features - crossplatform": "Libuv abstracts away the differences between operating systems, providing a consistent API for asynchronous operations. This ensures that Node.js applications run consistently across different environments, including Windows, macOS, and Linux.",
	"Logic - IO - Libuv - components - Timers": "",
	"Logic - IO - Libuv - components - FileSystem": "",
	"Logic - IO - Libuv - components - FileSystem - fs": "when dealing with modules like fs (file system), crypto, or networking features like HTTP, Node.js taps into a library called libuv. Libuv provides access to OS-level features, including threading.",
	"Logic - IO - Libuv - components - NetworkOperations": "Libuv supports asynchronous network operations, enabling Node.js to handle network communication efficiently.",
	"Logic - IO - Libuv - components - DNSOperations": "Libuv provides asynchronous DNS operations, enabling Node.js to perform DNS resolution without blocking the event loop.",

	"CICD - Bundling": "SECTION",
	"CICD - Bundling - ESM - Node23": "Experimental ESM integration.",
	"CICD - Bundling - package - package.json": "It acts as a map for Node and npm (Node Package Manager), telling them what your project is, what dependencies it requires, how it should be run, and much more.",
	"CICD - Bundling - package - package.json - fields - name": "The name of your project, which must be unique if you plan to publish it on npm.",
	"CICD - Bundling - package - package.json - fields - version": "Specifies the current version of your project. This follows semantic versioning (e.g., 1.0.0).",
	"CICD - Bundling - package - package.json - fields - description": "A brief description of your project, helping others understand its purpose.",
	"CICD - Bundling - package - package.json - fields - main": "Specifies the entry point of your application, usually a file like index.js.",
	"CICD - Bundling - package - package.json - fields - author": "Your name or the name of your organization.",
	"CICD - Bundling - package - package.json - fields - license": "Specifies the licensing terms for your project, such as MIT, GPL, or proprietary.",
	"CICD - Bundling - package - package.json - fields - keywords": "An array of keywords to help people discover your project.",
	"CICD - Bundling - package - package.json - fields - repository": "Links to the project’s source code repository.",
	"CICD - Bundling - package - package.json - fields - bugs": "Provides an issue-tracking URL.",
	"CICD - Bundling - package - package.json - fields - homepage": "The homepage URL for the project.",
	"CICD - Bundling - package - package.json - Dependencies": "Dependencies are the external libraries or packages your project needs to function.",
	"CICD - Bundling - package - package.json - Dependencies - dependencies": "These are required for your application to run. For example, express might be a dependency if you’re building an API.",
	"CICD - Bundling - package - package.json - Dependencies - devDependencies": "These are only needed during development. For instance, a testing library like mocha could be listed here.",
	"CICD - Bundling - package - package.json - scripts": "Scripts allow you to automate common tasks like starting the server, running tests, or building the project.",

	"CICD - Building": "SECTION",
  "CICD - Building - GoogleV8": "Node.js is built on Google’s V8 engine, which compiles JavaScript into native machine code.",
  "CICD - Building - SWC": "SWC (stands for Speedy Web Compiler ) is a super-fast TypeScript / JavaScript compiler written in Rust.",
  "CICD - Building - SWC - WASM": "WebAssembly (WASM).",
  "CICD - Building --experimental-strip-types": "A few days ago, the tech community woke up to the news that the experimental --experimental-strip-types flag has been added to Node.js, currently available in the Node 23 nightly build. This development allows developers to write TypeScript code using .ts files in Node.js without the need for a compile step. Previously, running TypeScript in Node.js required a build process to transpile TypeScript into JavaScript. This new feature eliminates that necessity, enabling direct execution of TypeScript files.",

	"CICD - Execution": "SECTION",
	"CICD - Execution - threading - SingleThreaded": "Node.js runs your JavaScript code (your application’s logic) on a single thread. All your event handlers and callbacks are executed here.",
	"CICD - Execution - threading - SingleThreaded - EventLoop": "The reason Node.js can handle multiple operations even with a single thread lies in its Event Loop. The Event Loop is an architectural model that allows Node.js to perform asynchronous operations by offloading time-consuming tasks to background processes (like the thread pool or the OS).",
	"CICD - Execution - threading - SingleThreaded - EventLoop - blokcking": "Operations like reading large files synchronously or running complex computations directly in your Node.js code will block the event loop. Since the event loop can only handle one task at a time, any blocking task will make the server unresponsive to incoming requests.",
	"CICD - Execution - threading - SingleThreaded - EventLoop - blokcking - syncIO": "Use asynchronous methods like `fs.readFile()` instead of `fs.readFileSync()`.",
	"CICD - Execution - threading - SingleThreaded - EventLoop - blokcking - heavy": "Offload heavy computations to worker threads or use services like AWS Lambda for CPU-intensive tasks",
	"CICD - Execution - threading - SingleThreaded - EventLoop - blokcking - large": "Break up large tasks using `setImmediate()` or `process.nextTick()` to avoid freezing the event loop.",
	"CICD - Execution - threading - MultiThreaded": "For non-JavaScript tasks like file I/O, cryptography, and DNS lookups, Node.js offloads these to a thread pool managed by libuv.",
	"CICD - Execution - threading - MultiThreaded - non-blocking I/O": "Node.js uses non-blocking I/O to manage concurrency. This means when an I/O task is requested (e.g., reading from a database or file), Node.js doesn’t sit idle waiting for the result. Instead, it hands off the task to the OS and moves on to the next request. This architecture allows Node.js to handle thousands of concurrent connections efficiently.",
	"CICD - Execution - threading - MultiThreaded - threadpool": "For specific operations like file access, DNS lookups, or cryptography, Node.js makes use of libuv’s thread pool to handle these blocking tasks. Each thread in the pool processes one task, and once complete, the results are sent back to the Event Loop.",
	"CICD - Execution - threading - MultiThreaded - threadpool - UV_THREADPOOL_SIZE": "You can control the size of this thread pool by setting the environment variable UV_THREADPOOL_SIZE.",
	"CICD - Execution - threading - Worker Threads": "For cases where the Event Loop and thread pool aren’t enough (particularly for CPU-heavy tasks), Node.js introduced Worker Threads. This allows you to run JavaScript code in parallel across multiple threads, truly leveraging multi-core processors. https://levelup.gitconnected.com/node-js-is-not-single-threaded-ae3d2f698a99",
	"CICD - Execution - Run - child_process": "The child_process module lets you execute shell commands directly within a JavaScript program, making it ideal for running scripts and automating tasks.",
	"CICD - Execution - Run - node run": "running code snippets directly from the command line.",
	"CICD - Execution - Run - node -e": "running code snippets directly from the command line.",
	"CICD - Execution - ChildProcesses": "Node.js includes the child_process module, which has functions to create new processes.",
	"CICD - Execution - ChildProcesses - usage - os": ".",
	"CICD - Execution - ChildProcesses - usage - shell": ".",

	"CICD - Audit": "SECTION",
	"CICD - Audit - Debug - --inspect-brk": "The --inspect-brk flag in Node enables debugging by pausing execution on the first line, allowing you to connect to Chrome DevTools for a detailed inspection.",
	"CICD - Audit - Debug - --trace-warnings": "The --trace-warnings flag in Node provides detailed stack traces for warnings, which can help diagnose potential issues more effectively.",
	"CICD - Audit - Debug - --prof": "The --prof flag in Node enables the V8 profiler, which generates a detailed log that can be used for performance analysis of your script."


}