{
	"development": "SECTION",
	"SpringCloudFunction": "Spring Cloud Function is a project, released under the non-restrictive Apache 2.0 license, to Promote the implementation of business logic via functions",
	"SpringCloudFunction - development - goal": "Support a uniform programming model across serverless providers, as well as the ability to run standalone (locally or in a PaaS).",
	"SpringCloudFunction - development - SpringBoot based": "Is a SpringBoot app so it enables Spring Boot features (auto-configuration, dependency injection, metrics) on serverless providers.",
	"SpringCloudFunction - development - Function": "Function<T, R> becomes the smallest building block in a Spring application.",
	"SpringCloudFunction - development - Function - FunctionCatalog": "One of the main features of Spring Cloud Function is to adapt and support a range of type signatures for user-defined functions, while providing a consistent execution model. That’s why all user defined functions are transformed into a canonical representation by FunctionCatalog, using primitives defined by the Project Reactor (i.e., Flux<T> and Mono<T>). Users can supply a bean of type Function<String,String>, for instance, and the FunctionCatalog will wrap it into a Function<Flux<String>,Flux<String>>.",
	"SpringCloudFunction - development - Function - FunctionCatalog - Reactor": "Using Reactor based primitives not only helps with the canonical representation of user defined functions, but it also facilitates a more robust and flexible(reactive) execution model.",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Consumer": "Consumer is a little bit special because it has a void return type, which implies blocking, at least potentially.",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Consumer - Consumer<T>": "User function: Consumer<T> - Catalog Registration: Function<Flux<T>, Mono<Void>>",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Consumer - Consumer<Message<T>>": "User function: Consumer<Message<T>> - Catalog Registration: Function<Flux<Message<T>>, Mono<Void>>",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Consumer - Consumer<Flux<T>>": "User function: Consumer<Flux<T>> - Catalog Registration: Consumer<Flux<T>>",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Supplier": "",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Supplier - Supplier<T>": "User function: Supplier<T> - Catalog Registration: Supplier<Flux<T>>",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Supplier - Supplier<Flux<T>>": "User function: Supplier<Flux<T>> - Catalog Registration: Supplier<Flux<T>>",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Function": "",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Function - Function<Flux<S>, Flux<T>>": "User function: Function<S,T> - Catalog Registration: Function<Flux<S>, Flux<T>>",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Function - Function<Message<S>,Message<T>>": "User function: Function<Message<S>,Message<T>> - Catalog Registration: Function<Flux<Message<S>>, Flux<Message<T>>>",
	"SpringCloudFunction - development - Function - FunctionCatalog - Types - Function - Function<Flux<S>, Flux<T>> ": "User function: Function<Flux<S>, Flux<T>> - Catalog Registration: Function<Flux<S>, Flux<T>> (pass through)",
	"SpringCloudFunction - development - Function - FunctionCatalog - Elements - Flux": "Flux is a Reactive Streams Publisher from Project Reactor.",
	"SpringCloudFunction - development - Function - FunctionCatalog - Elements - Flux - Params": "Functions can also be of Flux<String> or Flux<Pojo> and Spring Cloud Function takes care of converting the data to and from the desired types, as long as it comes in as plain text or (in the case of the POJO) JSON. ",
	"SpringCloudFunction - development - Function - FunctionCatalog - Elements - Message": "Functions and consumers that are declared with input and output in Message will see the request headers on the input messages, and the output message headers will be converted to HTTP headers.",
	"SpringCloudFunction - development - Function - FunctionCatalog - Elements - Message - Params": "There is also support for Message<Pojo> where the message headers are copied from the incoming event, depending on the adapter.",
	"SpringCloudFunction - development - Function - FunctionCatalog - Elements - Map": "The web adapter also supports conversion from form-encoded data to a Map, and if you are using the function with Spring Cloud Stream then all the conversion and coercion features for message payloads will be applicable as well.",
	"SpringCloudFunction - development - Function - location - @Beans in Application class": "Functions defined as Spring beans are automatically exposede.g. via HTTP in RPC style. The @Beans can be Function, Consumer or Supplier (all from java.util) @Bean public Function<Flux<String>, Flux<String>> uppercase() { return flux -> flux.map(value -> value.toUpperCase()), }",
	"SpringCloudFunction - development - Function - location - functions folder - spring.cloud.function.scan.packages": "add spring.cloud.function.scan.packages: com.scf.functions to application.properties",
	"SpringCloudFunction - development - Function - location - functions folder - @FunctionScan": "",
	"SpringCloudFunction - development - Function - multiplicity - unique": "If there is only one function (consumer etc.) then the name in the path is optional.",
	"SpringCloudFunction - development - Function - multiplicity - grouping": "Functions can be grouped together in a single application, or deployed one-per-jar. It’s up to the developer to choose. An app with multiple functions can be deployed multiple times in different 'personalities', exposing different functions over different physical transports.",
	"SpringCloudFunction - development - Function - multiplicity - composite": "We can compose many functions, piping the result of one function to input of another. Composite functions can be addressed using pipes or commas to separate function names (pipes are legal in URL paths, but a bit awkward to type on the command line).",
	"SpringCloudFunction - development - Web Apps": "With the web configurations activated your app will have an MVC endpoint (on '/' by default, but configurable with spring.cloud.function.web.path) that can be used to access the functions in the application context.",
	"SpringCloudFunction - development - Web Apps - Config - spring-cloud-function-web": "The spring-cloud-function-web module has autoconfiguration that activates when it is included in a Spring Boot web application (with MVC support).",
	"SpringCloudFunction - development - Web Apps - Config - spring-cloud-starter-function-web": "There is also a spring-cloud-starter-function-web to collect all the optional dependencies in case you just want a simple getting started experience.",
	"SpringCloudFunction - development - Web Apps - Config - Basic Example": "(1) Add spring-boot-starter-parent as parent in pom (2) add spring-boot-starter-web as dependency in pom (3) add spring-cloud-starter-function-web as dependency in pom",
	"SpringCloudFunction - development - Web Apps - ContentTypes": "The supported content types are plain text and JSON.",
	"SpringCloudFunction - development - Web Apps - EndPoints": "the behaviour of the endpoint depends on the method and also the type of incoming request data.",
	"SpringCloudFunction - development - Web Apps - EndPoints - singlevalued": "When the incoming data is single valued, and the target function is declared as obviously single valued (i.e. not returning a collection or Flux), then the response will also contain a single value.",
	"SpringCloudFunction - development - Web Apps - EndPoints - multivalued": "For multi-valued responses the client can ask for a server-sent event stream by sending `Accept: text/event-stream.",
	"SpringCloudFunction - development - Web Apps - EndPoints - paths - /{supplier}": "Method: GET, Request: -, Response: Items from the named supplier, Status: 200 OK",
	"SpringCloudFunction - development - Web Apps - EndPoints - paths - /{consumer}": "Method: POST, Request: JSON object or text, Response: Mirrors input and pushes request body into consumer, Status: 202 Accepted",
	"SpringCloudFunction - development - Web Apps - EndPoints - paths - /{consumer}": "Method: POST, Request: JSON array or text with new lines, Response: Mirrors input and pushes body into consumer one by one, Status: 200 Accepted",
	"SpringCloudFunction - development - Web Apps - EndPoints - paths - /{function}": "Method: POST, Request: JSON object or text, Response: The result of applying the named function, Status: 200 OK",
	"SpringCloudFunction - development - Web Apps - EndPoints - paths - /{function}": "Method: POST, Request: JSON array or text with new lines, Response: The result of applying the named function, Status: 200 OK",
	"SpringCloudFunction - development - Web Apps - EndPoints - paths - /{function}/{item}": "Method: POST, Request: -, Response: Convert the item into an object and return the result of applying the function, Status: 200 OK",
	"SpringCloudFunction - development - Streaming Apps": "The adapter has a couple of generic request handlers that you can use. Separated as Spring Cloud Stream I think",
	"SpringCloudFunction - development - Streaming Apps - Config - spring-cloud-function-stream": "To send or receive messages from a broker (such as RabbitMQ or Kafka) you can use the spring-cloud-function-stream adapter. Add the adapter to your classpath along with the appropriate binder from Spring Cloud Stream. The adapter will bind to the message broker as a Processor (input and output streams) unless the user explicitly disables one or the other using spring.cloud.function.stream.{source,sink}.enabled=false.",
	
	"deployment": "SECTION",
	"SpringCloudFunction - deployment - decoupled": "Decouple the development lifecycle of business logic from any specific runtime target so that the same code can run as a web endpoint, a stream processor, or a task. It abstracts away all of the transport details and infrastructure, allowing the developer to keep all the familiar tools and processes, and focus firmly on business logic.",
	"SpringCloudFunction - deployment - file": "Deploying a JAR file containing such an application context with an isolated classloader, so that you can pack them together in a single JVM.",
	"SpringCloudFunction - deployment - adapter": "As well as being able to run as a standalone process, a Spring Cloud Function application can be adapted to run one of the existing serverless platforms. In the project there are adapters for AWS Lambda, Azure, and Apache OpenWhisk. The Oracle Fn platform has its own Spring Cloud Function adapter. And Riff supports Java functions and its Java Function Invoker acts natively is an adapter for Spring Cloud Function jars.",
	"SpringCloudFunction - deployment - AWS": "To invoke an AWS lambda function, we need to specify a handler, there are 3 ways of creating a handler: Creating a custom MethodHandler, Implementing the RequestHandler interface, Implementing the RequestStreamHandler interface",
	"SpringCloudFunction - deployment - AWS - adapter": "The AWS adapter takes a Spring Cloud Function app and converts it to a form that can run in AWS Lambda.",
	"SpringCloudFunction - deployment - AWS - adapter - handlers": "The AWS adapter has 4 request handlers that you can use. ",
	"SpringCloudFunction - deployment - AWS - adapter - handlers - SpringBootApiGatewayRequestHandler": "extends from SpringBootRequestHandler",
	"SpringCloudFunction - deployment - AWS - adapter - handlers - SpringBootRequestHandler": "There is also a SpringBootRequestHandler which you can extend, and provide the input and output types as type parameters (enabling AWS to inspect the class and do the JSON conversions itself).",
	"SpringCloudFunction - deployment - AWS - adapter - handlers - SpringBootKinesisEventHandler": "extends from SpringBootStreamHandler",
	"SpringCloudFunction - deployment - AWS - adapter - handlers - SpringBootStreamHandler": "The most generic is SpringBootStreamHandler, which uses a Jackson ObjectMapper provided by Spring Boot to serialize and deserialize the objects in the function.",
	"SpringCloudFunction - deployment - AWS - adapter - handlers - FUNCTION_NAME": "If your app has more than one @Bean of type Function etc. then you can choose the one to use by configuring function.name (e.g. as FUNCTION_NAME environment variable in AWS). The functions are extracted from the Spring Cloud FunctionCatalog (searching first for Function then Consumer and finally Supplier).",
	"SpringCloudFunction - deployment - Azure - adapter": "",
	"SpringCloudFunction - deployment - Openwhisk - adapter": "",
	
	"invokation": "SECTION",
	"SpringCloudFunction - invoke - access": "The function is exposed to and can be accessed by the outside world as either HTTP endpoints and/or message stream listeners/publishers with RabbitMQ, Kafka etc.",
	"SpringCloudFunction - invoke - request": "$ curl -H 'Content-Type: text/plain' localhost:8080/uppercase -d Hello"
}