{
	"Microservices": "SECTION",
	"Microservices - Monolithic": "Build an application with a monolithic architecture. For example: a single Java WAR file. a single directory hierarchy of Rails or NodeJS code",
	"Microservices - Monolithic - Scaling": "",
	"Microservices - Monolithic - Scaling - Dimensions": "In their book “The Art of Scalability,” Martin Abbott and Michael Fisher elaborate on the concept of the “scale cube,”. (X) Each service can then be further scaled by cloning (X-axis), (Y) The microservices pattern maps to the Y-axis of the cube, wherein functional decomposition is used to scale the system (Z) sharding (Z-axis).",
	"Microservices - Monolithic - Scaling - Scale Cube - X - clone services (horizontal duplication)": "X-axis scaling consists of running multiple copies of an application behind a load balancer. If there are N copies then each copy handles 1/N of the load. This is a simple, commonly used approach of scaling an application. One drawback of this approach is that because each copy potentially accesses all of the data, caches require more memory to be effective. Another problem with this approach is that it does not tackle the problems of increasing development and application complexity.",
	"Microservices - Monolithic - Scaling - Scale Cube - y - microservices (functional decomposition)": "Unlike X-axis and Z-axis, which consist of running multiple, identical copies of the application, Y-axis axis scaling splits the application into multiple, different services. Each service is responsible for one or more closely related functions. There are a couple of different ways of decomposing the application into services. One approach is to use verb-based decomposition and define services that implement a single use case such as checkout. The other option is to decompose the application by noun and create services responsible for all operations related to a particular entity such as customer management. An application might use a combination of verb-based and noun-based decomposition.",
	"Microservices - Monolithic - Scaling - Scale Cube - z - sharding databases (data partioning)": "When using Z-axis scaling each server runs an identical copy of the code. In this respect, it’s similar to X-axis scaling. The big difference is that each server is responsible for only a subset of the data. Some component of the system is responsible for routing each request to the appropriate server. One commonly used routing criteria is an attribute of the request such as the primary key of the entity being accessed. Another common routing criteria is the customer type. For example, an application might provide paying customers with a higher SLA than free customers by routing their requests to a different set of servers with more capacity.",
	"Microservices - Microservice": "Define an architecture that structures the application as a set of loosely coupled, collaborating services.",
	"Microservices - Microservice - CAP": "According to CAP theorem, microservices sacrify consistency to improve availabity",
	"Microservices - Microservice - Eventual Consistent": "3 approaches: (1) remove inconsistenct by design (event sourcing + CQRS), (2) address the inconsistency (saga), (3) accept the inconsistency",
	"Microservices - Microservice - Priorities": "(0) Eventual Consistency (1) Decomposition + Storage (2) Service Discovery + Publishing + Commnication Style + Deployment (3) UI + Testing + Configuration + Observability + Security + Reliability +  ",

	"Data": "SECTION",
	"Data - Decomposition": "by Business Capability - by Subdomain",
	"Data - Decomposition - by Business Capability": "Define services corresponding to business capabilities. A business capability is a concept from business architecture modeling. It is something that a business does in order to generate value. A business capability often corresponds to a business object, e.g. Order Management is responsible for orders Customer Management is responsible for customers Business capabilities are often organized into a multi-level hierarchy. For example, an enterprise application might have top-level categories such as Product/Service development, Product/Service delivery, Demand generation, etc.",
	"Data - Decomposition - by Subdomain": "Define services corresponding to Domain-Driven Design (DDD) subdomains. DDD refers to the application’s problem space - the business - as the domain. A domain is consists of multiple subdomains. Each subdomain corresponds to a different part of the business. Subdomains can be classified as follows: Core - key differentiator for the business and the most valuable part of the application Supporting - related to what the business does but not a differentiator. These can be implemented in-house or outsourced. Generic - not specific to the business and are ideally implemented using off the shelf software",
	"Data - Decomposition - by Other": "While the most discussed method for decomposition into microservices is decomposition by bounded context, in practice there are many more reasons for creating microservices: decomposing by maturity, decomposing by data-access pattern (read versus write), decomposition by data source (rather than partitioning a data source per microservice, create a microservice per data source), aggregation for a derived functionality (create an orchestrating service for a few other services), aggregation for client convenience (such as the backend for frontend pattern), aggregation to aid system performance, etc.",
	"Data - Storage": "Main challenge is address the eventual consistency issue: Database per Service - Shared database - Saga - API Composition - CQRS - Event sourcing - Application events",
	"Data - Storage - Patttern Shared database": "Use a (single) database that is shared by multiple services. Each service freely accesses data owned by other services using local ACID transactions.",
	"Data - Storage - Patttern Database per Service": "Keep each microservice’s persistent data private to that service and accessible only via its API. The following diagram shows the structure of this pattern. The service’s database is effectively part of the implementation of that service. It cannot be accessed directly by other services. There are a few different ways to keep a service’s persistent data private. You do not need to provision a database server for each service. For example, if you are using a relational database then the options are: Private-tables-per-service – each service owns a set of tables that must only be accessed by that service Schema-per-service – each service has a database schema that’s private to that service Database-server-per-service – each service has it’s own database server. Private-tables-per-service and schema-per-service have the lowest overhead. Using a schema per service is appealing since it makes ownership clearer. Some high throughput services might need their own database server. It is a good idea to create barriers that enforce this modularity. You could, for example, assign a different database user id to each service and use a database access control mechanism such as grants. Without some kind of barrier to enforce encapsulation, developers will always be tempted to bypass a service’s API and access it’s data directly.",
	"Data - Storage - Patttern 2PC - Not an option": "One attempt to solve this problem in an automated and hassle-free manner is the XA protocol implementing the two-phase commit (2PC) pattern. But in modern high-scale applications (especially in a cloud environment), 2PC doesn’t seem to perform so well. To eliminate the disadvantages of 2PC, we have to trade ACID for BASE and cover consistency concerns ourselves in different ways depending on the requirements.",
	"Data - Storage - Patttern Saga": "Implement each business transaction that spans multiple services as a saga. A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions. There are two ways of coordination sagas: Choreography - each local transaction publishes domain events that trigger local transactions in other services Orchestration - an orchestrator (object) tells the participants what local transactions to execute. Saga provides ACD but misses I (isolation). Products Tram, AXON framework",
	"Data - Storage - Patttern CQRS": "Split the application into two parts: the command-side and the query-side. The command-side handles create, update, and delete requests and emits events when data changes. The query-side handles queries by executing them against one or more materialized views that are kept up to date by subscribing to the stream of events emitted when data changes.",
	"Data - Storage - Patttern Event sourcing": "A good solution to this problem is to use event sourcing. Event sourcing persists the state of a business entity such an Order or a Customer as a sequence of state-changing events. Whenever the state of a business entity changes, a new event is appended to the list of events. Since saving an event is a single operation, it is inherently atomic. The application reconstructs an entity’s current state by replaying the events. Applications persist events in an event store, which is a database of events. The store has an API for adding and retrieving an entity’s events. The event store also behaves like a message broker. It provides an API that enables services to subscribe to events. When a service saves an event in the event store, it is delivered to all interested subscribers. Some entities, such as a Customer, can have a large number of events. In order to optimize loading, an application can periodically save a snapshot of an entity’s current state. To reconstruct the current state, the application finds the most recent snapshot and the events that have occurred since that snapshot. As a result, there are fewer events to replay.",
	"Data - Decomposition and Storage - Persisting state (modularization) vs persisting events (aggregates = materialized views)": "by Capability has the problem of 2PC because dependencies (violates encapsulation). We can use Saga but is not ACID but ACD (no isolation). Therefore use DDD aggregates instead modularization. Rules: (1) Refer entitites by primary key. (2) One aggregate to comand per atomic transaction. (3) How to maintain consistency between aggregates?? Events sourcing solves this by persisting events instead state. But has challenge of maintain consistency between aggregates",

	"Implementation - Publishing": "SECTION",
	"Implementation - Publishing - API Gateway": "API Gateway - Backend for front-end. Implement an API gateway that is the single entry point for all clients. The API gateway handles requests in one of two ways. Some requests are simply proxied/routed to the appropriate service. It handles other requests by fanning out to multiple services.",
	"Implementation - Publishing - API Gateway vs Load Balancer": "API Gateway is a traffic manager at Layer 7 of OSI Model. Load Balancer is a network distributor at Layer 4 or 7 of OSI Model.",
	"Implementation - Publishing - Service Mess": "A service mesh is a configurable infrastructure layer for a microservices application. It makes communication between service instances flexible, reliable, and fast. The mesh provides service discovery, load balancing, encryption, authentication and authorization, support for the circuit breaker pattern, and other capabilities.",
	"Implementation - Publishing - Service Mess - Product - Istio": "",
	"Implementation - Publishing - Service Mess vs API Gateway": "A service mesh's primary purpose is to manage internal service-to-service communication, while an API Gateway is primarily meant for external client-to-service communication. The main purpose of an API gateway is to accept traffic from outside your network and distribute it internally. The main purpose of a service mesh is to route and manage traffic within your network. A service mesh can work with an API gateway to efficiently accept external traffic then effectively route that traffic once it's in your network. The combination of these technologies can be a powerful way to ensure application uptime and resiliency while ensuring your applications are easily consumable. In a deployment with an API gateway and a service mesh, incoming traffic from outside the cluster would first be routed through the API gateway, then into the mesh. it seems highly likely that service mesh and API gateway functionality will merge. In the next few years, we believe that standalone API gateways will be used less and less as much of their functionality will be absorbed by service mesh.",
	"Implementation - Publishing - Backend for front-end": "A variation of this pattern is the Backend for Front-End pattern. It defines a separate API gateway for each kind of client.",
	"Implementation - Service discovery": "Client-side discovery - Server-side discovery - Service registry - Self registration - 3rd party registration",
	"Implementation - Service discovery - Pattern Client-side discovery": "When making a request to a service, the client obtains the location of a service instance by querying a Service Registry, which knows the locations of all service instances.",
	"Implementation - Service discovery - Pattern Server-side discovery": "When making a request to a service, the client makes a request via a router (a.k.a load balancer) that runs at a well known location. The router queries a service registry, which might be built into the router, and forwards the request to an available service instance.",
	"Implementation - Service discovery - Pattern Service registry": "Implement a service registry, which is a database of services, their instances and their locations. Service instances are registered with the service registry on startup and deregistered on shutdown. Client of the service and/or routers query the service registry to find the available instances of a service. A service registry might invoke a service instance’s health check API to verify that it is able to handle requests",
	"Implementation - Service discovery - Pattern Self registration": "A service instance is responsible for registering itself with the service registry. On startup the service instance registers itself (host and IP address) with the service registry and makes itself available for discovery. The client must typically periodically renew its registration so that the registry knows it is still alive. On shutdown, the service instance unregisters itself from the service registry.",
	"Implementation - Service discovery - Pattern 3rd party registration": "A 3rd party registrar is responsible for registering and unregistering a service instance with the service registry. When the service instance starts up, the registrar registers the service instance with the service registry. When the service instance shuts downs, the registrar unregisters the service instance from the service registry.",
	"Implementation - Service discovery - Product": "Eureka",
	"Implementation - Communication Style": "RPC - Messaging - Domain Specific Protocol",
	"Implementation - Communication Style - Pattern RPC": "Use RPI for inter-service communication. The client uses a request/reply-based protocol to make requests to a service.",
	"Implementation - Communication Style - Pattern Messaging": "Use asynchronous messaging for inter-service communication. Services communicating by exchanging messages over messaging channels.",
	"Implementation - Communication Style - Pattern Domain Specific Protocol": "Use a domain-specific protocol for inter-service communication.",
	"Implementation - Deployment": "Multiple services per host - service per host - service per VM - service per container - serverless - specific serviecs platform",
	"Implementation - Deployment - Patttern Multiple services per host": "Run multiple instances of different services on a host (Physical or Virtual machine). There are various ways of deploying a service instance on a shared host including: Deploy each service instance as a JVM process. For example, a Tomcat or Jetty instances per service instance. Deploy multiple service instances in the same JVM. For example, as web applications or OSGI bundles.",
	"Implementation - Deployment - Patttern service per host": "Deploy each single service instance on its own host",
	"Implementation - Deployment - Patttern service per VM": "Package the service as a virtual machine image and deploy each service instance as a separate VM",
	"Implementation - Deployment - Patttern service per container": "Package the service as a (Docker) container image and deploy each service instance as a container",
	"Implementation - Deployment - Patttern serverless": "Use a deployment infrastructure that hides any concept of servers (i.e. reserved or preallocated resources)- physical or virtual hosts, or containers. The infrastructure takes your service’s code and runs it. You are charged for each request based on the resources consumed. To deploy your service using this approach, you package the code (e.g. as a ZIP file), upload it to the deployment infrastructure and describe the desired performance characteristics. The deployment infrastructure is a utility operated by a public cloud provider. It typically uses either containers or virtual machines to isolate the services. However, these details are hidden from you. Neither you nor anyone else in your organization is responsible for managing any low-level infrastructure such as operating systems, virtual machines, etc.",
	"Implementation - Deployment - Patttern specific serviecs platform": "Use a deployment platform, which is automated infrastructure for application deployment. It provides a service abstraction, which is a named, set of highly available (e.g. load balanced) service instances.",

	"Tuning": "SECTION",
	"Tuning - UI Patterns": "Server-side page fragment composition - Client-side UI composition",
	"Tuning - UI Patterns - Pattern Server-side page fragment composition": "Each team developers a web application that generates the HTML fragment that implements the region of the page for their service. A UI team is responsible for developing the page templates that build pages by performing server-side aggregation (e.g. server-side include style mechanism) of the service-specific HTML fragments.",
	"Tuning - UI Patterns - Pattern Client-side UI composition": "Each team develops a client-side UI component, such an AngularJS directive, that implements the region of the page/screen for their service. A UI team is responsible implementing the page skeletons that build pages/screens by composing multiple, service-specific UI components.",
	"Tuning - Observability (Monitoring)": "Observability (logs, traces, metrics, events): Monitoring + Alerting/visualization + Distributed systems tracing infrastructure + Log aggregation/analytics: Log aggregation - Application metrics - Audit logging - Distributed tracing - Exception tracking - Health check API - Log deployments and changes",
	"Tuning - Observability (Monitoring) - Patttern Log aggregation": "Use a centralized logging service that aggregates logs from each service instance. The users can search and analyze the logs. They can configure alerts that are triggered when certain messages appear in the logs.",
	"Tuning - Observability (Monitoring) - Patttern Application metrics": "Instrument a service to gather statistics about individual operations. Aggregate metrics in centralized metrics service, which provides reporting and alerting. There are two models for aggregating metrics: push - the service pushes metrics to the metrics service pull - the metrics services pulls metrics from the service",
	"Tuning - Observability (Monitoring) - Patttern Audit logging": "Record user activity in a database.",
	"Tuning - Observability (Monitoring) - Patttern Distributed tracing": "Instrument services with code that: Assigns each external request a unique external request id. Passes the external request id to all services that are involved in handling the request. Includes the external request id in all log messages. Records information (e.g. start time, end time) about the requests and operations performed when handling a external request in a centralized service. This instrumentation might be part of the functionality provided by a Microservice Chassis framework.",
	"Tuning - Observability (Monitoring) - Patttern Exception tracking": "Report all exceptions to a centralized exception tracking service that aggregates and tracks exceptions and notifies developers.",
	"Tuning - Observability (Monitoring) - Patttern Health check API": "A service has an health check API endpoint (e.g. HTTP /health) that returns the health of the service. The API endpoint handler performs various checks, such as: the status of the connections to the infrastructure services used by the service instance, the status of the host, e.g. disk space, application specific logic A health check client - a monitoring service, service registry or load balancer - periodically invokes the endpoint to check the health of the service instance.",
	"Tuning - Observability (Monitoring) - Patttern Log deployments and changes": "Log every deployment and every change to the (production) environment.",
	"Tuning - Observability (Monitoring) - Product - Prometheus": "Prometheus is an open-source toolkit for monitoring and alerting based on an embedded times-series database, a query DSL and various mechanics for scraping metrics data off endpoints.",
	"Tuning - Testing": "Unit Testing, Integration Testing, Contract Testing, End-to-End Testing",
	"Tuning - Testing - End-to-End Testing": "End-to-End (E2E) testing ascertains that the overall system is accurately working as well as the network infrastructure (load balancers, firewall, and more) is correctly configured. E2E tests, however, need to be run at the finest coarse granularity possible to test the functionality of the entire system. In this, QA engineers verify the behavior of the fully-integrated process and make sure that the system collectively meets its business requirements, regardless of the Service Component Architecture in use. With the help of functional testing, developers can determine if an integrated system or app functions as stated in the requirements.",
	"Tuning - Testing - Contract Testing": "Contract testing is a sort of a black box that verifies the contract between an external service call and its API provider endpoint. There are two types of contract testing, including: Integration contract testing, Consumer-driven contract testing",
	"Tuning - Testing - Contract Testing - Integration contract testing": "In integration contract testing, each component needs to be called independently, and it must meet the contract agreement anticipated by a consuming service. The best way to deal with this is to carry out a test against the double. On a side note, it’s critical to run a separate set of tests periodically to confirm that there are no changes against your test doubles. However, a failure in these tests can slow down the deployment pipeline and disrupt the functionality of an IT infrastructure or distributed system. One best possible way to handle intermittent test failures is by updating your test doubles, and probably the code too so as to bring them back into high coherence and consistency with external services.",
	"Tuning - Testing - Contract Testing - Consumer-driven contract testing": "In consumer-driven contract testing, consumers will delineate the way in which they want to consume a service. The consumer contracts can be made in a mutually consented language and schema between the producer and consumer. The service providers will test a service against the replicas of the individual contracts, and then make changes to that particular service without impacting the nature of other services.",
	"Tuning - Testing - Integration Testing": "Integration testing takes place in the staging environment to integrate individual services after analyzing the functionality of communication pathways and interactions between them. Unlike monolithic or SOA, microservices architecture depends on the Inter-Process Communication (IPC) mechanism to function appropriately, which is why the interactions between services must be verified. Automated tests need to be written for mapping out the success and error cases through the integration with external services and data stores. Running gateway integration tests will defect interface errors, such as incorrect SSL handling and missing HTTP headers, at the protocol level. And the persistence integration test ensures that each component and protocol client must respond as an external dependency in case of timeouts and partial failures.",
	"Tuning - Testing - Unit Testing": "The scope of unit testing can be sociable or solitary concerning a service. The smaller the unit will be under test, the easier it is to determine the behavior of modules and probe the collaborators as well as interactions between objects and their dependencies. Since the cyclomatic complexity of the unit is inferior, Quality Analysis (QA) engineers can evaluate whether or not the units are isolated from their collaborators by using this testing strategy. Both the sociable and solitary unit testing styles are frequently used simultaneously in the same codebase to tackle different testing issues. The motive behind testing the domain layer is to emulate DML statements and certify that all collaborators use the real domain objects in correct sequence. During the unit testing, engineers can verify the logic used to generate map responses or other requests from external remote dependencies. As far as resources and service layer are concerned, they validate that each component correctly interacts with its collaborator, thereby monitoring the request/response cycle in a repeatable and consistent manner.",
	"Tuning - Cross cutting": "Microservice chassis - Externalized configuration",
	"Tuning - Cross cutting concerns - Patttern Microservice chassis": "Build your microservices using a microservice chassis framework, which handles cross-cutting concerns",
	"Tuning - Cross cutting concerns - Patttern Externalized configuration": "Externalize all application configuration including the database credentials and network location. On startup, a service reads the configuration from an external source, e.g. OS environment variables, etc.",
	"Tuning - Security. Transport": "TLS/HTTPS",
	"Tuning - Security. Input Validations - Message Size": "",
	"Tuning - Security. Input Validations - SQL Injection": "",
	"Tuning - Security. Input Validations - JSON Threat Protection": "",
	"Tuning - Security. Input Validations - XML Threat Protection": "",
	"Tuning - Security. Authentication - JWT": "The API Gateway authenticates the request and passes an access token.",
	"Tuning - Security. Authentication - JWT - JSON": "You can think of JWT as a piece of JSON data that you can verify to confirm that the data comes from someone you trust.",
	"Tuning - Security. Authentication - JWT - cookies": "In practice, in most web authentication cases, JWT data is stored in session cookies, meaning you now have two layers of signatures: one on the cookie itself and one on the JWT.",
	"Tuning - Security. Authentication - OpenID Connect": "",
	"Tuning - Security. Authentication - OAuth2": "",
	"Tuning - Security. Authentication - SAML": "",			
	"Tuning - Reliability": "Circuit Breaker",
	"Tuning - Reliability - Pattern Circuit Breaker": "A service client should invoke a remote service via a proxy that functions in a similar fashion to an electrical circuit breaker. When the number of consecutive failures crosses a threshold, the circuit breaker trips, and for the duration of a timeout period all attempts to invoke the remote service will fail immediately. After the timeout expires the circuit breaker allows a limited number of test requests to pass through. If those requests succeed the circuit breaker resumes normal operation. Otherwise, if there is a failure the timeout period begins again.",
	"Tuning - Reliability - Pattern Circuit Breaker - Product": "Hystrix"
}