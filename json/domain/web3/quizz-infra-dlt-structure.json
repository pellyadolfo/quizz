{

	"Storage": "SECTION",
	"Storage - Block": "",
	"Storage - State - Structures": "",
	"Storage - State - Structures - WorldStateTrie": ".",
	"Storage - State - Structures - WorldStateTrie - Purpose": "Stores all accounts (EOAs and contracts) and their current state (balance, nonce, storage, codeHash).",
	"Storage - State - Structures - WorldStateTrie - Implementation": "Uses a modified Merkle Patricia Trie (MPT) for efficient cryptographic proofs. Each node is referenced by its Keccak-256 hash. Root hash stored in the block header (stateRoot).",
	"Storage - State - Structures - WorldStateTrie - Implementation - Structure": ".",
	"Storage - State - Structures - WorldStateTrie - Implementation - Structure - keys": "A global trie where each key is a 20-byte Ethereum address (common.Address)",
	"Storage - State - Structures - WorldStateTrie - Implementation - Structure - values": "each value is an account state object containing: nonce, balance (in Wei, 1 ETH = 10¹⁸ Wei), storageRoot (hash of the contract's storage trie, empty for EOAs), codeHash (hash of contract bytecode, keccak256('') for EOAs).",
	"Storage - State - Structures - WorldStateTrie - Implementation - Structure - example": "├── Address 0x123... → {nonce: 5, balance: 1 ETH, storageRoot: 0xabc..., codeHash: 0xdef...}",
	"Storage - State - Structures - WorldStateTrie - Implementation - Structure - Root": "Root Hash: The root of this trie is stored in the block header as stateRoot.",
	"Storage - State - Structures - WorldStateTrie - Implementation - Structure - Ethereum - Geth": "The stateObject struct in Geth holds an account's balance and other fields: core/state/state_object.go",
	"Storage - State - Structures - WorldStateTrie - Ethereum - Geth": "Code (Geth): trie/trie.go",
	"Storage - State - Structures - AccountStorageTrie": ".",
	"Storage - State - Structures - AccountStorageTrie - Purpose": "Each contract has its own storage trie to persist key-value pairs (e.g., balances[address]).",
	"Storage - State - Structures - AccountStorageTrie - Structure": "A sub-trie of the world state trie, referenced by storageRoot in the account.",
	"Storage - State - Structures - AccountStorageTrie - Ethereum - Geth": "Code (Geth): core/state/statedb.go",
	"Storage - State - Database": "Backing Storage: The trie nodes are stored in a key-value database (e.g., LevelDB in Geth).",
	"Storage - State - Database - Keys": "Node hashes (Keccak-256).",
	"Storage - State - Database - Values": "Serialized trie nodes (RLP-encoded).",
	"Storage - State - Database - Directory": "In Geth, the state is stored in the chaindata directory (e.g., geth/chaindata).",
	"Storage - State - Database - Nodes": "Trie nodes are stored under prefixes like s (state), c (code), etc. Example key: s + nodeHash → RLP-encoded node.",
	"Storage - State - StateAPI": "Geth’s state API allows inspecting the trie:",
	"Storage - State - StateAPI - state": "state, _ := ethapi.NewStateDB(ctx, db, block.Header())",
	"Storage - State - StateAPI - balance": "balance := state.GetBalance(common.HexToAddress('0x...'))",

	"Consensus": "SECTION",
	"Consensus ": "",

	"Execution": "SECTION",

	"Communications": "SECTION",
	"Communications - P2P": "Networking (P2P) Layer. Enables communication between nodes.",
	"Communications - JSON-RPC": "Allows external interaction with the blockchain.",
	"Communications - JSON-RPC - DefaultBlock": "",
	"Communications - JSON-RPC - DefaultBlock - eth_getBalance": "",
	"Communications - JSON-RPC - DefaultBlock - eth_getCode": "",
	"Communications - JSON-RPC - DefaultBlock - eth_getTransactionCount": "",
	"Communications - JSON-RPC - DefaultBlock - eth_getStorageAt": "",
	"Communications - JSON-RPC - DefaultBlock - eth_call": "",
	"Communications - JSON-RPC - Gossip": "",
	"Communications - JSON-RPC - Gossip - eth_blockNumber": "",
	"Communications - JSON-RPC - Gossip - eth_sendRawTransaction": "",
	"Communications - JSON-RPC - State": "",
	"Communications - JSON-RPC - State - eth_getBalance": "",
	"Communications - JSON-RPC - State - eth_getStorageAt": "",
	"Communications - JSON-RPC - State - eth_getTransactionCount": "",
	"Communications - JSON-RPC - State - eth_getCode": "",
	"Communications - JSON-RPC - State - eth_call": "",
	"Communications - JSON-RPC - State - eth_estimateGas": "",
	"Communications - JSON-RPC - History": "",
	"Communications - JSON-RPC - History - eth_getBlockTransactionCountByHash": "",
	"Communications - JSON-RPC - History - eth_getBlockTransactionCountByNumber": "",
	"Communications - JSON-RPC - History - eth_getUncleCountByBlockHash": "",
	"Communications - JSON-RPC - History - eth_getUncleCountByBlockNumber": "",
	"Communications - JSON-RPC - History - eth_getBlockByHash": "",
	"Communications - JSON-RPC - History - eth_getBlockByNumber": "",
	"Communications - JSON-RPC - History - eth_getTransactionByHash": "",
	"Communications - JSON-RPC - History - eth_getTransactionByBlockHashAndIndex": "",
	"Communications - JSON-RPC - History - eth_getTransactionByBlockNumberAndIndex": "",
	"Communications - JSON-RPC - History - eth_getTransactionReceipt": "",
	"Communications - JSON-RPC - History - eth_getUncleByBlockHashAndIndex": "",
	"Communications - JSON-RPC - History - eth_getUncleByBlockNumberAndIndex": ""

}
