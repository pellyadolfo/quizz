{
	"CI - Packaging": "SECTION",
	"CI - Packaging - Packages": "PROGRAMS are organized as sets of packages.",
	"CI - Packaging - Packages - Members": "The members of a package are classes and interfaces, which are declared in compilation units of the package, and subpackages, which may contain compilation units and subpackages of their own.",
	"CI - Packaging - Modules": "If a set of packages is sufficiently cohesive, then the packages may be grouped into a module.",
	"CI - Packaging - Modules - Benefits - Encapsulation": "Before modules, Java relied on classpath-based access, where all classes in the classpath were visible to each other, leading to: Unintended usage of internal APIs (e.g., sun.misc.Unsafe).",
	"CI - Packaging - Modules - Benefits - Encapsulation - exports": "Modules enforce explicit exports, allowing only specified packages to be accessible outside the module. Non-exported packages are hidden, even if classes inside are public.",
	"CI - Packaging - Modules - Benefits - Encapsulation - exports..to": "exports com.example.api to com.example.client;",
	"CI - Packaging - Modules - Benefits - Encapsulation - export optional - Java23": ".",
	"CI - Packaging - Modules - Benefits - Encapsulation - opens": "For Runtime Reflection Access. Allows deep reflection (e.g., setAccessible(true)) on the package’s types at runtime. Does not grant compile-time access (unless also exports). Used for frameworks like Spring, Hibernate, or JPA that rely on reflection.",
	"CI - Packaging - Modules - Benefits - Encapsulation - opens..to": "opens com.example.internal to spring.core;",
	"CI - Packaging - Modules - Benefits - Encapsulation - uses - Java23": "",
	"CI - Packaging - Modules - Benefits - Encapsulation - provides - Java23": "",
	"CI - Packaging - Modules - Benefits - Encapsulation - requires - Java23": "",
	"CI - Packaging - Modules - Benefits - Encapsulation - permits - Java23": "permits resources com.example.resources.*;",
	"CI - Packaging - Modules - Benefits - Encapsulation - Dependency": "Unlike traditional classpath-based systems, modules provide versionless dependencies (though versioning is handled by build tools like Maven/Gradle). Helps avoid dependency conflicts and classloading issues.",
	"CI - Packaging - Modules - Benefits - Encapsulation - SplitPackage": "A split package occurs when two or more modules (or JARs on the classpath) contain classes in the same package.",
	"CI - Packaging - Modules - Benefits - Security": "By hiding internal APIs (e.g., com.sun.*), modules reduce the attack surface. Applications can depend only on what they declare, avoiding accidental use of unsupported APIs.",
	"CI - Packaging - Modules - Benefits - Performance": "Modules allow smaller runtime images (via jlink), as unused modules can be excluded. The JVM can optimize performance by knowing module boundaries ahead of time..",
	"CI - Packaging - Modules - Modules": "",
	"CI - Packaging - Modules - Modules - JDKInternals - Java9": "Most internal JDK APIs (packages starting with sun.*, com.sun.*, jdk.*, etc.) that were previously accessible are now encapsulated and not available by default.",
	"CI - Packaging - Modules - Config - requires": "Modules require explicit dependencies (requires directive), ensuring missing dependencies are detected at startup. Preventiing JARHell.",
	"CI - Packaging - Modules - Config": ".",
	"CI - Packaging - Modules - Config - module-info.java": ".",
	"CI - Packaging - Modules - Config - module-info.java - requires": "The dependency is mandatory at both compile-time and runtime but not exposed to dependents",
	"CI - Packaging - Modules - Config - module-info.java - requires transitive": "The dependency is mandatory at both compile-time and runtime and exposed to dependents.",
	"CI - Packaging - Modules - Config - module-info.java - requires static": "The dependency is mandatory at compile-time but optional at runtime and not exposed to dependents.",
	"CI - Packaging - Modules - Migration": "Designed to be backward-compatible (non-modular JARs still work via the 'unnamed module'). Gradual adoption possible (e.g., automatic modules for libraries not yet modularized).",
	"CI - Packaging - External - JNI": "",
	"CI - Packaging - External - ForeignMemoryAccessAPI - Java14": "The Foreign Memory Access API is a modern Java feature (introduced in Java 14 as an incubator module and finalized in Java 22) that provides safe and efficient access to memory outside the Java heap, including native memory, persistent memory, and memory-mapped files.",
	"CI - Packaging - External - ForeignMemoryAccessAPI - Components - MemorySegment": "Represents a contiguous region of memory.",
	"CI - Packaging - External - ForeignMemoryAccessAPI - Components - MemoryAddress": "Location within a memory segment.",
	"CI - Packaging - External - ForeignMemoryAccessAPI - Components - MemoryLayout": "Describes the arrangement of data in memory.",
	"CI - Packaging - External - ForeignMemoryAccessAPI - Components - SegmentAllocator": "Allocates memory segments.",
	"CI - Packaging - External - ForeignMemoryAccessAPI - Components - VarHandle": "Type-safe access to memory locations.",
	"CI - Packaging - External - ForeignFunctionAndMemoryAPI - Java18": "The Foreign Function & Memory API (FFM API) is a modern Java API for efficiently calling native code (C, C++, etc.) and managing off-heap memory without using the deprecated Java Native Interface (JNI). Introduced as an incubating feature in Java 16 (JEP 389) and refined in later versions, it aims to simplify native interoperation while improving performance and safety.",
	"CI - Packaging - External - ForeignLinkerAPI - Java16": "The Foreign Linker API was introduced as an incubator feature in Java 16 (JEP 389), providing a statically-typed, pure-Java access to native code. This API is part of Project Panama's goal to improve Java's interoperability with native code..",
	"CI - Packaging - CompilationUnit": "",
	"CI - Packaging - CompilationUnit - java.lang": "Every compilation unit implicitly imports every public class or interface declared in the predefined package java.lang, as if the declaration import java.lang.*; appeared at the beginning of each compilation unit immediately after any package declaration. As a result, the names of all those classes and interfaces are available as simple names in every compilation unit.",
	"CI - Packaging - CompilationUnit - Types - Ordinary": "",
	"CI - Packaging - CompilationUnit - Types - Ordinary - Parts": "",
	"CI - Packaging - CompilationUnit - Types - Ordinary - Parts - PackageDeclaration": "A package declaration, giving the fully qualified name of the package to which the compilation unit belongs. A compilation unit that has no package declaration is part of an unnamed package.",
	"CI - Packaging - CompilationUnit - Types - Ordinary - Parts - PackageDeclaration - Observable": "A package is observable if and only if at least one of the following is true: • An ordinary compilation unit containing a declaration of the package is observable (§7.3). • A subpackage of the package is observable",
	"CI - Packaging - CompilationUnit - Types - Ordinary - Parts - PackageDeclaration - Observable - Always": "The packages java, java.lang, and java.io are always observable.",
	"CI - Packaging - CompilationUnit - Types - Ordinary - Parts - PackageDeclaration - Visible": "A package is visible to a module M if and only if an ordinary compilation unit containing a declaration of the package is visible to M.",
	"CI - Packaging - CompilationUnit - Types - Ordinary - Parts - PackageDeclaration - UniquelyVisible": "A package is uniquely visible to a module M if and only if one of the following holds: • An ordinary compilation unit associated with M contains a declaration of the package, and M does not read any other module that exports the package to M. • No ordinary compilation unit associated with M contains a declaration of the package, and M reads exactly one other module that exports the package to M.",
	"CI - Packaging - CompilationUnit - Types - Ordinary - Parts - ImportDeclaration": "import declarations that allow classes and interfaces from other packages, and static members of classes and interfaces, to be referred to using their simple names.",
	"CI - Packaging - CompilationUnit - Types - Ordinary - Parts - ImportDeclaration - Qualified": "Without the use of an appropriate import declaration, a reference to a class or interface declared in another package, or a reference to a static member of another class or interface, would typically need to use a fully qualified name.",
	"CI - Packaging - CompilationUnit - Types - Ordinary - Parts - ClassesAndInterfaces": "Top level declarations of classes and interfaces",
	"CI - Packaging - CompilationUnit - Types - Modular": "A modular compilation unit consists of a module declaration, optionally preceded by import declarations",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ImportDeclaration": "The import declarations allow classes and interfaces from packages in this module and other modules, as well as static members of classes and interfaces, to be referred to using their simple names within the module declaration",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration": "A module declaration specifies a new named module.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - Dependencies": "A named module specifies dependences on other modules to define the universe of classes and interfaces available to its own code; and specifies which of its packages are exported or opened in order to populate the universe of classes and interfaces available to other modules which specify a dependence on it.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - Types": "There are two kinds of modules: normal modules and open modules. The kind of a module determines the nature of access to the module's types, and the members of those types, for code outside the module.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - Types - Normal": "A normal module, without the open modifier, grants access at compile time and run time to types in only those packages which are explicitly exported.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - Types - Open": "An open module, with the open modifier, grants access at compile time to types in only those packages which are explicitly exported, but grants access at run time to types in all its packages, as if all packages had been exported.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - ModuleDirective": "The directives of a module declaration specify the module's dependences on other modules (via requires), the packages it makes available to other modules (via exports and opens), the services it consumes (via uses), and the services it provides (via provides).",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - ModuleDirective - requires": "The requires directive specifies the name of a module on which the current module has a dependence.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - ModuleDirective - requires - transitive": "The requires keyword may be followed by the modifier transitive. This causes any module which requires the current module to have an implicitly declared dependence on the module specified by the requires transitive directive.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - ModuleDirective - requires - static": "The requires keyword may be followed by the modifier static. This specifies that the dependence, while mandatory at compile time, is optional at run time.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - ModuleDirective - exports": "The exports directive specifies the name of a package to be exported by the current module. For code in other modules, this grants access at compile time and run time to the public and protected types in the package, and the public and protected members of those types. It also grants reflective access to those types and members for code in other modules.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - ModuleDirective - opens": "The opens directive specifies the name of a package to be opened by the current module. For code in other modules, this grants access at run time, but not compile time, to the public and protected types in the package, and the public and protected members of those types. It also grants reflective access to all types in the package, and all their members, for code in other modules.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - ModuleDirective - uses": "The uses directive specifies a service for which code in the current module may discover providers via java.util.ServiceLoader. The service may be declared in the current module or in another module.",
	"CI - Packaging - CompilationUnit - Types - Modular - Parts - ModuleDeclaration - ModuleDirective - provides": "The provides directive specifies a service for which the with clause specifies one or more service providers to java.util.ServiceLoader.",
	"CI - Packaging - CompilationUnit - Types - UnnamedModule": "An observable ordinary compilation unit that the host system does not associate with a named module is associated with an unnamed module.",
	"CI - Packaging - Jar": "",
	"CI - Packaging - Jar - MRJAR": "Multi-Release JAR (MRJAR) files, introduced in Java 9 and fully supported in Java 11, allow a single JAR file to contain different versions of class files targeting different Java versions. This enables backward compatibility while leveraging newer Java features where available.",
	"CI - Packaging - Jar - MRJAR - JVM": "A single JAR can include version-specific implementations. The JVM automatically selects the right class files based on the runtime version.",
	"CI - Packaging - Jar - MRJAR - MANIFEST.MF": "Multi-Release: true",
	"CI - Packaging - Tools - JPackage": "The packaging tool simplifies distribution of Java applications by providing native installation experiences for end users, eliminating the need for manual Java installation or complex deployment scripts.",

	"CI - OSGi": "SECTION",

	"CI - JPMS": "SECTION",
	"CI - JPMS ": "Java Platform Module System",

	"CI - SpringModulith": "SECTION",
	"CI - SpringModulith ": "SECTION"
}