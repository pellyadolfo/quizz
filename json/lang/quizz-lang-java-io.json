{
	"IO": "SECTION",


	"Input": "SECTION",
	"Input - ProgramLineArguments": "",
	"Input - Console - Console": "Console Class has been becoming a preferred way for reading userâ€™s input from the command line, Introduced in JDK 1.6. In addition, it can be used for reading password-like input without echoing the characters entered by the user; the format string syntax can also be used (like System.out.printf()).",
	"Input - Console - Scanner": "Scanner Class is probably the most preferred method to take input, Introduced in JDK 1.5. The main purpose of the Scanner class is to parse primitive types and strings using regular expressions; however, it is also can be used to read input from the user in the command line.",
	"Input - File - FileInputStream": "",
	"Input - File - FileReader": "",

	"IOStreams": "SECTION",
	"IOStreams - ByteStreams": "",
	"IOStreams - ByteStreams - FileInputStream": "",
	"IOStreams - ByteStreams - FileOutputStream": "",
	"IOStreams - CharacterStreams": "",
	"IOStreams - CharacterStreams - InputStreamReader": "",
	"IOStreams - CharacterStreams - OutputStreamWriter": "",
	"IOStreams - CharacterStreams - FileReader": "",
	"IOStreams - CharacterStreams - FileWriter": "",
	"IOStreams - CharacterStreams - BufferedInputStream": "",
	"IOStreams - CharacterStreams - BufferedOutputStream": "",
	"IOStreams - Scanner": "",
	"IOStreams - BufferedStreams - BufferedReader": "",
	"IOStreams - BufferedStreams - BufferedWriter": "",
	"IOStreams - DataStreams - DataInputStream": "",
	"IOStreams - DataStreams - DataOutputStream": "",
	"IOStreams - ObjectStreams - ObjectInputStream": "",
	"IOStreams - ObjectStreams - ObjectOutputStream": "",
	"IOStreams - ": "",
	"IOStreams - PrintStream": "",
	"IOStreams - PrintWriter": "",

	"JavaIO": "SECTION",
	"JavaIO - NVM": "Non-volatile mapped byte buffers are a Java NIO feature that allows direct memory mapping of non-volatile memory (NVM) devices, providing persistent memory capabilities to Java applications.",
	"JavaIO - NVM - Create": "MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);",

	"JavaNIO": "SECTION",
	"JavaNIO 1": "",
	"JavaNIO 2 - Java7": "",

	"InternetAddressResolutionSPI": "SECTION",
	"InternetAddressResolutionSPI - Java18": "In Java 18, a new Service Provider Interface (SPI) was introduced for customizable hostname and IP address resolution via JEP 418. This enhancement allows developers to replace the default DNS resolver with their own implementation, enabling better control over how Java applications resolve internet addresses.",

	"DatagramSocketAPI": "SECTION",
	"DatagramSocketAPI ": "The DatagramSocket API is part of Java's original (pre-NIO) networking package (java.net) and provides a connectionless, unreliable mechanism for sending and receiving UDP (User Datagram Protocol) packets. Unlike TCP, UDP does not guarantee delivery, ordering, or duplicate protection, making it suitable for low-latency applications like video streaming, gaming, and DNS lookups.",
	"DatagramSocketAPI - Components - DatagramSocket": "The main class for sending/receiving UDP packets. Binds to a local port for communication.",
	"DatagramSocketAPI - Components - DatagramPacket": "Represents a single UDP packet (data + destination address/port).",
	"DatagramSocketAPI - Components - InetAddress": "Represents an IP address (used in DatagramPacket).",

	"HTTP clients": "SECTION",
	"HTTP/2 Client (Java 9)": "So for Java 9, a new API has been introduced that is cleaner and clearer to use and that also adds support for HTTP/2. The new API handles HTTP connections through three classes. (1) HttpClient handles the creation and sending of requests. (2) HttpRequest is used to construct a request to be sent via the HttpClient. (3) HttpResponse holds the response from the request that has been sent. java.net has introduced the HttpClient class as well as HttpRequest and HttpResponse",
	"HTTP/2 Client - HttpClient": "",
	"HTTP/2 Client - HttpRequest": "",
	"HTTP/2 Client - HttpResponse": "",
	"HTTP/2 Client - example - sync)": "HttpResponse < String > httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandler.asString()),",
	"HTTP/2 Client - example - async)": "CompletableFuture > httpResponse = httpClient.sendAsync(httpRequest, HttpResponse.BodyHandler.asString()),",

	"BasicHTTPServer": "SECTION",
	"BasicHTTPServer - Java18": "Java 18 includes an easy-to-use built-in HTTP server (via jdk.httpserver) that lets you quickly spin up a lightweight web server without external dependencies like Spring Boot or Tomcat.",

	"Security - KeyEncapsulationMechanismAPI": "SECTION",
	"Security - KeyEncapsulationMechanismAPI - Java21": "The Key Encapsulation Mechanism (KEM) API is a new cryptographic feature introduced in Java 21 as part of Java's ongoing post-quantum cryptography preparations. This API provides a standardized way to implement KEM algorithms, which are essential for quantum-resistant cryptography."

}