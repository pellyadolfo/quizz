{

	"Streams": "SECTION",
	"Streams 0": "https://www.linkedin.com/posts/dasari-saikiran-979592135_lamda-activity-7346189403570020355-CfdK/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Streams 1": "",
	"Streams 2": "",
	"Streams 3": "",

	"int": "SECTION",
	"int - int[] - Create - fromItems - new": "new int[] {1,2,3}",
	"int - List< int[] > - Create - fromInt[] - Arrays.asList(...)": "Arrays.asList(...)",
	"int - Stream< int[] > - Create - fromList< int[] > -> stream": ".stream()",
	"int - Stream< int[] > - Convert - toInt[][] - toArray": ".toArray()",
	"int - IntStream - Create - fromBoundaries - range": "IntStream.range(1, 3)",
	"int - IntStream - Create - fromBoundaries - rangeClosed": "IntStream.rangeClosed(1, 3)",
	"int - IntStream - Create - fromItems - builder": "IntStream.builder().add('1').add('2').build()",
	"int - IntStream - Create - fromString - chars()": "IntStream intStream = 'String'.chars(), - chars() inherited from CharSequence",
	"int - IntStream - Create - fromString - codePoints()": "IntStream intStream = 'String'.codePoints(), - codePoints() inherited from CharSequence",
	"int - IntStream - Create - fromInt[] - of": "Stream.of",
	"int - IntStream - Create - fromInt[] - of2": "IntStream.of(1,2,3)",
	"int - IntStream - Create - fromInt[] - ofNullable - Java9": "Stream.ofNullable (Java 9)",
	"int - IntStream - Create - fromInt[] - stream": "Arrays.stream(...)",
	"int - IntStream - Create - fromStream< Integer > - mapToInt": ".mapToInt(Integer:valueOf)",
	"int - IntStream - Convert - toStream< Integer > - mapToObj": "mapToObj(i->i)",
	"int - IntStream - Convert - toStream< Integer > - boxed": ".boxed()",
	"int - IntStream - Convert - toInt[]": ".toArray()",

	"Integer": "SECTION",
	"Integer - Integer[] - Create - fromItems - new": "new Integer[] {1,2,3}",
	"Integer - Integer[] - Create - fromList< Integer > - toArray": ".toArray(new Integer(result.size()))",
	"Integer - List< Integer > - Create - fromItems - {}": "{1,2,3}",
	"Integer - List< Integer > - Create - fromInteger[] - Arrays.asList(...)": "Arrays.asList(...)",
	"Integer - List< Integer > - Create - fromStream< Integer > - collect": ".collect(Collectors.toList()",
	"Integer - Stream< Integer > - Create - fromItems - builder": "Stream.< String >Builder().add('1').add('2').build()",
	"Integer - Stream< Integer > - Create - fromItems -> iterate": "Stream.iterate(40, n->n+2).limit(20)",
	"Integer - Stream< Integer > - Create - fromItems -> Stream.of": "Stream.of(1,2,3)",
	"Integer - Stream< Integer > - Create - fromNumber -> iterate": "Stream.iterate(40, n->n+2).limit(20)",
	"Integer - Stream< Integer > - Create - fromNumber -> iterate - Stream.iterate( T seed, UnaryOperator< T > f)": "The iterate() method takes two arguments: a seed and a function. A seed is the first element of the stream. The second element is generated by applying the function to the first element. The third element is generated by applying the function on the second element. Therefore the elements are: seed, f(seed), f(f(seed)), f(f(f(seed))).... The following code creates a stream of natural numbers: Stream<Long> naturalNumbers = Stream.iterate(1L, n -> n + 1), The limit(long maxSize) operation is an intermediate operation that produces another stream.",
	"Integer - Stream< Integer > - Create - fromNumber -> iterate - Stream.iterate( T seed, Predicate< ? super T> hasNext, UnaryOperator<T> next) (Java 9)": "Returns a sequential ordered Stream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate.",
	"Integer - Stream< Integer > - Create - fromNumber -> generate": "Stream.generate(() -> 'element').limit(10)",
	"Integer - Stream< Integer > - Create - fromInteger[] - of": "Stream.of(...)",
	"Integer - Stream< Integer > - Create - fromList< Integer > - stream": ".stream()",

	"String": "SECTION",
	"String - create - fromStringBuilder - StringBuilder.reverse()": "reverses string",
	"String - create - fromStringBuilder - StringBuilder.append()": "StringBuilder stringBuilder = new StringBuilder(), for (int i = 0, i < strArray.length, i++) { stringBuilder.append(strArray[i]), }",
	"String - create - fromString[] - Arrays.toString(...)": "Arrays.toString(strArray),",
	"String - create - fromString[] - String.join()": "String joinedString = String.join(' ', strArray),",
	"String - create - Stream< String > - Collectors.joining()": "String joinedString = Arrays.stream(strArray).collect(Collectors.joining()),",
	"String - Stream< String > - Create - String - example3 String -> Stream<Character>": "Stream<Character> characterStream = testString.chars().mapToObj(c -> (char) c),",
	"String - Stream< String > - Create - String - example4 String[] parts ='10,20'.split(','),": "Splits this string around matches of the given regular expression. Use Arrays.stream() after to get Stream<String>",
	"String - Stream< String > - Create - Stream< String > - example5 Stream< String > message = Pattern.compile(',').splitAsStream('one,two,three')": "Splits this string around matches of the given regular expression.",
	"String - Stream< String > - Create - with String.split(...)": "Stream.of(inputString.split('\n'))",
	"String - Stream< String > - Create - fromStream< Integer >": ".mapToObj(Integer::toString)",
	"String - Stream< String > - Create - fromStream < Integer > - Pattern.splitAsStream(...)": "Pattern.compile(System.lineSeparator(), Pattern.LITERAL).splitAsStream(str)",
	"String - Stream< String > - Convert - toString": ".collect(Collectors.joining(', ')),",
	"String - Stream< String > - Convert - toStream< Integer >": ".map(n -> n.toString())",
	"String - Stream.of (...) implementation": "It is worth noting that Stream.of(...) method simply calls the Arrays.stream(...) method for non-primitive types",

	"Pipeline": "SECTION",
	"Pipeline - parallellStream": "parallelStream leverages multi-threading for faster processing on large datasets.",
	"Pipeline - peek": "Stream.peek(Consumer< ? super T > action) - to same type stream. Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element",
	"Pipeline - peek - example": "Debugging: .peek(e -> System.out.println('Mapped value: ' + e))",
	"Pipeline - sort - sorted()": "To same type stream. Returns a stream consisting of the elements of this stream, sorted according to natural order..",
	"Pipeline - sort - sorted(Comparator)": "To same type stream. Returns a stream consisting of the elements of this stream, sorted according to the provided Comparator.",
	"Pipeline - sort - sorted(Comparator) - example1": ".sorted((o1, o2) -> o1.getItem().getValue().compareTo(o2.getItem().getValue()))",
	"Pipeline - sort - sorted(Comparator) - example2": ".sorted(Comparator.reverseOrder())",
	"Pipeline - limit - limit": "to same type stream. Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length.",
	"Pipeline - skip - skip": "to same type stream. Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream.",
	"Pipeline - filter - filter": "to same type stream. Returns a stream consisting of the elements of this stream that match the given predicate.",
	"Pipeline - filter - filter - example": ".filter(text -> !'A'.equals(text))",
	"Pipeline - distinct - distinct()": "to same type stream. Returns a stream consisting of the distinct elements (according to Object.equals(Object)) of this stream.",
	"Pipeline - concat - concat": "to same type stream. Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream.",
	"Pipeline - concat - concat example": ".concat(stream1, stream2)",

	"Transform": "SECTION",
	"Transform - map": "to other type stream. Returns a stream consisting of the results of applying the given function to the elements of this stream.",
	"Transform - map - example - lambda": ".map(t -> t.toUpperCase())",
	"Transform - map - example - method reference": ".map(String::toUpperCase)",
	"Transform - mapToInt - mapToInt": "to other type stream. Returns a IntStream consisting of the results of applying the given function to the elements of this stream.",
	"Transform - mapToInt - mapToInt - example - method reference": ".mapToInt(num -> Integer.parseInt(num))",
	"Transform - mapToLong - mapToLong": "to other type stream. Returns a LongStream consisting of the results of applying the given function to the elements of this stream.",
	"Transform - mapToDouble - mapToDouble": "to other type stream. Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream.",
	"Transform - flatMap - flatMap": "to other type stream. Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.",
	"Transform - flatMapToInt - flatMapToInt": "to other type stream. Returns a IntStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.",
	"Transform - flatMapToLong - flatMapToLong": "to other type stream. Returns a LongStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.",
	"Transform - flatMapToDouble - flatMapToDouble": "to other type stream. Returns a DoubleStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.",

	"Iteration": "SECTION",
	"Iteration - forEach - forEach": "forEach() is a terminal operation, which means once calling forEach() method on stream, you cannot call another method. It will result in a runtime exception.",
	"Iteration - forEach - forEach - order": "When you call forEach() on parallel stream, the order of iteration is not guaranteed, but you can ensure that ordering by calling forEachOrdered() method.",
	"Iteration - forEach - list.forEach": "list.forEach(a -> a.stuff()) vs list.stream().forEach(a -> a.stuff()) - Iterable.forEach guarantees processing in iteration order, if it is defined for the Iterable. Stream.forEach does not, one must use Stream.forEachOrdered instead.",
	"Iteration - forEachOrdered": "Stream.of('AAA','BBB','CCC').parallel().forEachOrdered(s->System.out.println('Output:'+s)) will always output Output:AAA Output:BBB Output:CCC whereas forEach the order is not kept.",

	"Reduction": "SECTION",
	"Reduction - toCollection - resume reduction": "(1) Collectors.toMap(key, value, merge for duplicates, supplier mapFactory) -> map <br/> (2) Collectors.mapping(mapping, downstream) -> what downstrean defines <br/> (3) Collectors.groupingBy(key, mapFactory, downstream) -> map <br/> (4) Collectors.partitioningBy(partition predicate for true/false, downstream) -> map <br/> (5) .collect(supplier container, accumulator, parallel combiner) -> supplier container <br/> (6) .reduce(identity, accumulator, parallel combiner) -> object <br/> (7) Collectors.reducing(identity, accumulator, parallel combiner) -> object ",
	"Reduction - toCollection - Stream - toArray()": "reduction to Collection. reduction to Array",
	"Reduction - toCollection - Collector": "interface Collector<T,A,R> { <br/>Supplier< A > supplier(), <br/>BiConsumer< A,T > acumulator(), <br/>BinaryOperator< A > combiner(), <br/>Function< A,R > finisher(), <br/>Set< Characteristics > characteristics() <br/>} supplier() returns a function that creates an instance of accumulator - mutable data structure that we will use to accumulate input elements of type T.<br/> accumulator() returns a function that will take accumulator and one item of type T, mutating accumulator. <br/>combiner() is used to join two accumulators together into one. It is used when collector is executed in parallel, splitting input Stream<T> and collecting parts independently first.<br/> finisher() takes an accumulator A and turns it into a result value, e.g. collection, of type R.",
	"Reduction - toCollection - Collector - collect": "collect(Supplier<R> supplier, BiConsumer<R,? super T> accumulator, BiConsumer<R,R> combiner) - reduction to custom .collect(SAC)",
	"Reduction - toCollection - Collector - collect - example - List< String >": "getStringStream().collect(() -> new ArrayList<>(), (c, s) -> c.add(s.toUpperCase()), (c1, c2) -> c1.addAll(c2))",
	"Reduction - toCollection - Collector - collect - example - StringBuilder": "getStringStream().collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)",
	"Reduction - toCollection - Collector - collect - example - List< Integer > - lambda function": "getIntStream().collect(() -> new ArrayList<>(), (l, i) -> l.add(i), (l1, l2) -> l1.addAll(l2))",
	"Reduction - toCollection - Collector - collect - example - List< Integer > - method references": "getIntStream().collect(ArrayList::new, ArrayList::add, ArrayList::addAll)",
	"Reduction - toCollection - Collector - collect - Collector.of": "Build custom collectors for advanced aggregations that Collectors doesn’t cover.",
	"Reduction - toCollection - Collector - collect - Collectors - toSet()": "reduction to Set",
	"Reduction - toCollection - Collector - collect - Collectors - toList()": "reduction to List",
	"Reduction - toCollection - Collector - collect - Collectors - toMap(key, value, merge if duplicates, supplier container)": "",
	"Reduction - toCollection - Collector - collect - Collectors - toMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper)": "reduction to Map",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.toMap(2args) - Collectors.toMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper) with lambda function and function identity": "Collectors.toMap(p -> p.getLast(), Function.identity())",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.toMap(2args) - Collectors.toMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper) with method reference and function identity": "Collectors.toMap(Person::getLast, Function.identity())",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.toMap(2args) - Collectors.toMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper) with method reference and lambda": "Collectors.toMap(Person::getLast, p -> p)",
	"Reduction - toCollection - Collector - collect - Collectors - toMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction)": "reduction to Map. Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to Object.equals(Object)), the value mapping function is applied to each equal element, and the results are merged using the provided merging function.",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.toMap(3args, merge function) - Collectors.toMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction) with merge function": "toMap(Person::getName, Person::getAddress, <b>(s, a) -> s + ', ' + a)</b>",
	"Reduction - toCollection - Collector - collect - Collectors - toMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapSupplier)": "reduction to Map",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.toMap(4args, merge function) - Collectors.toMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapSupplier) with merge function": "toMap(Person::getName, Person::getAddress, (s, a) -> s + ', ' + a, TreeMap::new)",
	"Reduction - toCollection - Collector - collect - Collectors - toConcurrentMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper)": "reduction to Map. Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to Object.equals(Object)), an IllegalStateException is thrown when the collection operation is performed. If the mapped keys may have duplicates, use toConcurrentMap(Function, Function, BinaryOperator) instead.",
	"Reduction - toCollection - Collector - collect - Collectors - toConcurrentMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction)": "reduction to Map. Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to Object.equals(Object)), the value mapping function is applied to each equal element, and the results are merged using the provided merging function.",
	"Reduction - toCollection - Collector - collect - Collectors - toConcurrentMap(Function< ? super T,? extends K> keyMapper, Function< ? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapSupplier)": "reduction to Map. Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to Object.equals(Object)), the value mapping function is applied to each equal element, and the results are merged using the provided merging function. The ConcurrentMap is created by a provided supplier function. This is a concurrent and unordered Collector.",
	"Reduction - toCollection - Collector - collect - Collectors - toUnmodifiableList() (Java 10)": "Returns a Collector that accumulates the input elements into an unmodifiable List in encounter order. Provide users with 'read-only' access to internal lists. Attempts to modify the returned list, whether direct or via its iterator, result in an UnsupportedOperationException.",
	"Reduction - toCollection - Collector - collect - Collectors - toUnmodifiableSet() (Java 10)": "Returns a Collector that accumulates the input elements into an unmodifiable Set. Provide users with 'read-only' access to internal set. Attempts to modify the returned set, whether direct or via its iterator, result in an UnsupportedOperationException.",
	"Reduction - toCollection - Collector - collect - Collectors - toUnmodifiableMap(Function< ? super T, ? extends K > keyMapper, Function< ? super T, ? extends U > valueMapper) (Java 10)": "Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements. Provide users with 'read-only' access to internal map. Attempts to modify the returned map, whether direct or via its iterator, result in an UnsupportedOperationException.",
	"Reduction - toCollection - Collector - collect - Collectors - toUnmodifiableMap(Function< ? super T, ? extends K > keyMapper, Function< ? super T, ? extends U > valueMapper, BinaryOperator< U > mergeFunction) (Java 10)": "Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements. Provide users with 'read-only' access to internal set. Attempts to modify the returned set, whether direct or via its iterator, result in an UnsupportedOperationException.",
	"Reduction - toCollection - Collector - collect - Collectors - groupingBy(Function< ? super T,? extends K> classifier)": "reduction to Map. Returns a Collector implementing a 'group by' operation on input elements of type T, grouping elements according to a classification function, and returning the results in a Map.",
	"Reduction - toCollection - Collector - collect - Collectors - groupingBy(Function< ? super T,? extends K > classifier)": "Map< BlogPostType, List<BlogPost > > postsPerType = posts.stream().collect(Collectors.groupingBy(BlogPost::getType)),",
	"Reduction - toCollection - Collector - collect - Collectors - groupingBy(Function< ? super T,? extends K> classifier, Collector< ? super T,A,D> downstream)": "reduction to Map. Returns a Collector implementing a cascaded 'group by' operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector.",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.groupingBy(Function< ? super T,? extends K> classifier, Collector< ? super T,A,D> downstream) - Modifying the Returned Map Value Type": "Map< BlogPostType, Set<BlogPost>> postsPerType = posts.stream().collect(Collectors.groupingBy(BlogPost::getType, Collector.toSet())),",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.groupingBy(Function< ? super T,? extends K> classifier, Collector< ? super T,A,D> downstream) - Providing a Secondary Group By Collector": "Map< String, Map< BlogPostType, List>> map = posts.stream().collect(Collectors.groupingBy(BlogPost::getAuthor, Collectors.groupingBy(BlogPost::getType))),",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.groupingBy(Function< ? super T,? extends K> classifier, Collector< ? super T,A,D> downstream) - Getting the Average from Grouped Results": "Map< BlogPostType, Double> averageLikesPerType = posts.stream().collect(Collectors.groupingBy(BlogPost::getType, Collectors.averagingInt(BlogPost::getLikes))),",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.groupingBy(Function< ? super T,? extends K> classifier, Collector< ? super T,A,D> downstream) - Getting the Sum from Grouped Results": "Map< BlogPostType, Integer > likesPerType = posts.stream().collect(Collectors.groupingBy(BlogPost::getType, Collectors.summingInt(BlogPost::getLikes))),",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.groupingBy(Function< ? super T,? extends K> classifier, Collector< ? super T,A,D> downstream) - Getting the Maximum or Minimum from Grouped Results": "Map< BlogPostType, Optional<BlogPost>> maxLikesPerPostType = posts.stream().collect(Collectors.groupingBy(BlogPost::getType, Collectors.maxBy(comparingInt(BlogPost::getLikes)))),",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.groupingBy(Function< ? super T,? extends K> classifier, Collector< ? super T,A,D> downstream) - Getting a Summary for an Attribute of Grouped Results": "Map< BlogPostType, IntSummaryStatistics > likeStatisticsPerType = posts.stream().collect(Collectors.groupingBy(BlogPost::getType, Collectors.summarizingInt(BlogPost::getLikes))),",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.groupingBy(Function< ? super T,? extends K> classifier, Collector< ? super T,A,D> downstream) - Mapping Grouped Results to a Different Type": "Map< BlogPostType, String> postsPerType = posts.stream().collect(Collectors.groupingBy(BlogPost::getType, Collectors.mapping(BlogPost::getTitle, Collectors.joining(', '', 'Post titles: [', ']')))),",
	"Reduction - toCollection - Collector - collect - Collectors - Collectors.groupingBy(Function< ? super T,? extends K> classifier, Supplier<M> mapFactory, Collector< ? super T,A,D> downstream)": "reduction to Map",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.groupingBy(Function< ? super T,? extends K > classifier, Supplier< M > mapFactory, Collector< ? super T,A,D > downstream) - Modifying the Return Map Type": "EnumMap< BlogPostType, List<BlogPost>> postsPerType = posts.stream().collect(groupingBy(BlogPost::getType, () -> new EnumMap< >(BlogPostType.class), toList())),",
	"Reduction - toCollection - Collector - collect - Collectors - Collectors.groupingByConcurrent(Function< ? super T,? extends K > classifier)": "reduction to Map",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.groupingByConcurrent(Function< ? super T,? extends K> classifier)": "ConcurrentMap< BlogPostType, List<BlogPost>> postsPerType = posts.parallelStream().collect(groupingByConcurrent(BlogPost::getType)),",
	"Reduction - toCollection - Collector - collect - Collectors - Collectors.groupingByConcurrent(Function< ? super T,? extends K> classifier, Collector< ? super T,A,D> downstream)": "reduction to Map",
	"Reduction - toCollection - Collector - collect - Collectors - Collectors.groupingByConcurrent(Function< ? super T,? extends K> classifier, Supplier<M> mapFactory, Collector< ? super T,A,D> downstream)": "reduction to Map",
	"Reduction - toCollection - Collector - collect - Collectors - Collectors.partitioningBy(Predicate< ? super T> predicate)": "reduction to Map. Returns a Collector which partitions the input elements according to a Predicate, and organizes them into a Map< Boolean, List<T>>.",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.partitioningBy(Predicate< ? super T> predicate)": "Collectors.partitioningBy(s -> s.getAge() > 20)",
	"Reduction - toCollection - Collector - collect - Collectors - Collectors.partitioningBy(Predicate< ? super T> predicate, Collector< ? super T,A,D> downstream)": "reduction to Map. Returns a Collector which partitions the input elements according to a Predicate, reduces the values in each partition according to another Collector, and organizes them into a Map< Boolean, D> whose values are the result of the downstream reduction.",
	"Reduction - toCollection - Collector - collect - Collectors - example Collectors.partitioningBy(Predicate< ? super T> predicate, Collector< ? super T,A,D> downstream)": "Collectors.partitioningBy(x -> Character.isUpperCase(x.charAt(0)), Collectors.counting())",
	"Reduction - toCollection - Collector - collect - Collectors - Collector<T,?,C> toCollection(Supplier<C> collectionFactory)": "reduction to Collection. Returns a Collector that accumulates the input elements into a new Collection, in encounter order. The Collection is created by the provided factory.",
	"Reduction - toCollection - Collector - collect - Collectors - example Collector<T,?,C> toCollection(Supplier<C> collectionFactory)": "Collectors.toCollection(LinkedList::new)",
	"Reduction - toValue - Stream - count()": "reduction to long/Long",
	"Reduction - toValue - Stream - min(Comparator)": "reduction to Optional",
	"Reduction - toValue - Stream - max(Comparator)": "reduction to Optional",
	"Reduction - toValue - Stream - reduce(accumulator)": "reduction to Optional",
	"Reduction - toValue - Stream - Optional<String>": "stringStream.reduce((x, y) -> x + y)",
	"Reduction - toValue - Stream - OptionalInt": "intStream.reduce((x, y) -> x + y),",
	"Reduction - toValue - Stream - reduce": "reduction to Custom",
	"Reduction - toValue - Stream - reduce - String": "stringStream.reduce('pp', (x, y) -> x + y)",
	"Reduction - toValue - Stream - reduce - int": "intStream.reduce(5, (x, y) -> x + y)",
	"Reduction - toValue - Stream - reduce ": "reduction to Custom",
	"Reduction - toValue - Stream - reduce - int - parallel": "intStream.reduce(0, (x, y) -> x + y.length(), (x, y) -> x + y)",
	"Reduction - toValue - Stream - allMatch": "reduction to boolean",
	"Reduction - toValue - Stream - allMatch - example": ".allMatch(e -> e.sal < 10000)",
	"Reduction - toValue - Stream - anyMatch": "reduction to boolean",
	"Reduction - toValue - Stream - noneMatch": "reduction to boolean",
	"Reduction - toValue - Stream - findAny()": "reduction to item",
	"Reduction - toValue - Stream - findFirst()": "reduction to item",
	"Reduction - toValue - Collectors - counting()": "reduction to long/Long",
	"Reduction - toValue - Collectors - minBy": "reduction to Optional",
	"Reduction - toValue - Collectors - maxBy": "reduction to Optional",
	"Reduction - toValue - Collectors - reduce": "reduction to Optional",
	"Reduction - toValue - Collectors - reduce - Optional< String >": "stringStream.reduce((x, y) -> x + y)",
	"Reduction - toValue - Collectors - reduce - OptionalInt": "intStream.reduce((x, y) -> x + y),",
	"Reduction - toValue - Collectors - reduce - reducing": "reduction to Custom",
	"Reduction - toValue - Collectors - reduce - String": "stringStream.reduce('pp', (x, y) -> x + y)",
	"Reduction - toValue - Collectors - reduce - int": "intStream.reduce(5, (x, y) -> x + y)",
	"Reduction - toValue - Collectors - reducing": "reduction to Custom",
	"Reduction - toValue - Collectors - reduce - int - parallel": "intStream.reduce(0, (x, y) -> x + y.length(), (x, y) -> x + y)",
	"Reduction - toValue - Collectors - joining()": "reduction to String",
	"Reduction - toValue - Collectors - joining(CharSequence delimiter)": "reduction to String",
	"Reduction - toValue - Collectors - joining(CharSequence delimiter) - example": "Collectors.joining(',')",
	"Reduction - toValue - Collectors - joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)": "reduction to String",
	"Reduction - toValue - Collectors - joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix) - example": "Collectors.joining(',', ''', ''')",
	"Reduction - toValue - Collectors - averageInt": "reduction to Double",
	"Reduction - toValue - Collectors - averageInt - example": "Collectors.averagingInt(Article::getWordCount)",
	"Reduction - toValue - Collectors - averageLong": "reduction to Double",
	"Reduction - toValue - Collectors - averageDouble": "reduction to Double",
	"Reduction - toValue - Collectors - summingInt": "reduction to Integer",
	"Reduction - toValue - Collectors - summingLong": "reduction to Long",
	"Reduction - toValue - Collectors - summingDouble": "reduction to Double",
	"Reduction - Optional is returned by": ".findFirst, .findAny, .min/Collectors.minBy, .max/Collectors.maxBy and .reduce/Collectors.reducing without identity",
	"Reduction - Gatherers - Java22": "Stream Gatherers provide a mechanism to create custom intermediate operations in streams, similar to how Collector enables custom terminal operations. avoids creating intermediate collections",
	"Reduction - Gatherers - windowFixed": "windowFixed(int size): Groups elements into fixed-size, non-overlapping batches.",
	"Reduction - Gatherers - windowSliding": "windowSliding(int size): Creates overlapping groups (sliding windows) of elements.",
	"Reduction - Gatherers - fold": "fold(Supplier<R> initial, BiFunction<R,T,R> folder): Accumulates elements into a single result, similar to reduce but more flexible.",
	"Reduction - Gatherers - scan": "scan(Supplier<R> initial, BiFunction<R,T,R> scanner): Emits intermediate accumulation results, useful for tracking progress.",
	"Reduction - Gatherers - mapConcurrent": "mapConcurrent(int maxConcurrency, Function<T,R> mapper): Applies a mapping function concurrently, leveraging virtual threads.",
	
	"Statistics": "SECTION",
	"Statistics - Collectors.summarizingDouble(ToDoubleFunction< ? super T> mapper)": "applies an double-producing mapping function to each input element, and returns summary statistics for the resulting values",
	"Statistics - Collectors.summarizingInt(ToIntFunction< ? super T> mapper)": "applies an int-producing mapping function to each input element, and returns summary statistics for the resulting values.",
	"Statistics - Collectors.summarizingLong(ToLongFunction< ? super T> mapper)": "applies an long-producing mapping function to each input element, and returns summary statistics for the resulting values.",

	"Additional": "SECTION",
	"Additional - Collectors - collectingAndThen": "Adapts a Collector to perform an additional finishing transformation.",
	"Additional - Collectors - mapping": "Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a mapping function to each input element before accumulation.",
	"Additional - Collectors - flatMapping - Java 9": "Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a flat mapping function to each input element before accumulation.",
	"Additional - Collectors - takeWhile​ - Java 9": "Let you stop processing based on a condition, saving time.",
	"Additional - Collectors - dropWhile​ - Java 9": "Let you stop processing based on a condition, saving time."

}