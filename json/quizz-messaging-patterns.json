{			

	"PointToPoint": "SECTION",
	"PointToPoint - RequestResponse": "",
	"PointToPoint - RequestResponse - HTTP": "",
	"PointToPoint - RequestResponse - HTTP - SOAP": "",
	"PointToPoint - RequestResponse - HTTP - MQTT": "",
	"PointToPoint - RequestResponse - HTTP - XMPP": "",
	"PointToPoint - RequestResponse - HTTP - XMPP - Products - Jabber": "",
	"PointToPoint - RequestResponse - AMQP": "",
	"PointToPoint - RequestResponse - ZeroMQ": "",
	"PointToPoint - RealTime - Sockets": "",
	"PointToPoint - RealTime - WebSockets": "",
	"PointToPoint - RealTime - WebSockets - Products - Socket.io": "",
	"PointToPoint - RealTime - WebSockets - STOMP": "",
	"PointToPoint - RealTime - WebSockets - WAMP": "",
	"PointToPoint - RealTime - WebSockets - Channels (Pusher)": "",

	"Messaging": "SECTION",
	"Messaging - EDA": "Event Driven Architecture",
	"Messaging - EDA - Problems": "https://itnext.io/resolving-common-issues-in-event-driven-architecture-a3afe8f3ef7b",
	"Messaging - EDA - Problems - Event Loss": "",
	"Messaging - EDA - Problems - Event Duplication": "",
	"Messaging - EDA - Problems - Event Ordering Issues": "",
	"Messaging - EDA - Problems - Performance Issues": "",
	"Messaging - EDA - Problems - Fault Tolerance": "",
	"Messaging - Broker - Goal": "Decoupling 2 applications and allowing parallel asynchronous processing.",
	"Messaging - Broker - Features - Model - push/pull": "",
	"Messaging - Broker - Features - Multiplicity - Multiple vs Single Consumers": "",
	"Messaging - Broker - Features - Multiplicity - Multiple vs Single Delivery": "",
	"Messaging - Broker - Features - Reliability - Guaranteed": "This guarantee does come with a heavy performance price because the broker must securely persist the message in its message store prior to acknowledging the message to the producer.",
	"Messaging - Broker - Features - Reliability - Dead Letter Queue": "",
	"Messaging - Broker - Features - Persistence": "Messages are persisted for some (configurable) duration is no consumer available.",
	"Messaging - Broker - Features - Persistence - Message Copies": "",
	"Messaging - Broker - Features - Order": "",
	"Messaging - Broker - QoS - QoS 0": "QoS 0: At most once delivery",
	"Messaging - Broker - QoS - QoS 1": "QoS 1: At least once delivery",
	"Messaging - Broker - QoS - QoS 2": "QoS 2: Exactly once delivery",
	"Messaging - Broker - Types - Pull": "Messages are NOT pushed to receivers. Receivers have to poll the broker to receive messages.",
	"Messaging - Broker - Types - Pull - Broker": "Queues",
	"Messaging - Broker - Types - Pull - Formats - JMS PTP": "",
	"Messaging - Broker - Types - Pull - Formats - AMQP": "",
	"Messaging - Broker - Types - Pull - Formats - ZeroMQ": "",
	"Messaging - Broker - Types - Pull - Formats - AWS SQS": "",
	"Messaging - Broker - Types - Pull - Formats - Custom": "",
	"Messaging - Broker - Types - Push": "Messages are pushed to subscribers as and when they are sent by publishers.",
	"Messaging - Broker - Types - Push - Broker": "Topics",
	"Messaging - Broker - Types - Push - Formats - JMS Format": "",
	"Messaging - Broker - Types - Push - Formats - AMQP": "",
	"Messaging - Broker - Types - Push - Formats - MQTT": "",
	"Messaging - Broker - Types - Push - Formats - STOMP": "",
	"Messaging - Broker - Types - Push - Formats - WAMP": "",
	"Messaging - Broker - Types - Push - Formats - ZeroMQ": "",
	"Messaging - Broker - Types - Push - Formats - Custom": "",
	"Messaging - Brokers - Mosquito": "",
	"Messaging - Brokers - Pushy": "",
	"Messaging - Brokers - VerneMQ": "",
	"Messaging - Brokers - IBM Bluemix": "",
	"Messaging - Brokers - IBM IoT MessageSight": "",
	"Messaging - Brokers - IBM WebSphere MQ Telemetry": "",
	"Messaging - Brokers - HiveMQ": "",
	"Messaging - Brokers - Azure IoT": "",
	"Messaging - Brokers - ThingMQ": "",
	"Messaging - Brokers - ThingStudio": "",
	"Messaging - Brokers - cloudMQTT": "",
	"Messaging - Brokers - Heroku CloudMQTT": "",
	"Messaging - Brokers - MachineHead": "",
	"Messaging - Brokers - RabbitMQ": "",
	"Messaging - Brokers - ActiveMQ": "",
	"Messaging - Brokers - Mercury": "This is a message broker that enables some common messaging patterns over WebSockets.",
	"Messaging - Brokers - JMS PTP": "",
	"Messaging - Brokers - ZeroMQ": "",
	"Messaging - Brokers - AWS SQS": "",
	"Messaging - Brokers - AWS SNS": "",
	"Messaging - Brokers - AWS Kinesis": "",
	"Messaging - Brokers - AWS AmazonMQ": "",
	"Messaging - Brokers - Kafka": "Apache Kafka is developed in Scala and started out at LinkedIn. Kafka only provides a total order over messages within a partition, not between different partitions in a topic.",
	"Messaging - Brokers - Microsoft Azure Event Hubs": "",
	"Messaging - Brokers - Google pub/sub": "",
	"Messaging - Brokers - Spark Streams": "",
	"Messaging - Datasync": "",
	"Messaging - Datasync - Products": "",
	"Messaging - Datasync - Products - Firebase": "",
	"Messaging - Datasync - Products - RethinkDB": "",
	"Messaging - Formats - JMS Format": "",
	"Messaging - Formats - AMQP": "",
	"Messaging - Formats - MQTT": "",
	"Messaging - Formats - STOMP": "",
	"Messaging - Formats - STOMP - Brokers - RabbitMQ": "",
	"Messaging - Formats - STOMP - Brokers - ActiveMQ": "",
	"Messaging - Formats - WAMP": "",
	"Messaging - Formats - Channels (Pusher)": "",
	"Messaging - Formats - ZeroMQ": "",
	"Messaging - Formats - Custom": ""
	
}