{

	"2. ChooseContainer": "SECTION",
  "2. ChooseContainer - docker": "SECTION",
  "2. ChooseContainer - docker - installing": "",
  "2. ChooseContainer - docker - start": "service docker start",
  "2. ChooseContainer - docker - stop": "service docker stop",
  "2. ChooseContainer - docker - build": "This method allows the users to build their own Docker images. docker build -t ImageName:TagName dir",
  "2. ChooseContainer - docker - run": "To run Jenkins and map the ports, you need to change the Docker run command and add the ‘p’ option which specifies the port mapping. So, you need to run the following command − sudo docker run -p 8080:8080 -p 50000:50000 jenkins",
  "2. ChooseContainer - docker - cloud": ".",
  "2. ChooseContainer - docker - integration - jenkins": "",
	"2. ChooseContainer - Docker": "Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers.",
	"2. ChooseContainer - Docker - language": "Docker is written in Go and takes advantage of several features of the Linux kernel to deliver its functionality.",
	"2. ChooseContainer - Docker - Containerization": "The use of Linux containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.",
	"2. ChooseContainer - Docker - Stack": "The top of the hierarchy of distributed applications: the stack. A stack is a group of interrelated services that share dependencies, and can be orchestrated and scaled together. A single stack is capable of defining and coordinating the functionality of an entire application (though very complex applications may want to use multiple stacks).",
	"2. ChooseContainer - Docker - Swarn": "A swarm is a group of machines that are running Docker and joined into a cluster. After that has happened, you continue to run the Docker commands you’re used to, but now they are executed on a cluster by a swarm manager. The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as nodes.",
	"2. ChooseContainer - Docker - Swarn - Composition": "A swarm is made up of multiple nodes, which can be either physical or virtual machines. ",
	"2. ChooseContainer - Docker - Swarn - Swarn Manager": "Swarm managers can use several strategies to run containers, such as “emptiest node” -- which fills the least utilized machines with containers. Or “global”, which ensures that each machine gets exactly one instance of the specified container. You instruct the swarm manager to use these strategies in the Compose file, just like the one you have already been using. Swarm managers are the only machines in a swarm that can execute your commands, or authorize other machines to join the swarm as workers. Workers are just there to provide capacity and do not have the authority to tell any other machine what it can and cannot do. Up until now, you have been using Docker in a single-host mode on your local machine. But Docker also can be switched into swarm mode, and that’s what enables the use of swarms. Enabling swarm mode instantly makes the current machine a swarm manager. From then on, Docker runs the commands you execute on the swarm you’re managing, rather than just on the current machine.",
	"2. ChooseContainer - Docker - Service": "Services are really just 'containers in production'. A service only runs one image, but it codifies the way that image runs—what ports it should use, how many replicas of the container should run so the service has the capacity it needs, and so on. Scaling a service changes the number of container instances running that piece of software, assigning more computing resources to the service in the process.",
	"2. ChooseContainer - Docker - Services": "Services allow you to scale containers across multiple Docker daemons, which all work together as a swarm with multiple managers and workers. Each member of a swarm is a Docker daemon, and the daemons all communicate using the Docker API. A service allows you to define the desired state, such as the number of replicas of the service that must be available at any given time. By default, the service is load-balanced across all worker nodes. To the consumer, the Docker service appears to be a single application. Docker Engine supports swarm mode in Docker 1.12 and higher.",

	"3. BuildContainerFile - Docker - DockerFile": "SECTION",
	"3. BuildContainerFile - Docker - DockerFile - description": "Docker builds images automatically by reading the instructions from a Dockerfile, a text file that contains all commands, in order, needed to build a given image.",
	"3. BuildContainerFile - Docker - DockerFile - instructions": "# Comment INSTRUCTION arguments",
	"3. BuildContainerFile - Docker - DockerFile - instructions - FROM": "A Dockerfile must start with a `FROM` instruction. The FROM instruction specifies the Base Image from which you are building. FROM may only be preceded by one or more ARG instructions, which declare arguments that are used in FROM lines in the Dockerfile.",
	"3. BuildContainerFile - Docker - DockerFile - instructions - RUN": "The RUN instruction will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile.",
	"3. BuildContainerFile - Docker - DockerFile - instructions - CMD": "There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect. The main purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, or they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well.",
	"3. BuildContainerFile - Docker - DockerFile - instructions - LABEL": "The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. To include spaces within a LABEL value, use quotes and backslashes as you would in command-line parsing.",
	"3. BuildContainerFile - Docker - DockerFile - instructions - MAINTAINER": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - EXPOSE": "informs Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if the protocol is not specified. This makes it possible for the host and the outside world to access the isolated Docker Container",
	"3. BuildContainerFile - Docker - DockerFile - instructions - ENV": "sets the environment variable <key> to the value <value>. This value will be in the environment for all subsequent instructions in the build stage and can be replaced inline in many as well.",
	"3. BuildContainerFile - Docker - DockerFile - instructions - ADD": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - COPY": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - ENTRYPOINT": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - VOLUME": "creates a mount point with the specified name and marks it as holding externally mounted volumes from the native host or other containers.",
	"3. BuildContainerFile - Docker - DockerFile - instructions - USER": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - WORKDIR": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - ARG": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - ONBUILD": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - STOPSIGNAL": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - HEALTHCHECK": "",
	"3. BuildContainerFile - Docker - DockerFile - instructions - SHELL": "",
	"3. BuildContainerFile - Docker - DockerFile - build": "Using 'docker build' users can create an automated build that executes several command-line instructions in succession. he docker build command builds an image from a Dockerfile and a context.",
	"3. BuildContainerFile - Docker - DockerFile - re build": "Each instruction in a Dockerfile creates a layer in the image. When you change the Dockerfile and rebuild the image, only those layers which have changed are rebuilt. This is part of what makes images so lightweight, small, and fast, when compared to other virtualization technologies.",
  "3. BuildContainerFile - docker - storage": "docker info ",
	"3. BuildContainerFile - Docker - DockerFile - Storage Drivers": "Storage drivers allow you to create data in the writable layer of your container. The files won’t be persisted after the container stops, and both read and write speeds are low.",
	"3. BuildContainerFile - Docker - DockerFile - Storage Drivers": "",
	"3. BuildContainerFile - Docker - DockerFile - Storage Drivers": "",
	"3. BuildContainerFile - docker - data volumes": "In Docker, you have a separate volume that can shared across containers. These are known as data volumes. Some of the features of data volume are − They are initialized when the container is created. They can be shared and also reused amongst many containers. Any changes to the volume itself can be made directly. They exist even after the container is deleted.",
  "3. BuildContainerFile - docker - data volumes - create": "A volume can be created beforehand using the docker command. Let’s learn more about this command. docker volume create –-name=volumename –-opt options",
  "3. BuildContainerFile - docker - data volumes - list": "You can also list all the docker volumes on a docker host. More details on this command is given below − docker volume ls",
  "3. BuildContainerFile - docker - networks": "Docker takes care of the networking aspects so that the containers can communicate with other containers and also with the Docker Host. If you do an ifconfig on the Docker Host, you will see the Docker Ethernet adapter. This adapter is created when Docker is installed on the Docker Host.",
  "3. BuildContainerFile - ocker - networks - list": "This command can be used to list all the networks associated with Docker on the host. docker network ls",
  "3. BuildContainerFile - docker - networks - inspect": "If you want to see more details on the network associated with Docker, you can use the Docker network inspect command. docker network inspect networkname",
  "3. BuildContainerFile - docker - networks - create": "One can create a network in Docker before launching containers. This can be done with the following command − docker network create –-driver drivername name",

	"4. RunContainerFile": "SECTION",
  "4. RunContainerFile - container": "SECTION",
  "4. RunContainerFile - container - list": "One can list all of the containers on the machine via the docker ps command. This command is used to return the currently running containers.",
  "4. RunContainerFile - container - processes": "With this command, you can see the top processes within a container. docker top ContainerID",
  "4. RunContainerFile - container - attach": "docker attach ContainerID",
  "4. RunContainerFile - container - run": "docker run –it centos /bin/bash",  
  "4. RunContainerFile - container - stats": "docker rm ContainerID",
  "4. RunContainerFile - container - pause": "docker pause ContainerID",
  "4. RunContainerFile - container - unpause": "docker unpause ContainerID",
  "4. RunContainerFile - container - stop": "docker stop ContainerID",
  "4. RunContainerFile - container - kill": "docker kill ContainerID",
  "4. RunContainerFile - container - delete": "docker rm ContainerID",
  "4. RunContainerFile - container - linking": "Container Linking allows multiple containers to link with each other. It is a better option than exposing ports.",
  "4. RunContainerFile - running": "SECTION",
  "4. RunContainerFile - running": "Running of containers is managed with the Docker run command. To run a container in an interactive mode, first launch the Docker container. sudo docker run –it centos /bin/bash",

	"5. BuildImage": "SECTION",
	"5. BuildImage - Docker - DockerImage ": "A docker image is actually a linked list of filesystem layers. Each instruction in a Dockerfile creates a filesystem layer that describes the differences in the filesystem before and after execution of the corresponding instruction.",
	"5. BuildImage - Docker - DockerImage": "An image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional customization. For example, you may build an image which is based on the ubuntu image, but installs the Apache web server and your application, as well as the configuration details needed to make your application run.",
	"5. BuildImage - Docker - DockerImage - creation": "You might create your own images or you might only use those created by others and published in a registry. To build your own image, you create a Dockerfile with a simple syntax for defining the steps needed to create the image and run it.",
	"5. BuildImage - Docker - DockerImage - Image Layers": "A Docker image consists of read-only layers each of which represents a Dockerfile instruction. Each layer represents an instruction in the image’s Dockerfile. The layers are stacked and each one is a delta of the changes from the previous layer.",
	"5. BuildImage - Docker - DockerImage - Image Layers - read only ": "Each layer except the very last one is read-only.",
	"5. BuildImage - Docker - DockerImage - Image Layers - Container Layer": "When you create a new container, you add a new writable layer on top of the underlying layers. This layer is often called the “container layer”. All changes made to the running container, such as writing new files, modifying existing files, and deleting files, are written to this thin writable container layer. ",
  "5. BuildImage - images - details": "This command is used see the details of an image or container. docker inspect Repository",
  "5. BuildImage - images - history": "With this command, you can see all the commands that were run with an image via a container. docker history ImageID",
  "5. BuildImage - images - dockerfile": "But Docker also gives you the capability to create your own Docker images, and it can be done with the help of Docker Files. A Docker File is a simple text file with instructions on how to build your images.",
  "5. BuildImage - images - dockerfile - FROM": "It tells docker, from which base image you want to base your image from.",
  "5. BuildImage - images - dockerfile - MAINTAINER": "person who is going to maintain this image.",
  "5. BuildImage - images - dockerfile - RUN": "The RUN command is used to run instructions against the image.",
  "5. BuildImage - images - dockerfile - CMD": "This command is used to execute a command at runtime when the container is executed. CMD command param1. CMD command param1",
  "5. BuildImage - images - dockerfile - ENTRYPOINT": "ENTRYPOINT command param1",
  "5. BuildImage - images - dockerfile - ENV": "This command is used to set environment variables in the container. ENV key value",
  "5. BuildImage - images - dockerfile - WORKDIR": "This command is used to set the working directory of the container. WORKDIR dirname",

	"6. AddImageToRegistry": "SECTION",
  "6. AddImageToRegistry - images - registry": "In Docker, everything is based on Images. An image is a combination of a file system and parameters..",
  "6. AddImageToRegistry - images - registry - download": "Images can be downloaded from Docker Hub using the Docker run command. docker run image",
  "6. AddImageToRegistry - images - registry - remove": "The Docker images on the system can be removed via the docker rmi command. Let’s look at this command in more detail. docker rmi",
  "6. AddImageToRegistry - images - registry - public repos": "Public repositories can be used to host Docker images which can be used by everyone else.",
  "6. AddImageToRegistry - images - registry - public repos - push": "This method allows one to push images to the Docker Hub. docker push Repositoryname",
  "6. AddImageToRegistry - images - registry - public repos - tag": "This method allows one to tag an image to the relevant repository. docker tag imageID Repositoryname",
	"6. AddImageToRegistry - Docker - Docker registries": "A Docker registry stores Docker images. A registry is a storage and content delivery system, holding named Docker images, available in different tagged versions.",
	"6. AddImageToRegistry - Docker - Docker registries - Docker Cloud": ".",
	"6. AddImageToRegistry - Docker - Docker registries - Docker Hub": "Docker Hub is a public registry managed by Docker, Inc. It centralizes information about organizations, user accounts, and images. It includes a web UI, authentication and authorization using organizations, CLI and API access using commands such as docker login, docker pull, and docker push, comments, stars, search, and more. Docker is configured to look for images on Docker Hub by default.",
	"6. AddImageToRegistry - Docker - Docker registries - DTR": "If you use Docker Datacenter (DDC), it includes Docker Trusted Registry (DTR).",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - install": "",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - join": "",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - reconfigure": "",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - remove": "",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - destroy": "",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - restore": "",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - backup": "",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - upgrade": "",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - images": "",
	"6. AddImageToRegistry - Docker - Docker registries - DTR - DTR CLI - emergency-repair": "",
	"6. AddImageToRegistry - Docker - Docker registries - Docker Store": "Docker store allows you to buy and sell Docker images or distribute them for free. For instance, you can buy a Docker image containing an application or service from a software vendor and use the image to deploy the application into your testing, staging, and production environments. You can upgrade the application by pulling the new version of the image and redeploying the containers.",
	"6. AddImageToRegistry - Docker - Docker registries - custom": ".",

	"7. ChooseCO": "SECTION",

	"8. DeployContainer": "SECTION",
	"8. DeployContainer - docker - compose": "Docker Compose is used to run multiple containers as a single service. For example, suppose you had an application which required NGNIX and MySQL, you could create one file which would start both the containers as a service without the need to start each one separately.",
  "8. DeployContainer - docker - compose - create": "Now let’s go ahead and create our first Docker Compose file. All Docker Compose files are YAML files. You can create one using the vim editor. So execute the following command to create the compose file − sudo vim docker-compose.yml",
  "8. DeployContainer - docker - compose - run": "Now let’s run our Docker Compose file using the following command −sudo ./docker-compose up.",
	"8. DeployContainer - Docker Compose": "Docker Compose is a recipe of services that make up an application and the docker-compose.yml dictates how the services are mixed together. Docker Compose offers a number of benefits over the Docker CLI in all stages of development.",
	"8. DeployContainer - Docker Compose - commands - build": "Build or rebuild services",
	"8. DeployContainer - Docker Compose - commands - bundle": "Generate a Docker bundle from the Compose file",
	"8. DeployContainer - Docker Compose - commands - config": "Validate and view the Compose file",
	"8. DeployContainer - Docker Compose - commands - create": "Create services",
	"8. DeployContainer - Docker Compose - commands - down": "Stop and remove containers, networks, images, and volumes",
	"8. DeployContainer - Docker Compose - commands - events": "Receive real time events from containers",
	"8. DeployContainer - Docker Compose - commands - exec": "Execute a command in a running container",
	"8. DeployContainer - Docker Compose - commands - help": "Get help on a command",
	"8. DeployContainer - Docker Compose - commands - images": "List images",
	"8. DeployContainer - Docker Compose - commands - kill": "Kill containers",
	"8. DeployContainer - Docker Compose - commands - logs": "View output from containers",
	"8. DeployContainer - Docker Compose - commands - pause": "Pause services",
	"8. DeployContainer - Docker Compose - commands - port": "Print the public port for a port binding",
	"8. DeployContainer - Docker Compose - commands - ps": "List containers",
	"8. DeployContainer - Docker Compose - commands - pull": "Pull service images",
	"8. DeployContainer - Docker Compose - commands - push": "Push service images",
	"8. DeployContainer - Docker Compose - commands - restart": "Restart services",
	"8. DeployContainer - Docker Compose - commands - rm": "Remove stopped containers",
	"8. DeployContainer - Docker Compose - commands - run": "Run a one-off command",
	"8. DeployContainer - Docker Compose - commands - scale": "Set number of containers for a service",
	"8. DeployContainer - Docker Compose - commands - start": "Start services",
	"8. DeployContainer - Docker Compose - commands - stop": "Stop services",
	"8. DeployContainer - Docker Compose - commands - top": "Display the running processes",
	"8. DeployContainer - Docker Compose - commands - unpause": "Unpause services",
	"8. DeployContainer - Docker Compose - commands - up": "Create and start containers",
	"8. DeployContainer - Docker Compose - commands - version": "Show the Docker-Compose version information",

	"9. ManageCO": "SECTION",
	"9. ManageCO - Docker - Docker Engine": ".",
	"9. ManageCO - Docker - Docker Engine - Control groups": "Docker Engine on Linux also relies on another technology called control groups (cgroups). A cgroup limits an application to a specific set of resources. Control groups allow Docker Engine to share available hardware resources to containers and optionally enforce limits and constraints. For example, you can limit the memory available to a specific container.",
	"9. ManageCO - Docker - Docker Engine - Union file systems": "Union file systems, or UnionFS, are file systems that operate by creating layers, making them very lightweight and fast. Docker Engine uses UnionFS to provide the building blocks for containers. Docker Engine can use multiple UnionFS variants, including AUFS, btrfs, vfs, and DeviceMapper.",
	"9. ManageCO - Docker - Docker Engine - Container format": "Docker Engine combines the namespaces, control groups, and UnionFS into a wrapper called a container format. The default container format is libcontainer. In the future, Docker may support other container formats by integrating with technologies such as BSD Jails or Solaris Zones.",
	"9. ManageCO - Docker - Docker Machine": "Typically, you install Docker Machine on your local system. Docker Machine is a tool that lets you install Docker Engine on virtual hosts, and manage the hosts.",
	"9. ManageCO - Docker - Docker Machine - docker-machine": "You can use Machine to create Docker hosts on your local Mac or Windows box, on your company network, in your data center, or on cloud providers like Azure, AWS, or Digital Ocean. Using docker-machine commands, you can start, inspect, stop, and restart a managed host, upgrade the Docker client and daemon, and configure a Docker client to talk to your host.",
	"9. ManageCO - Docker - Docker Machine - docker-machine - active": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - config": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - create": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - env": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - help": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - inspect": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - ip": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - kill": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - ls": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - mount": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - provision": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - regenerate-certs": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - restart": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - rm": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - ssp": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - sch": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - start": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - status": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - stop": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - upgrade": "",
	"9. ManageCO - Docker - Docker Machine - docker-machine - url": "",
	"9. ManageCO - Docker - Docker CLI": "The Docker client (docker) is the primary way that many Docker users interact with the DockerEngine.",
	"9. ManageCO - Docker - Docker CLI - source": "When you use the docker pull or docker run commands, the required images are pulled from your configured registry. When you use the docker push command, your image is pushed to your configured registry.",
	"9. ManageCO - Docker - Docker CLI - docker attach": ".",
	"9. ManageCO - Docker - Docker CLI - docker build": ".",
	"9. ManageCO - Docker - Docker CLI - docker checkpoint": ".",
	"9. ManageCO - Docker - Docker CLI - docker commit": ".",
	"9. ManageCO - Docker - Docker CLI - docker config": ".",
	"9. ManageCO - Docker - Docker CLI - docker container": ".",
	"9. ManageCO - Docker - Docker CLI - docker cp": ".",
	"9. ManageCO - Docker - Docker CLI - docker create": ".",
	"9. ManageCO - Docker - Docker CLI - docker deploy": ".",
	"9. ManageCO - Docker - Docker CLI - docker diff": ".",
	"9. ManageCO - Docker - Docker CLI - docker events": ".",
	"9. ManageCO - Docker - Docker CLI - docker exec": ".",
	"9. ManageCO - ocker - Docker CLI - docker export": ".",
	"9. ManageCO - Docker - Docker CLI - docker history": ".",
	"9. ManageCO - Docker - Docker CLI - docker image": ".",
	"9. ManageCO - Docker - Docker CLI - docker images": ".",
	"9. ManageCO - Docker - Docker CLI - docker import": ".",
	"9. ManageCO - Docker - Docker CLI - docker info": ".",
	"9. ManageCO - Docker - Docker CLI - docker inspect": ".",
	"9. ManageCO - Docker - Docker CLI - docker kill": ".",
	"9. ManageCO - Docker - Docker CLI - docker load": ".",
	"9. ManageCO - Docker - Docker CLI - docker login": ".",
	"9. ManageCO - Docker - Docker CLI - docker logout": ".",
	"9. ManageCO - Docker - Docker CLI - docker logs": ".",
	"9. ManageCO - Docker - Docker CLI - docker manifest": ".",
	"9. ManageCO - Docker - Docker CLI - docker network": ".",
	"9. ManageCO - Docker - Docker CLI - docker node": ".",
	"9. ManageCO - Docker - Docker CLI - docker pause": ".",
	"9. ManageCO - Docker - Docker CLI - docker plugin": ".",
	"9. ManageCO - ocker - Docker CLI - docker port": ".",
	"9. ManageCO - Docker - Docker CLI - docker ps": ".",
	"9. ManageCO - Docker - Docker CLI - docker pull": ".",
	"9. ManageCO - Docker - Docker CLI - docker push": ".",
	"9. ManageCO - Docker - Docker CLI - docker rename": ".",
	"9. ManageCO - Docker - Docker CLI - docker restart": ".",
	"9. ManageCO - Docker - Docker CLI - docker rm": ".",
	"9. ManageCO - Docker - Docker CLI - docker rmi": ".",
	"9. ManageCO - Docker - Docker CLI - docker run": ".",
	"9. ManageCO - Docker - Docker CLI - docker save": ".",
	"9. ManageCO - Docker - Docker CLI - docker search": ".",
	"9. ManageCO - Docker - Docker CLI - docker secret": ".",
	"9. ManageCO - Docker - Docker CLI - docker service": ".",
	"9. ManageCO - Docker - Docker CLI - docker stack": ".",
	"9. ManageCO - Docker - Docker CLI - docker start": ".",
	"9. ManageCO - Docker - Docker CLI - docker stats": ".",
	"9. ManageCO - Docker - Docker CLI - docker stop": ".",
	"9. ManageCO - Docker - Docker CLI - docker swarm": ".",
	"9. ManageCO - Docker - Docker CLI - docker system": ".",
	"9. ManageCO - Docker - Docker CLI - docker tag": ".",
	"9. ManageCO - Docker - Docker CLI - docker top": ".",
	"9. ManageCO - Docker - Docker CLI - docker trust": ".",
	"9. ManageCO - Docker - Docker CLI - docker unpase": ".",
	"9. ManageCO - Docker - Docker CLI - docker update": ".",
	"9. ManageCO - Docker - Docker CLI - docker version": ".",
	"9. ManageCO - Docker - Docker CLI - docker volume": ".",
	"9. ManageCO - Docker - Docker CLI - docker wait": ".",
	"9. ManageCO - Docker - Docker CLI - Docker API": ".",
	"9. ManageCO - Docker - Docker CLI - Docker API - Docker daemon": "The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. A daemon can also communicate with other daemons to manage Docker services.",
	"9. ManageCO - Docker - UCP": "Docker Universal Control Plane (UCP)",
	"9. ManageCO - Docker - UCP - UCP CLI - install": "",
	"9. ManageCO - Docker - UCP - UCP CLI - start": "",
	"9. ManageCO - Docker - UCP - UCP CLI - stop": "",
	"9. ManageCO - Docker - UCP - UCP CLI - upgrade": "",
	"9. ManageCO - Docker - UCP - UCP CLI - images": "",
	"9. ManageCO - Docker - UCP - UCP CLI - unistall-ucp": "",
	"9. ManageCO - Docker - UCP - UCP CLI - dump-certs": "",
	"9. ManageCO - Docker - UCP - UCP CLI - support": "",
	"9. ManageCO - Docker - UCP - UCP CLI - id": "",
	"9. ManageCO - Docker - UCP - UCP CLI - backup": "",
	"9. ManageCO - Docker - UCP - UCP CLI - restore": "",
	"9. ManageCO - Docker - UCP - UCP CLI - example-config": ""

}
