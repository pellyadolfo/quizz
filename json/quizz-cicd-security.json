{

	"Client": "SECTION",
	"Client - WebAuthenticationAPI": "Web Authentication API (WebAuthn) is a W3C and FIDO specification that allows registration and authentication of users using public key cryptography instead of a password.",

	"Transport": "SECTION",
  "Transport - HTTP - CSP": "Content Security Policy (CSP) is a feature that helps to prevent or minimize the risk of certain types of security threats.",
  "Transport - UseHTTPS": "TLS/HTTPS.",
  "Transport - HSTS": ".",
  "Transport - WS-Security": "",

  "Access": "SECTION",
  "Access - SessionId": "",
	"Access - Tokens - JWT": "JWT (RFC 7519) for securely transmitting information between parties as a JSON object.",
  "Access - Tokens - JWT - Structure - Payload - Claim": "A compact and self-contained way to represent a set of claims securely between two parties.",
  "Access - Tokens - JWT - Structure - Payload - Claim - Structure": "From the text, we can understand that JWT is not a structure but a set of claims in the shape of either JWS or JWE as its way of securing itself. In the most basic form, the difference between JWS and JWE is that everyone can see the payload of JWS while the JWE one is encrypted.",
  "Access - Tokens - JWT - Usage": "JSON Web Token (JWT) is an abstract that is represented in the form of JSON Web Signature (JWS) and JSON Web Encryption (JWE).",
  "Access - Tokens - JWT - Usage - Benefits - Statelessness": "server doesn't need to store session information. Reduces the need for server-side sessions.",
  "Access - Tokens - JWT - Usage - Benefits - Security": "Ensures secure communication between two parties. can be signed using various algorithms",
  "Access - Tokens - JWT - Usage - Benefits - Decentralization": "ideal for single sign-on (SSO).",
  "Access - Tokens - JWT - Usage - BestPractices - Shortlived": "Keep tokens short-lived (set an expiration).",
  "Access - Tokens - JWA": "JWA (RFC 7518), which stands for JSON Web Algorithm, is a specification defining which hashing and encryption algorithm to make a JWT.",
  "Access - Tokens - JWA - Usage": "JSON Web Signature (JWS) and JSON Web Encryption (JWE) use signature and encryption algorithms defined in JSON Web Algorithm (JWA) as a way of securing themselves.",
  "Access - Tokens - JWA - Usage - BestPractices - Asymmetry": "Prioritize Asymmetry: Use RS256 (RSA) or ES256 (Elliptic Curve) for stronger security.",
  "Access - Tokens - JWT - Usage - BestPractices - Strong": "Use strong secret keys and algorithms. ",
  "Access - Tokens - JWA - Usage - BestPractices - HS256": "Avoid HS256: HMAC-based signing (HS256) requires careful key management.",
  "Access - Tokens - JWA - Usage - BestPractices - none": "Never Use 'none': This disables signing, rendering JWTs completely insecure.",
	"Access - Tokens - JWK": "JWK (RFC 7517) stands for JSON Web Key. JWK is a JSON data structure that contains information about hashing function's cryptographic key. It's a way to store your hashing key in JSON format.",
  "Access - Tokens - JWK - Usage": "The public key of the signature algorithm defined in the JSON Web Algorithm (JWA) can be hosted as JSON Web Key (JWK).",
  "Access - Tokens - JWK - Usage - BestPractices - keys": "◾ Generate robust, cryptographically secure keys (256-bit or higher)",
  "Access - Tokens - JWK - Usage - BestPractices - rotate": "◾ Regularly rotate keys.",
  "Access - Tokens - JWKS": "JWKS is a set of public keys that can be used to verify the JWTs issued by a specific authorization server.",
  "Access - Tokens - JWKS - Usage": "verify any JSON Web Token (JWT) issued by the Authorization Server and signed using the RS256 signing algorithm. ",
	"Access - Tokens - JWS": "A signed JWT. JWS (RFC 7515), which stands for JSON Web Signature, is one of the structures used by JWT. It's the most common implementation of the JWT.",
  "Access - Tokens - JWS - Security": "The signature only provides integrity, not confidentiality. The JWT is secure because only the one with the secret key can create it.",
  "Access - Tokens - JWS - Algorithms": "Signing algos (HS256, etc)",
  "Access - Tokens - JWS - Structure": "3 components: Three Base64-URL string generated by dots: Header.Payload.Signature",
  "Access - Tokens - JWS - Structure - Header": "Contains metadata about the token.",
  "Access - Tokens - JWS - Structure - Header - alg": "The signing algorithm (e.g., HS256, RS256, ES256).",
  "Access - Tokens - JWS - Structure - Header - typ": "The type of token (usually 'JWT')",
  "Access - Tokens - JWS - Structure - Payload": "◾ Contains the claims (statements) about an entity (typically, the user) and additional data.",
  "Access - Tokens - JWS - Structure - Payload - Readable": "Well, the payload of the JWS is intended for everyone to read. What makes the JWT safe is the consumer can verify who is the one issued the JWT.",
  "Access - Tokens - JWS - Structure - Payload - Claims": "",
  "Access - Tokens - JWS - Structure - Payload - Claims - Registered": "Registered claims (standardized). Standard fields (optional but recommended)",
  "Access - Tokens - JWS - Structure - Payload - Claims - Registered - iss": "iss (issuer)",
  "Access - Tokens - JWS - Structure - Payload - Claims - Registered - sub": "sub (subject)",
  "Access - Tokens - JWS - Structure - Payload - Claims - Registered - aud": "aud (audience)",
  "Access - Tokens - JWS - Structure - Payload - Claims - Registered - exp": "exp (expiration time)",
  "Access - Tokens - JWS - Structure - Payload - Claims - Registered - nbf": "nbf (not before time)",
  "Access - Tokens - JWS - Structure - Payload - Claims - Registered - iat": "iat (issued at time)",
  "Access - Tokens - JWS - Structure - Payload - Claims - Registered - jti": "jti (unique identifier)",
  "Access - Tokens - JWS - Structure - Payload - Claims - Public": "Public claims (customizable by your application). Custom fields (should be defined in IANA registry or use URIs)",
  "Access - Tokens - JWS - Structure - Payload - Claims - Private": "Private claims (application-specific agreements). Custom fields agreed between parties",
  "Access - Tokens - JWS - Structure - Signature": "Used to verify the token's authenticity and integrity. Used to verify the message wasn't changed along the way",
  "Access - Tokens - JWS - Structure - Signature - Structure": "signature = algorithm(base64UrlEncode(header) + '.' + base64UrlEncode(payload), secret_key)",
	"Access - Tokens - JWS - Process - Generation": "Token Creation: The server generates a JWT when the user logs in.",
  "Access - Tokens - JWS - Process - Transmission": "This token is sent to the client (e.g., browser).",
  "Access - Tokens - JWS - Process - Usage": "For subsequent requests, the client sends the JWT, which the server verifies before granting access.",
	"Access - Tokens - JWS - Process - Usage - BestPractices - Storage": "Store keys securely, never in source code or version control.",
  "Access - Tokens - JWS - Process - Usage - BestPractices - TokenHandling - HTTPS": "Transmit JWTs exclusively over HTTPS to prevent interception.",
  "Access - Tokens - JWS - Process - Usage - BestPractices - TokenHandling - HttpOnly": "Store JWTs in HttpOnly cookies to protect against cross-site scripting (XSS) attacks.",
  "Access - Tokens - JWS - Process - Usage - BestPractices - TokenHandling - Expiration": "Set short expiration times and consider refresh tokens for longer sessions.",
  "Access - Tokens - JWS - Process - Usage - BestPractices - TokenHandling - Revoke": "Implement mechanisms for revoking compromised tokens =>blacklists, short-lived tokens.",
  "Access - Tokens - JWS - Process - Usage - BestPractices - ValidationAndVerification - verify": "ALWAYS verify the JWT signature using the appropriate algorithm and key before processing the claims.",
  "Access - Tokens - JWS - Process - Usage - BestPractices - ValidationAndVerification - claims": "Check all relevant claims (exp, iss, aud) for validity and relevance to your application.",
	"Access - Tokens - JWE": "An encrypted JWT. JWE (RFC 7516), unlike JWS, encrypts its content using an encryption algorithm.",
  "Access - Tokens - JWE - Security": "The only one that can see what is inside the JWT is the one with the key.",
  "Access - Tokens - JWE - Algorithms": "Encryption algos (AES, etc)",
  "Access - Tokens - JWE - Structure": "5 components: Base64Url(Header).Base64Url(Encrypted Key).Base64Url(Initialization Vector).Base64Url(Ciphertext).Base64Url(Authentication Tag)",
  "Access - Tokens - JWE - Structure - Header": "BASE64URL(UTF8(JWE Protected Header)) || ’.’ ||",
  "Access - Tokens - JWE - Structure - EncryptedKey": "BASE64URL(JWE Encrypted Key) || ’.’ ||",
  "Access - Tokens - JWE - Structure - InitializationVector": "BASE64URL(JWE Initialization Vector) || ’.’ ||",
  "Access - Tokens - JWE - Structure - Ciphertext": "BASE64URL(JWE Ciphertext) || ’.’ ||",
  "Access - Tokens - JWE - Structure - AuthenticationTag": "BASE64URL(JWE Authentication Tag",
  "Access - Tokens - JWE - Process - KeyGeneration": "A random Content Encryption Key (CEK) is generated",
  "Access - Tokens - JWE - Process - KeyEncryption": "The CEK is encrypted using the recipient's public key (using the alg specified)",
  "Access - Tokens - JWE - Process - PayloadEncryption": "The actual data is encrypted with the CEK (using the enc algorithm)",
  "Access - Tokens - JWE - Process - Serialization": "All components are base64url encoded and concatenated",
	"Access - SessionPersistance": "Server generates token (session id or JWT token) and sends it to the user. User stores the token (e.g., in local storage or cookies). User sends the token in subsequent requests.",
	"Access - SessionPersistance - URLRewritting": "",
	"Access - SessionPersistance - Cookies": "",
	"Access - Authorization": "access to data. Authorization determines permissions (e.g., access levels).",
	"Access - Authorization - OAuth": "OAuth (Open Authorization) is an open-standard authorization framework that allows third-party applications to access user data from a service (like Google, Facebook, or GitHub) without exposing the user's credentials. Instead, it provides secure, delegated access using access tokens.",
	"Access - Authorization - OAuth - Features - deprecated": ".",
	"Access - Authorization - OAuth - Features - Passwordless": "Allows users to grant applications access without sharing passwords..",
	"Access - Authorization - OAuth - Features - Security": "Required complex cryptographic signing.",
	"Access - Authorization - OAuth - Features - Tokens": "Instead of passwords, OAuth uses short-lived tokens for secure API access.",
	"Access - Authorization - OAuth - Features - Usage": "Less flexible for modern apps.",
	"Access - Authorization - OAuth - Flow - UserRequestsAccess": "App asks the user to authorize access via an OAuth provider (e.g., Google).",
	"Access - Authorization - OAuth - Flow - AuthorizationGrant": "User logs in and approves the requested permissions. The provider gives the app an authorization code.",
	"Access - Authorization - OAuth - Flow - TokenExchange": "The app exchanges the code for an access token (and optionally a refresh token).",
	"Access - Authorization - OAuth - Flow - APIAccess": "The app uses the access token to fetch data from the provider's API.",
	"Access - Authorization - OAuth2": "",
	"Access - Authorization - OAuth2 - Features - Security": "Simpler, uses HTTPS (not cryptographic signatures).",
	"Access - Authorization - OAuth2 - Features - Tokens": "Uses Bearer Tokens (like JWT).",
	"Access - Authorization - OAuth2 - Features - Usage": "Supports mobile & web apps better.",
	"Access - Authorization - OAuth2 - access_token": "Used to call APIs on behalf of the user. Think of this as a pass granting limited rights to a third-party service.",
	"Access - Authentication": "who is the user. Authentication verifies identity (e.g., login)",
	"Access - Authentication - Types - RBAC": "RBAC (Role-Based Access Control) grants access based on user roles",
	"Access - Authentication - Types - ABAC": "ABAC (Attribute-Based Access Control) considers attributes",
	"Access - Authentication - Types - PBAC": "PBAC (Policy-Based Access Control) uses policies and rules for authorization,",
	"Access - Authentication - HTTP - HTTP Basic": "",
	"Access - Authentication - HTTP - HTTP Digest": "",
	"Access - Authentication - Credentials": "The First Line of Defense. The classic method—username and password. But is it enough? Weak passwords are easily cracked; multi-factor authentication (MFA) is essential. The best practice? Use passphrases, password managers, and regular updates.",
	"Access - Authentication - APIKey": "API keys are supposed to be a secret that only the client and server know. Like Basic authentication, API key-based authentication is only considered secure if used together with other security mechanisms such as HTTPS/SSL.",
	"Access - Authentication - Token Based": "",
	"Access - Authentication - SSHKeys": "The Lock and Key for Secure Access. Used for remote access to systems without needing passwords. Stronger than traditional credentials—keys are complex and hard to guess. Must be properly managed to prevent unauthorized use or key leaks.",
	"Access - Authentication - SSLCertificates": "The Silent Guardian of Secure Connections. Ensure encrypted communication between users and servers. Prevent man-in-the-middle attacks and unauthorized interception. A must-have for websites handling sensitive data, transactions, or logins.",
	"Access - Authentication - OpenID": "",
	"Access - Authentication - OpenID2.0": "",
  "Access - Authentication - OIDC": "OpenID Connect or OIDC is an identity protocol that utilizes the authorization and authentication mechanisms of OAuth 2.0.",
  "Access - Authentication - OIDC - id_token": "OIDC introduces the id_token, a JSON Web Token (JWT) that contains claims about the user's identity.",
	"Access - SSO": "SSO allows users to authenticate once and access multiple applications without re-entering credentials.",
	"Access - SSO - IdP": "An IdP is a trusted service that stores and manages user identities, including usernames, passwords, and permissions.",
	"Access - SSO - IdP - Process": "Identity-Provider. IdP acts as a central authority for authentication, verifying user credentials and granting access to various applications.",
	"Access - SSO - IdP - Process - 1. SP - Request": "User Attempts to Access Application (Service Provider - SP) The user tries to access a resource (e.g., a web app) that requires authentication. The application detects that the user is not logged in.",
	"Access - SSO - IdP - Process - 2. SP - Redirect": "The application (SP) redirects the user to the Identity Provider (IdP) with a request for authentication. This redirection includes metadata like a SAML request, OAuth2 token request, or OIDC (OpenID Connect) request.",
	"Access - SSO - IdP - Process - 2. SP - Redirect - Protocols - SAML": "SAML, or Security Assertion Markup Language, is an XML-based open standard that facilitates secure exchange of authentication and authorization data between two parties: an Identity Provider (IdP) and a Service Provider (SP), enabling single sign-on (SSO).",
	"Access - SSO - IdP - Process - 2. SP - Redirect - Protocols - OAuth2": ".",
	"Access - SSO - IdP - Process - 2. SP - Redirect - Protocols - OIDC": ".",
	"Access - SSO - IdP - Process - 3. IdP - LogIn": "The user is presented with a login page (from the IdP). The user enters their credentials (username/password, biometric, or 2FA).",
	"Access - SSO - IdP - Process - 4. IdP - Verify": "The IdP checks the credentials against its user database (like LDAP, Active Directory, or its own DB). If valid, it creates a secure authentication token (e.g., SAML Assertion or ID Token)..",
	"Access - SSO - IdP - Process - 5. IdP - Verify - LDAP": ".",
	"Access - SSO - IdP - Process - 5. IdP - Verify - Kerberos": ".",
	"Access - SSO - IdP - Process - 6. IdP - Token": "Once authenticated, the IdP creates and provides a token or assertion to the Service Provider (SP) confirming the user's identity. The user is now authenticated and can access the Service Provier (LinkedIn)..",
	"Access - SSO - IdP - Process - 7. SP - Granted": "Since the Identity Provider has established a session, when the user goes to access a different Service Provider (eg; GitHub), they won't need to re-enter their credentials. Future service providers will request authentication from the Identity Provider, recognize the existing session, and grant access to the user based on the previously authenticated session.",
	"Access - SSO - IdP - Tools - MicrosoftEntraID": "",
	"Access - SSO - IdP - Tools - Okta": "",
	"Access - SSO - IdP - Tools - Auth0": "",
	"Access - SSO - IdP - Tools - JumpCloud": "",
  "Access - SSO - IdP - Tools - CAS": "Central authentication service, or CAS, is a single sign-on (SSO) protocol that allows websites to authenticate users.",
	"Access - MFA": "",

  "Processing": "SECTION",
	"Processing - AllowList": "",
	"Processing - InputValidations": "",
	"Processing - InputValidations - Message Size": "",
	"Processing - InputValidations - SQL Injection": "",
	"Processing - InputValidations - JSON Threat Protection": "",
	"Processing - InputValidations - XML Threat Protection": "",

	"Web - OWASP": "",
  "Web - CORS": "https://javascript.plainenglish.io/cors-the-friendly-gatekeeper-of-the-web-and-how-to-fix-it-650e33179d24",
  "Web - XSS": "https://javascript.plainenglish.io/how-to-secure-your-frontend-in-2024-with-code-best-practices-for-modern-web-development-dc60921bb93a",

	"Standards - NIS2": "https://digital-strategy.ec.europa.eu/en/policies/nis2-directive"

}

