{

  "Web": "SECTION",

  "Web - HTTP - CSP": "Content Security Policy (CSP) is a feature that helps to prevent or minimize the risk of certain types of security threats.",
  "Web - WS-Security": "",

	"Web - JWT": "JWT (RFC 7519) for securely transmitting information between parties as a JSON object.",
  "Web - JWT - Structure - Payload - Claim": "A compact and self-contained way to represent a set of claims securely between two parties.",
  "Web - JWT - Structure - Payload - Claim - Structure": "From the text, we can understand that JWT is not a structure but a set of claims in the shape of either JWS or JWE as its way of securing itself. In the most basic form, the difference between JWS and JWE is that everyone can see the payload of JWS while the JWE one is encrypted.",
  "Web - JWT - Usage": "JSON Web Token (JWT) is an abstract that is represented in the form of JSON Web Signature (JWS) and JSON Web Encryption (JWE).",
  "Web - JWT - Usage - Benefits - Statelessness": "server doesn't need to store session information.",
  "Web - JWT - Usage - Benefits - Security": "can be signed using various algorithms",
  "Web - JWT - Usage - Benefits - Decentralization": "ideal for single sign-on (SSO).",
  "Web - JWA": "JWA (RFC 7518), which stands for JSON Web Algorithm, is a specification defining which hashing and encryption algorithm to make a JWT.",
  "Web - JWA - Usage": "JSON Web Signature (JWS) and JSON Web Encryption (JWE) use signature and encryption algorithms defined in JSON Web Algorithm (JWA) as a way of securing themselves.",
  "Web - JWA - Usage - BestPractices - Asymmetry": "Prioritize Asymmetry: Use RS256 (RSA) or ES256 (Elliptic Curve) for stronger security.",
  "Web - JWA - Usage - BestPractices - HS256": "Avoid HS256: HMAC-based signing (HS256) requires careful key management.",
  "Web - JWA - Usage - BestPractices - none": "Never Use 'none': This disables signing, rendering JWTs completely insecure.",
	"Web - JWK": "JWK (RFC 7517) stands for JSON Web Key. JWK is a JSON data structure that contains information about hashing function's cryptographic key. It's a way to store your hashing key in JSON format.",
  "Web - JWK - Usage": "The public key of the signature algorithm defined in the JSON Web Algorithm (JWA) can be hosted as JSON Web Key (JWK).",
  "Web - JWK - Usage - BestPractices - keys": "◾ Generate robust, cryptographically secure keys (256-bit or higher)",
  "Web - JWK - Usage - BestPractices - rotate": "◾ Regularly rotate keys.",
  "Web - JWKS": "JWKS is a set of public keys that can be used to verify the JWTs issued by a specific authorization server.",
  "Web - JWKS - Usage": "verify any JSON Web Token (JWT) issued by the Authorization Server and signed using the RS256 signing algorithm. ",
	"Web - JWS": "A signed JWT. JWS (RFC 7515), which stands for JSON Web Signature, is one of the structures used by JWT. It's the most common implementation of the JWT.",
  "Web - JWS - Security": "The signature only provides integrity, not confidentiality. The JWT is secure because only the one with the secret key can create it.",
  "Web - JWS - Algorithms": "Signing algos (HS256, etc)",
  "Web - JWS - Structure": "3 components: Three Base64-URL string generated by dots: Header.Payload.Signature",
  "Web - JWS - Structure - Header": "Contains metadata about the token.",
  "Web - JWS - Structure - Header - alg": "The signing algorithm (e.g., HS256, RS256, ES256).",
  "Web - JWS - Structure - Header - typ": "The type of token (usually 'JWT')",
  "Web - JWS - Structure - Payload": "◾ Contains the claims (statements) about an entity (typically, the user) and additional data.",
  "Web - JWS - Structure - Payload - Readable": "Well, the payload of the JWS is intended for everyone to read. What makes the JWT safe is the consumer can verify who is the one issued the JWT.",
  "Web - JWS - Structure - Payload - Claims": "",
  "Web - JWS - Structure - Payload - Claims - Registered": "Registered claims (standardized). Standard fields (optional but recommended)",
  "Web - JWS - Structure - Payload - Claims - Registered - iss": "iss (issuer)",
  "Web - JWS - Structure - Payload - Claims - Registered - sub": "sub (subject)",
  "Web - JWS - Structure - Payload - Claims - Registered - aud": "aud (audience)",
  "Web - JWS - Structure - Payload - Claims - Registered - exp": "exp (expiration time)",
  "Web - JWS - Structure - Payload - Claims - Registered - nbf": "nbf (not before time)",
  "Web - JWS - Structure - Payload - Claims - Registered - iat": "iat (issued at time)",
  "Web - JWS - Structure - Payload - Claims - Registered - jti": "jti (unique identifier)",
  "Web - JWS - Structure - Payload - Claims - Public": "Public claims (customizable by your application). Custom fields (should be defined in IANA registry or use URIs)",
  "Web - JWS - Structure - Payload - Claims - Private": "Private claims (application-specific agreements). Custom fields agreed between parties",
  "Web - JWS - Structure - Signature": "Used to verify the token's authenticity and integrity. Used to verify the message wasn't changed along the way",
  "Web - JWS - Structure - Signature - Structure": "signature = algorithm(base64UrlEncode(header) + '.' + base64UrlEncode(payload), secret_key)",
	"Web - JWS - Process - Generation": "Token Creation: The server generates a JWT when the user logs in.",
  "Web - JWS - Process - Transmission": "This token is sent to the client (e.g., browser).",
  "Web - JWS - Process - Usage": "For subsequent requests, the client sends the JWT, which the server verifies before granting access.",
	"Web - JWS - Process - Usage - BestPractices - Storage": "Store keys securely, never in source code or version control.",
  "Web - JWS - Process - Usage - BestPractices - TokenHandling - HTTPS": "Transmit JWTs exclusively over HTTPS to prevent interception.",
  "Web - JWS - Process - Usage - BestPractices - TokenHandling - HttpOnly": "Store JWTs in HttpOnly cookies to protect against cross-site scripting (XSS) attacks.",
  "Web - JWS - Process - Usage - BestPractices - TokenHandling - Expiration": "Set short expiration times and consider refresh tokens for longer sessions.",
  "Web - JWS - Process - Usage - BestPractices - TokenHandling - Revoke": "Implement mechanisms for revoking compromised tokens =>blacklists, short-lived tokens.",
  "Web - JWS - Process - Usage - BestPractices - ValidationAndVerification - verify": "ALWAYS verify the JWT signature using the appropriate algorithm and key before processing the claims.",
  "Web - JWS - Process - Usage - BestPractices - ValidationAndVerification - claims": "Check all relevant claims (exp, iss, aud) for validity and relevance to your application.",
	"Web - JWE": "An encrypted JWT. JWE (RFC 7516), unlike JWS, encrypts its content using an encryption algorithm.",
  "Web - JWE - Security": "The only one that can see what is inside the JWT is the one with the key.",
  "Web - JWE - Algorithms": "Encryption algos (AES, etc)",
  "Web - JWE - Structure": "5 components: Base64Url(Header).Base64Url(Encrypted Key).Base64Url(Initialization Vector).Base64Url(Ciphertext).Base64Url(Authentication Tag)",
  "Web - JWE - Structure - Header": "BASE64URL(UTF8(JWE Protected Header)) || ’.’ ||",
  "Web - JWE - Structure - EncryptedKey": "BASE64URL(JWE Encrypted Key) || ’.’ ||",
  "Web - JWE - Structure - InitializationVector": "BASE64URL(JWE Initialization Vector) || ’.’ ||",
  "Web - JWE - Structure - Ciphertext": "BASE64URL(JWE Ciphertext) || ’.’ ||",
  "Web - JWE - Structure - AuthenticationTag": "BASE64URL(JWE Authentication Tag",
  "Web - JWE - Process - KeyGeneration": "A random Content Encryption Key (CEK) is generated",
  "Web - JWE - Process - KeyEncryption": "The CEK is encrypted using the recipient's public key (using the alg specified)",
  "Web - JWE - Process - PayloadEncryption": "The actual data is encrypted with the CEK (using the enc algorithm)",
  "Web - JWE - Process - Serialization": "All components are base64url encoded and concatenated",

  "Web - CORS": "https://javascript.plainenglish.io/cors-the-friendly-gatekeeper-of-the-web-and-how-to-fix-it-650e33179d24",
  "Web - XSS": "https://javascript.plainenglish.io/how-to-secure-your-frontend-in-2024-with-code-best-practices-for-modern-web-development-dc60921bb93a",

  "Web - OIDC": "",
  "Web - CAS": "",

	"Web - OAuth": "",
	"Web - OAuth2": "",
	"Web - OWASP": "",
	"Web - OpenID": "",
	"Web - MFA": "",
	"Web - SSO": "",

	"Standards - NIS2": "https://digital-strategy.ec.europa.eu/en/policies/nis2-directive"

}

