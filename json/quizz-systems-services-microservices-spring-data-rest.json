{

	"SpringDataREST": "The core functionality of Spring Data REST is to export resources for Spring Data repositories. Thus, the core artifact to look at and potentially customize the way the exporting works is the repository interface.",
	"SpringDataREST - configure - add - as springboot": "<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-rest</artifactId> </dependency>",
	"SpringDataREST - configure - add - as dependency": "<dependency> <groupId>org.springframework.data</groupId> <artifactId>spring-data-rest-webmvc</artifactId> </dependency>",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy": "Spring Data REST uses a RepositoryDetectionStrategy to determine whether a repository is exported as a REST resource.",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy - DEFAULT": "Exposes all public repository interfaces but considers the exported flag of @(Repository)RestResource.",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy - ALL": "Exposes all repositories independently of type visibility and annotations.",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy - ANNOTATION": "Only repositories annotated with @(Repository)RestResource are exposed, unless their exported flag is set to false.",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy - VISIBILITY": "Only public repositories annotated are exposed.",
	"SpringDataREST - configure - mechanism - application.properties": "spring.data.rest.<property>=<value>",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer": "create a @Bean as @Bean  public RepositoryRestConfigurer repositoryRestConfigurer() { ... }",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureConversionService(ConfigurableConversionService conversionService)": "Override this method to add your own converters.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureExceptionHandlerExceptionResolver(ExceptionHandlerExceptionResolver exceptionResolver)": "Configure the ExceptionHandlerExceptionResolver.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureHttpMessageConverters(List<HttpMessageConverter< ?>> messageConverters)": "Configure the available HttpMessageConverters by adding your own.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureJacksonObjectMapper(com.fasterxml.jackson.databind.ObjectMapper objectMapper)": "Configure the Jackson ObjectMapper directly.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureRepositoryRestConfiguration(RepositoryRestConfiguration config)": "Override this method to add additional configuration.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureValidatingRepositoryEventListener(ValidatingRepositoryEventListener validatingListener)": "Override this method to add validators manually.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - withConfig(Consumer<RepositoryRestConfiguration> consumer)": "Convenience method to easily create simple RepositoryRestConfigurer instances that solely want to tweak the RepositoryRestConfiguration.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - adapter - RepositoryRestConfigurerAdapter": "@Override public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) { config.setBasePath('/api'), }",
	"SpringDataREST - exposingRepository - basis": "public interface OrderRepository extends CrudRepository<Order, Long> { } For this repository, Spring Data REST exposes a collection resource named after the uncapitalized, pluralized version of the domain class the exported repository is handling, i.e. /orders",
	"SpringDataREST - exposingRepository - basis - properties - basePath": "the root URI for Spring Data REST",
	"SpringDataREST - exposingRepository - basis - properties - defaultPageSize": "change the default for the number of items served in a single page",
	"SpringDataREST - exposingRepository - basis - properties - maxPageSize": "change the maximum number of items in a single page",
	"SpringDataREST - exposingRepository - basis - properties - pageParamName": "change the name of the query parameter for selecting pages",
	"SpringDataREST - exposingRepository - basis - properties - limitParamName": "change the name of the query parameter for the number of items to show in a page",
	"SpringDataREST - exposingRepository - basis - properties - sortParamName": "change the name of the query parameter for sorting",
	"SpringDataREST - exposingRepository - basis - properties - defaultMediaType": "change the default media type to use when none is specified",
	"SpringDataREST - exposingRepository - basis - properties - returnBodyOnCreate": "change whether a body should be returned when creating a new entity",
	"SpringDataREST - exposingRepository - basis - properties - returnBodyOnUpdate": "change whether a body should be returned when updating an entity",
	"SpringDataREST - exposingRepository - basis - methods": "Which HTTP resources are exposed for a certain repository is mostly driven by the structure of the repository. In other words, the resource exposure will follow which methods you have exposed on the repository. If you extend CrudRepository you usually expose all methods required to expose all HTTP resources we can register by default. ",
	"SpringDataREST - exposingRepository - basis - methods - restricting": "Repositories that are not exposing those methods — either by not declaring them at all or explicitly using @RestResource(exported = false) — won’t expose those HTTP methods on those resources.",
	"SpringDataREST - exposingRepository - basis - status - 200 OK": "For plain GET requests.",
	"SpringDataREST - exposingRepository - basis - status - 201 Created": "For POST and PUT requests that create new resources.",
	"SpringDataREST - exposingRepository - basis - status - 204 No Content": "For PUT, PATCH, and DELETE requests when the configuration is set to not return response bodies for resource updates (RepositoryRestConfiguration.returnBodyOnUpdate). If the configuration value is set to include responses for PUT, 200 OK is returned for updates, and 201 Created is returned for resource created through PUT.",
	"SpringDataREST - exposingRepository - HAL": "Spring Data REST uses HAL to render responses. HAL defines the links to be contained in a property of the returned document.",
	"SpringDataREST - exposingRepository - HAL - list": "To discover what resources are available at the root of the application, issue an HTTP GET to the root URL, as follows: curl -v http://localhost:8080/",
	"SpringDataREST - exposingRepository - path - collection": "Spring Data REST exposes a collection resource at /orders. The path is derived from the uncapitalized, pluralized, simple class name of the domain class being managed.",
	"SpringDataREST - exposingRepository - path - collection - methods": "Collections resources support both GET and POST. All other HTTP methods cause a 405 Method Not Allowed.",
	"SpringDataREST - exposingRepository - path - collection - methods - GET": "Returns all entities the repository servers through its findAll(…) method. If the repository is a paging repository we include the pagination links if necessary and additional page metadata.",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - findAll(Pageable)": "",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - findAll(Pageable) - pagination": "If the repository has pagination capabilities, the resource takes the following parameters: page: The page number to access (0 indexed, defaults to 0), size: The page size requested (defaults to 20)., sort: A collection of sort directives in the format ($propertyname,)+[asc|desc]?.",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - findAll(Sort)": "",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - findAll()": "",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - media": "The GET method supports the following media types: application/hal+json, application/json",
	"SpringDataREST - exposingRepository - path - collection - methods - HEAD": "The HEAD method returns whether the collection resource is available. It has no status codes, media types, or related resources.",
	"SpringDataREST - exposingRepository - path - collection - methods - HEAD - findAll(Pageable)": "",
	"SpringDataREST - exposingRepository - path - collection - methods - HEAD - findAll(Sort)": "",
	"SpringDataREST - exposingRepository - path - collection - methods - HEAD - findAll()": "",
	"SpringDataREST - exposingRepository - path - collection - methods - POST": "The POST method creates a new entity from the given request body.",
	"SpringDataREST - exposingRepository - path - collection - methods - POST - save()": "",
	"SpringDataREST - exposingRepository - path - collection - methods - POST - media": "The POST method supports the following media types: application/hal+json, application/json",
	"SpringDataREST - exposingRepository - path - item": "Spring Data REST exposes an item resource for each of the items managed by the repository under the URI template /orders/{id}.",
	"SpringDataREST - exposingRepository - path - item - methods": "Item resources generally support GET, PUT, PATCH, and DELETE, unless explicit configuration prevents that",
	"SpringDataREST - exposingRepository - path - item - methods - GET": "",
	"SpringDataREST - exposingRepository - path - item - methods - GET - findById(…)": "",
	"SpringDataREST - exposingRepository - path - item - methods - HEAD": "The HEAD method returns whether the item resource is available. It has no status codes, media types, or related resources.",
	"SpringDataREST - exposingRepository - path - item - methods - HEAD - findById(…)": "",
	"SpringDataREST - exposingRepository - path - item - methods - PUT": "",
	"SpringDataREST - exposingRepository - path - item - methods - PUT - save()": "",
	"SpringDataREST - exposingRepository - path - item - methods - PATCH": "",
	"SpringDataREST - exposingRepository - path - item - methods - PATCH - save()": "",
	"SpringDataREST - exposingRepository - path - item - methods - DELETE": "",
	"SpringDataREST - exposingRepository - path - item - methods - DELETE - delete(T)": "",
	"SpringDataREST - exposingRepository - path - item - methods - DELETE - delete(ID)": "",
	"SpringDataREST - exposingRepository - path - item - methods - DELETE - delete(Iterable)": "",
	"SpringDataREST - exposingRepository - path - association": "Spring Data REST exposes sub-resources of every item resource for each of the associations the item resource has. The name and path of the resource defaults to the name of the association property and can be customized by using @RestResource on the association property.",
	"SpringDataREST - exposingRepository - path - association": "",
	"SpringDataREST - exposingRepository - path - association": "",
	"SpringDataREST - exposingRepository - path - association": "",
	"SpringDataREST - exposingRepository - path - search": "",
	"SpringDataREST - exposingRepository - path - search": "",
	"SpringDataREST - exposingRepository - path - search": "",
	"SpringDataREST - exposingRepository - path - search": "",
	"SpringDataREST - exposingRepository - path - query": "",
	"SpringDataREST - exposingRepository - path - query - GET": "",
	"SpringDataREST - exposingRepository - path - query - GET": "",
	"SpringDataREST - exposingRepository - path - query - HEAD": "",
	"SpringDataREST - exposingRepository - path - query - HEAD": "",
	"SpringDataREST - exposingRepository - path - custom": "The name of the resource and the path can be customized by using @RepositoryRestResource on the repository interface."

}