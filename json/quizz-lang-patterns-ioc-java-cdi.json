{
	
	"CDI": "SECTION",
	"CDI - CDI - JSR-330": "",
	"CDI - CDI - JSR-250": "",
	"CDI - CDI - 1.0": "",
	"CDI - CDI - 2.0": "",
	"CDI - CDI - 3.0": "",
	"CDI - URL": "https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0",

	"Container": "SECTION",
	"Container - JavaContainer": "In Java SE, the CDI container must be explicitly bootstrapped by the user.",
	"Container - JavaContainer - SeContainerInitializer": "This is performed by the SeContainerInitializer abstract class and its static method newInstance().",
	"Container - JavaContainer - SeContainerInitializer - service": "SeContainerInitializer is a ServiceProvider of the service jakarta.enterprise.inject.se.SeContainerInitializer declared in META-INF/services. This class allows a user to configure the CDI container before it is bootstrapped.",
	"Container - JavaContainer - Lifecycle - Create": "In Java SE, the CDI container must be explicitly bootstrapped by the user. This is performed by the SeContainerInitializer abstract class and its static method newInstance().",
	"Container - JavaContainer - Lifecycle - Initialize": "The SeContainerInitializer.initialize() method bootstraps the container and returns a SeContainer instance.",
	"Container - JavaContainer - Lifecycle - Shutdown": "User can shutdown the container manually by calling the close() method on SeContainer or automatically using try-with-resources since SeContainer extends AutoCloseable interface.",
	"Container - JakartaContainer": ".",
	
	"@Stereotype": "SECTION",
	"@Stereotype ": "A stereotype in CDI is a meta-annotation that groups together: Scope, Interceptor bindings, Other stereotypes, Additional qualifiers",
	"@Stereotype - Declaration - @ManagedBean - JSR-250": "A managed bean is a bean that is implemented by a Java class. This class is called the bean class of the managed bean. The basic lifecycle and semantics of managed beans are defined by the Managed Beans specification.",
	"@Stereotype - Declaration - @Named - JSR-330": "@Named belongs to javax.inject API. It marks class to be autodetected as a bean and requires you to specify a name.",
	"@Stereotype - Resolution - Classes - Inject - Primary @Inject (JSR-330)": "@Inject is part of a Java CDI (Contexts and Dependency Injection)",
	"@Stereotype - Resolution - Classes - Inject - Primary @Resource (JSR-250)": "Spring also supports injection by using the JSR-250 @Resource annotation on fields or bean property setter methods. @Resource(name='myMovieFinder') public void setMovieFinder(MovieFinder movieFinder) { ... }",
	"@Stereotype - Resolution - Classes - Inject - Primary @Qualifier": "A qualifier type represents some client-visible semantic associated with a type that is satisfied by some implementations of the type (and not by others). For example, we could introduce qualifier types representing synchronicity and asynchronicity.",
	"@Stereotype - Resolution - Classes - Inject - Primary @Qualifier - BuiltIn - @Named": ".",
	"@Stereotype - Resolution - Classes - Inject - Primary @Qualifier - BuiltIn - @Any": ".",
	"@Stereotype - Resolution - Classes - Inject - Primary @Qualifier - BuiltIn - @Defaul": "If a bean does not explicitly declare a qualifier other than @Named or @Any, the bean has exactly one additional qualifier, of type @Default. This is called the default qualifier.",
	"@Stereotype - Resolution - Classes - Inject - Primary @Qualifier - Custom": "A qualifier type is a Java annotation defined as @Retention(RUNTIME). Typically a qualifier type is defined as @Target({METHOD, FIELD, PARAMETER, TYPE}). A qualifier type may be declared by specifying the @jakarta.inject.Qualifier meta-annotation.",
	"@Stereotype - Resolution - Classes - Inject - Primary @Alternative": "An alternative is a bean that must be explicitly selected if it should be available for lookup, injection or name resolution.",
	"@Stereotype - @Model": "",
	"@Stereotype - @Mock": "",

	"Beans": "SECTION",
	"Beans ": "A bean is a source of contextual objects which define application state and/or logic. These objects are called contextual instances of the bean. Every bean in the system is represented by an instance of the Bean interface.",
	"Beans - Types - Class": "A bean type may be an interface, a concrete class or an abstract class, and may be declared final or have final methods.",
	"Beans - Types - ParametrizedType": "A bean type may be a parameterized type with actual type parameters and type variables.",
	"Beans - Types - ArrayType": "A bean type may be an array type. Two array types are considered identical only if the element type is identical.",
	"Beans - Types - PrimitiveType": "A bean type may be a primitive type. Primitive types are considered to be identical to their corresponding wrapper types in java.lang.",
	"Beans - Types - RawType": "A bean type may be a raw type.",
	"Beans - NoTypes - TypeVariable": "A type variable is not a legal bean type.",
	"Beans - NoTypes - ParameterizedWidlcardType": "A parameterized type that contains a wildcard type parameter is not a legal bean type.",
	"Beans - NoTypes - ArrayNoLegalType": "An array type whose component type is not a legal bean type.",
	"Beans - @Produces": "",
	"Beans - Requirements": "In the context of Java, a bean is a reusable software component that adheres to specific conventions (e.g., having a no-argument constructor, being serializable, and providing getters and setters).",
	"Beans - Requirements - Inner": "It is not an inner class.",
	"Beans - Requirements - NoAbstract": "It is a non-abstract class, or is annotated @Decorator.",
	"Beans - Requirements - Extension": "It does not implement jakarta.enterprise.inject.spi.Extension.",
	"Beans - Requirements - @Vetoed": "It is not annotated @Vetoed or in a package annotated @Vetoed.",
	"Beans - Requirements - Constructor": "It has an appropriate constructor - either: the class has a constructor with no parameters, or the class declares a constructor annotated @Inject.",

	"DI": "SECTION",
	"DI - BeanManager": "",
	"DI - Lifecycle": "",
	"DI - Lifecycle - Contextual": "Bean interface is a subtype of Contextual.",
	"DI - Lifecycle - Contextual - create()": "When the create() method of the Bean object that represents a managed bean is called, the container obtains an instance of the bean, calling the bean constructor, and performing dependency injection.",
	"DI - Lifecycle - Contextual - destroy()": "When the destroy() method is called, the container destroys the instance, and any dependent objects.",
	"DI - Lifecycle - @PostConstruct - JSR-250": "",
	"DI - Lifecycle - @PreDestroy - JSR-250": "",
	"DI - Lifecycle - @Disposes": "",
	"DI - Scope": ".",
	"DI - Scope - @RequestScoped": "The request context is provided by a built-in context object for the built-in scope type @RequestScoped.",
	"DI - Scope - @SessionScoped": "The session context is provided by a built-in context object for the built-in passivating scope type @SessionScoped.",
	"DI - Scope - @ApplicationScoped": "The application context is provided by a built-in context object for the built-in scope type @ApplicationScoped.",
	"DI - Scope - @ConversationScoped": "The conversation context is provided by a built-in context object for the built-in passivating scope type @ConversationScoped.",
	"DI - Scope - @Dependent": "Finally, there is a @Dependent pseudo-scope for dependent objects. If an interceptor or decorator has any scope other than @Dependent, non-portable behavior results.",
	"DI - Scope - Default": ".",
	"DI - Scope - Default - @Dependent": "If the bean does not declare any stereotype with a declared default scope, the default scope for the bean is @Dependent.",
	"DI - Scope - Default - Same": "If all stereotypes declared by the bean that have some declared default scope have the same default scope, then that scope is the default scope for the bean.",
	"DI - Scope - Default - No": "If there are two different stereotypes declared by the bean that declare different default scopes, then there is no default scope and the bean must explicitly declare a scope. If it does not explicitly declare a scope, the container automatically detects the problem and treats it as a definition error.",
	"DI - Method": ".",

	"Environment ": "SECTION",
	"Environment": "The Environment is an abstraction integrated in the container that models two key aspects of the application environment: profiles and properties.",

	"Interceptors": "SECTION",
	"Interceptors ": "Managed beans support interception. Interceptors are used to separate cross-cutting concerns from business logic.",
	"Interceptors - @Priority": "override the interceptor order defined by the @Priority annotation.",
	"Interceptors - Binding": ".",
	"Interceptors - Binding - Stereotype": "Interceptor bindings may be applied to a stereotype by annotating the stereotype annotation. An interceptor binding declared by a stereotype is inherited by any bean that declares that stereotype."

}