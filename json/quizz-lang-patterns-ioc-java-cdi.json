{
	
	"CDI": "SECTION",
	"CDI - CDI - JSR-250": "",
	"CDI - CDI - JSR-330": "JSR-330 (javax.inject) defines a minimal DI standard (@Inject, @Singleton, etc.).",
	"CDI - CDI - JSR-365": "CDI (JSR-365) builds on JSR-330 and adds enterprise features (scopes, events, interceptors).",
	"CDI - CDI - 1.0 - Dec05": "Released as part of Java EE 6 in December 2009.",
	"CDI - CDI - 1.1 - May13": "Released with Java EE 7 in May 2013.",
	"CDI - CDI - 1.2 - 2014": "A minor update released in 2014 (maintenance release).",
	"CDI - CDI - 2.0 - Sep17": "Released as part of Java EE 8 in September 2017, introducing major features like CDI in Java SE.",
	"CDI - CDI - 3.0 - Nov20": "Released under Jakarta EE (after the move from Java EE) in November 2020, with improvements for cloud-native development.",
	"CDI - CDI - 4.0 - Sep22": "Released as part of Jakarta EE 10 in September 2022, further enhancing modularity and compatibility.",
	"CDI - CDI - 4.1 - Mar24": ".",
	"CDI - URL": "https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html",

	"Container": "SECTION",
	"Container - Lifecycle - Initialization": "",
	"Container - Lifecycle - BeanDiscovery": "",
	"Container - Lifecycle - BeanDiscovery - TypeDiscovery": "",
	"Container - Lifecycle - BeanDiscovery - ExcludeFilters": "",
	"Container - Lifecycle - BeanDiscovery - TrimmedBeanArchive": "",
	"Container - Lifecycle - BeanDiscovery - Discovery": "",
	"Container - Lifecycle - Shutdown": "",
	"Container - JavaContainer": "In Java SE, the CDI container must be explicitly bootstrapped by the user.",
	"Container - JavaContainer - SeContainerInitializer": "This is performed by the SeContainerInitializer abstract class and its static method newInstance().",
	"Container - JavaContainer - SeContainerInitializer - service": "SeContainerInitializer is a ServiceProvider of the service jakarta.enterprise.inject.se.SeContainerInitializer declared in META-INF/services. This class allows a user to configure the CDI container before it is bootstrapped.",
	"Container - JavaContainer - Lifecycle - Create": "In Java SE, the CDI container must be explicitly bootstrapped by the user. This is performed by the SeContainerInitializer abstract class and its static method newInstance().",
	"Container - JavaContainer - Lifecycle - Initialize": "The SeContainerInitializer.initialize() method bootstraps the container and returns a SeContainer instance.",
	"Container - JavaContainer - Lifecycle - Shutdown": "User can shutdown the container manually by calling the close() method on SeContainer or automatically using try-with-resources since SeContainer extends AutoCloseable interface.",
	"Container - JakartaContainer": ".",
	
	"@Stereotype": "SECTION",
	"@Stereotype ": "A stereotype in CDI is a meta-annotation that groups together: Scope, Interceptor bindings, Other stereotypes, Additional qualifiers",
	"@Stereotype - Stereotype - Included": "A stereotype encapsulates any combination of: a default scope, and a set of interceptor bindings.",
	"@Stereotype - Stereotype - Declaration - @Stereotype": "A stereotype may be declared by specifying the @jakarta.enterprise.inject.Stereotype meta-annotation.",
	"@Stereotype - Stereotype - Declaration - @Retention": "A bean stereotype is a Java annotation defined as @Retention(RUNTIME)",
	"@Stereotype - Stereotype - Declaration - @Target": "Typically a bean stereotype is defined as @Target({TYPE, METHOD, FIELD}), @Target(TYPE), @Target(METHOD), @Target(FIELD) or @Target({METHOD, FIELD}).",
	"@Stereotype - Stereotype - Declaration - Scope": "The default scope of a stereotype is defined by annotating the stereotype with a scope type. A stereotype may declare at most one scope. If a stereotype declares more than one scope, the container automatically detects the problem and treats it as a definition error.",
	"@Stereotype - Stereotype - Declaration - @ManagedBean - JSR-250 - deprecated": "A managed bean is a bean that is implemented by a Java class. This class is called the bean class of the managed bean. The basic lifecycle and semantics of managed beans are defined by the Managed Beans specification.",
	"@Stereotype - Stereotype - Declaration - @Named - JSR-330": "@Named('currentOrder') belongs to javax.inject API. It marks class to be autodetected as a bean and requires you to specify a name.",
	"@Stereotype - Stereotype - Declaration - @Named - Spring": "Equivalent to @Component in Spring",
	"@Stereotype - Stereotype - Declaration - @Alternative": "A stereotype may declare an @Alternative annotation, which specifies that every bean with the stereotype is an alternative.",
	"@Stereotype - Stereotype - Requirements": "In the context of Java, a bean is a reusable software component that adheres to specific conventions (e.g., having a no-argument constructor, being serializable, and providing getters and setters).",
	"@Stereotype - Stereotype - Requirements - Inner": "It is not an inner class.",
	"@Stereotype - Stereotype - Requirements - NoAbstract": "It is a non-abstract class, or is annotated @Decorator.",
	"@Stereotype - Stereotype - Requirements - Extension": "It does not implement jakarta.enterprise.inject.spi.Extension.",
	"@Stereotype - Stereotype - Requirements - @Vetoed": "It is not annotated @Vetoed or in a package annotated @Vetoed.",
	"@Stereotype - Stereotype - Requirements - Constructor": "It has an appropriate constructor - either: the class has a constructor with no parameters, or the class declares a constructor annotated @Inject.",
	"@Stereotype - Stereotype - Extension": "A managed bean may extend another managed bean.",
	"@Stereotype - Stereotype - Extension - @Specializes": "If a bean class of a managed bean X is annotated @Specializes, then the bean class of X must directly extend the bean class of another managed bean Y. Then X directly specializes.",
	"@Stereotype - Stereotype - BuiltIn - @Model": "",
	"@Stereotype - Stereotype - BuiltIn - @Mock": "",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Inject (JSR-330)": "@Inject is part of a Java CDI (Contexts and Dependency Injection)",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Resource (JSR-250)": "Spring also supports injection by using the JSR-250 @Resource annotation on fields or bean property setter methods. @Resource(name='myMovieFinder') public void setMovieFinder(MovieFinder movieFinder) { ... }",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Qualifier": "A qualifier type represents some client-visible semantic associated with a type that is satisfied by some implementations of the type (and not by others). For example, we could introduce qualifier types representing synchronicity and asynchronicity.",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Qualifier - BuiltIn - @Named": ".",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Qualifier - BuiltIn - @New": "The @New qualifier was deprecated in CDI 1.1. CDI applications are encouraged to inject @Dependent scoped beans instead.",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Qualifier - BuiltIn - @Any": ".",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Qualifier - BuiltIn - @Defaul": "If a bean does not explicitly declare a qualifier other than @Named or @Any, the bean has exactly one additional qualifier, of type @Default. This is called the default qualifier.",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Qualifier - Custom": "A qualifier type is a Java annotation defined as @Retention(RUNTIME). Typically a qualifier type is defined as @Target({METHOD, FIELD, PARAMETER, TYPE}). A qualifier type may be declared by specifying the @jakarta.inject.Qualifier meta-annotation.",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Qualifier - Multiple": "An injection point may even specify multiple qualifiers.",
	"@Stereotype - Dependencies - Resolution - Classes - Inject - Primary @Alternative": "An alternative is a bean that must be explicitly selected if it should be available for lookup, injection or name resolution.",

	"Beans": "SECTION",
	"Beans ": "A bean is a source of contextual objects which define application state and/or logic. These objects are called contextual instances of the bean. Every bean in the system is represented by an instance of the Bean interface.",
	"Beans - Types - Valid - Class": "A bean type may be an interface, a concrete class or an abstract class, and may be declared final or have final methods.",
	"Beans - Types - Valid - ParametrizedType": "A bean type may be a parameterized type with actual type parameters and type variables.",
	"Beans - Types - Valid - ArrayType": "A bean type may be an array type. Two array types are considered identical only if the element type is identical.",
	"Beans - Types - Valid - PrimitiveType": "A bean type may be a primitive type. Primitive types are considered to be identical to their corresponding wrapper types in java.lang.",
	"Beans - Types - Valid - RawType": "A bean type may be a raw type.",
	"Beans - Types - Valid - @Typed": "The bean types of a bean may be restricted by annotating the bean class or producer method or field with the annotation @jakarta.enterprise.inject.Typed. When a @Typed annotation is explicitly specified, only the types whose classes are explicitly listed using the value member, together with java.lang.Object, are bean types of the bean.",
	"Beans - Types - NoValid - TypeVariable": "A type variable is not a legal bean type.",
	"Beans - Types - NoValid - ParameterizedWidlcardType": "A parameterized type that contains a wildcard type parameter is not a legal bean type.",
	"Beans - Types - NoValid - ArrayNoLegalType": "An array type whose component type is not a legal bean type.",
	"Beans - Types - Casting": "A client of a bean may typecast its contextual reference to a bean to any bean type of the bean which is a Java interface. However, the client may not in general typecast its contextual reference to an arbitrary concrete bean type of the bean. For example, if our managed bean was injected to the following field: Shop<Book> bookShop = (Shop<Book>) biz;",
	"Beans - BeanDefinition": "",
	"Beans - BeanDefinition - Config-Based - BeanArchive": "Bean classes of enabled beans must be deployed in bean archives.",
	"Beans - BeanDefinition - Config-Based - BeanArchive - DiscoveryMode": "A bean archive has a bean discovery mode of all, annotated or none. A bean archive which contains a beans.xml file with no version has a default bean discovery mode of all. A bean archive which contains a beans.xml file with version 1.1 (or later) must specify the bean-discovery-mode attribute. The default value for the attribute is annotated.",
	"Beans - BeanDefinition - Config-Based - BeanArchive - explicit": "An explicit bean archive is an archive which contains a beans.xml file: with a version number of 1.1 (or later), with the bean-discovery-mode of all, or, with no version number, or, that is an empty file.",
	"Beans - BeanDefinition - Config-Based - BeanArchive - implicit": "An implicit bean archive is any other archive which contains one or more bean classes with a bean defining annotation.",
	"Beans - BeanDefinition - Config-Based - BeanArchive - beans.xml": "The beans.xml file must be named: src/main/resources/META-INF/beans.xml. Even if this file doesn’t contain any specific DI directives at all, it’s required for getting CDI up and running.",
	"Beans - BeanDefinition - Java-based - InjectionPoints": "",
	"Beans - BeanDefinition - Java-based - InjectionPoints - Constructor": "Any parameter of a bean constructor, bean initializer method, producer method or disposer method.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - Constructor - Features": "When the container instantiates a bean class, it calls the bean constructor. The bean constructor is a default-access, public, protected or private constructor of the bean class.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - Constructor - @Inject": "The bean constructor may be identified by annotating the constructor @Inject.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - Constructor - Params": "A bean constructor may have any number of parameters. All parameters of a bean constructor are injection points.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - Fields": "Any injected field of a bean class.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - Fields - Features": "An injected field is a non-static, non-final field of a bean class or of any other classes supporting injection.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - Fields - @Inject": "An injected field may be declared by annotating the field @jakarta.inject.Inject.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - @Inherited": "A bean may inherit type-level metadata and members from its superclasses.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - @Inherited ": ".",
	"Beans - BeanDefinition - Java-based - InjectionPoints - InitializerMethods": "An initializer method is a default-access, public, protected or private, non-abstract, non-static, non-generic method of a bean class or of any other classes supporting injection.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - InitializerMethods - Multiple": "A bean class may declare multiple (or zero) initializer methods.",
	"Beans - BeanDefinition - Java-based - InjectionPoints - Observer": "Any parameter of an observer method, except for the event parameter.",
	"Beans - BeanDefinition - Java-based - @Produces": "",
	"Beans - BeanDefinition - Java-based - @Produces - Method": "A producer method acts as a source of objects to be injected, where: the objects to be injected are not required to be instances of beans, or the concrete type of the objects to be injected may vary at runtime, or the objects require some custom initialization that is not performed by the bean constructor.",
	"Beans - BeanDefinition - Java-based - @Produces - Method - Access": "A producer method must be a default-access, public, protected or private, non-abstract method of a managed bean class.",
	"Beans - BeanDefinition - Java-based - @Produces - Method - Static": "A producer method may be either static or non-static.",
	"Beans - BeanDefinition - Java-based - @Produces - Method - @Specializes": "If a producer method X is annotated @Specializes, then it must be non-static and directly override another producer method Y. Then X directly specializes Y",
	"Beans - BeanDefinition - Java-based - @Produces - Field": "A producer field is a slightly simpler alternative to a producer method.",
	"Beans - BeanDefinition - Java-based - @Produces - Field - Access": "A producer field must be a default-access, public, protected or private, field of a managed bean class.",
	"Beans - BeanDefinition - Java-based - @Produces - Field - Static": "A producer field may be either static or non-static.",
	"Beans - BeanDefinition - Java-based - @Disposes": ".",
	"Beans - BeanDefinition - Java-based - @Disposes - Method": "A disposer method allows the application to perform customized cleanup of an object returned by a producer method or producer field.",
	"Beans - BeanDefinition - Java-based - @Disposes - Method - Access": "A disposer method must be a default-access, public, protected or private, non-abstract method of a managed bean class.",
	"Beans - BeanDefinition - Java-based - @Disposes - Method - Static": "A disposer method may be either static or non-static.",
	"Beans - BeanDefinition - Java-based - @Disposes - Method - Multiple": "A bean may declare multiple disposer methods.",
	"Beans - BeanDefinition - Java-based - @Disposes - Method - Param": "Each disposer method must have exactly one disposed parameter, of the same type as the corresponding producer method return type or producer field type.",
	"Beans - PropertyResolution - @Named('name')": "@Inject @Named('myUserService') private UserService userService;  <---  @Named('myUserService) public class UserService { ... }",

	"DI": "SECTION",
	"DI - BeanManager": "",
	"DI - Lifecycle": "",
	"DI - Lifecycle - Contextual": "Bean interface is a subtype of Contextual.",
	"DI - Lifecycle - Contextual - create()": "When the create() method of the Bean object that represents a managed bean is called, the container obtains an instance of the bean, calling the bean constructor, and performing dependency injection.",
	"DI - Lifecycle - Contextual - destroy()": "When the destroy() method is called, the container destroys the instance, and any dependent objects.",
	"DI - Lifecycle - @PostConstruct - JSR-250": "",
	"DI - Lifecycle - @PreDestroy - JSR-250": "",
	"DI - Scope": "All beans have a scope. The scope of a bean determines the lifecycle of its instances, and which instances of the bean are visible to instances of other beans.",
	"DI - Scope - Scopes": "A scope type is represented by an annotation type. There are five standard scope types defined by this specification, all defined in the package jakarta.enterprise.context.",
	"DI - Scope - Scopes - @ApplicationScoped": "Singleton in Spring. The application context is provided by a built-in context object for the built-in scope type @ApplicationScoped.",
	"DI - Scope - Scopes - @Singleton": "from JSR-330. Same that @ApplicationScoped",
	"DI - Scope - Scopes - @Dependent": "Prototype in Spring. Finally, there is a @Dependent pseudo-scope for dependent objects. If an interceptor or decorator has any scope other than @Dependent, non-portable behavior results.",
	"DI - Scope - Scopes - @RequestScoped": "The request context is provided by a built-in context object for the built-in scope type @RequestScoped.",
	"DI - Scope - Scopes - @SessionScoped": "The session context is provided by a built-in context object for the built-in passivating scope type @SessionScoped.",
	"DI - Scope - Scopes - @ConversationScoped": "The conversation context is provided by a built-in context object for the built-in passivating scope type @ConversationScoped.",
	"DI - Scope - Scopes - Custom": "A scope type is a Java annotation defined as @Retention(RUNTIME). Typically a scope type is defined as @Target({TYPE, METHOD, FIELD}). All scope types must also specify the @jakarta.inject.Scope or @jakarta.enterprise.context.NormalScope meta-annotation. A scope type must not have any attributes. If a scope type has attributes non-portable behavior results.",
	"DI - Scope - Default": ".",
	"DI - Scope - Default - @Dependent": "If the bean does not declare any stereotype with a declared default scope, the default scope for the bean is @Dependent.",
	"DI - Scope - Default - Same": "If all stereotypes declared by the bean that have some declared default scope have the same default scope, then that scope is the default scope for the bean.",
	"DI - Scope - Default - No": "If there are two different stereotypes declared by the bean that declare different default scopes, then there is no default scope and the bean must explicitly declare a scope. If it does not explicitly declare a scope, the container automatically detects the problem and treats it as a definition error.",

	"AOP": "SECTION",
	"AOP - Decorators ": ".",
	"AOP - Interceptors ": "Managed beans support interception. Interceptors are used to separate cross-cutting concerns from business logic.",
	"AOP - Interceptors - @Priority": "override the interceptor order defined by the @Priority annotation.",
	"AOP - Interceptors - Binding": ".",
	"AOP - Interceptors - Binding - Stereotype": "Interceptor bindings may be applied to a stereotype by annotating the stereotype annotation. An interceptor binding declared by a stereotype is inherited by any bean that declares that stereotype."

}