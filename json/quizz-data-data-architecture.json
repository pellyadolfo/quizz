{

	"CQRS": ".",
	"CQRS ": "CQRS allows different techniques to be used for writing data (Write Side) and reading data (Read Side).",

	"EventSourcing": ".",
	"EventSourcing ": "Form of CQRS. Instead of storing the current state of a model, append-only event stores are used to record the full series of actions taken on a model.",
	"EventSourcing - rehydration": "When a new Command occurs, the current state of the Model/Entity is ‘rehydrated’ by replaying all of the events that have ever happened for that instance.",

	"DDD": ".",
	"DDD - description": ".",
	"DDD - components - BoundedContext": "Bounded Contexts are used to represent well-defined logical boundaries around concepts within an application. They represent a distinct area of the application where a specific domain model is used, and where the terminology, rules, and data representations are consistent and cohesive.",
	"DDD - components - Entities": "Entities are objects that have a distinct identity that runs through time and different states. The identity is usually represented by an ID.",
	"DDD - components - ValueObjects": "Value objects are objects that are defined by their attributes. They do not have a distinct identity.",
	"DDD - components - Repositories": "Repositories are used to retrieve and store entities. They act as a collection of entities.",
	"DDD - components - Factories": "Factories are used to create complex objects and aggregates.",
	"DDD - components - Aggregates": "Aggregates are clusters of entities and value objects that are treated as a single unit.",
	"DDD - components - Services": "Services contain business logic that doesn’t naturally fit within an entity or value object.",
	"DDD - components - Services - stateless": "1.Stateless: Services are typically stateless. They do not hold any state themselves but operate on the state of entities and value objects.",
	"DDD - components - Services - Encapsulation": "2.Encapsulation of Business Logic: They encapsulate business logic that spans multiple entities or value objects or that doesn’t fit neatly within a single entity or value object.",
	"DDD - components - Services - Coordination": "3.Coordination: They often coordinate interactions between multiple entities and value objects.",
	"DDD - components - DomainEvents": "Domain events are used to communicate changes in the state of the business.",
	"DDD - components - DomainEvents - published": "Where Domain Events Are Published:",
	"DDD - components - DomainEvents - published - EventBus": "1.Event Bus: Domain events are often published to an in-memory event bus within the application. This allows other parts of the application to subscribe to and handle these events. Since it is in-memory, the events are ephemeral and will be lost if the application restarts or crashes. It is suitable for scenarios where events need to be processed quickly and do not require persistence, such as inter-component communication within a single application instance.",
	"DDD - components - DomainEvents - published - EventStore": "2.Event Store: For more complex scenarios, domain events can be published to an event store, such as AWS EventBridge, Kafka, or a custom event store. This allows for durable storage and replay of events.",
	"DDD - components - DomainEvents - published - MessageBrokers": "3.Message Brokers: Domain events can also be published to message brokers like RabbitMQ or AWS SNS/SQS for asynchronous processing and integration with other systems."

}