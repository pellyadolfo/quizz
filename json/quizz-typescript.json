{
	"ts types": "SECTION",
	"ts Types - type": "Types allow you to create complex types by combining existing types, union types, intersection types, and even utility types.",
	"ts Types - assign - satisfies": "TypeScript satisfies operator allow developers to check and validate the value of a variable against a given type.",
	"ts Types - assign - :": "The : tells the variable will always be this type. const obj: Record<string, string> = {}",
	"ts Types - assign - as": "Third way to declare type is using as annotation, I will really suggest not to use this way of declaring types since this is literally like telling lie to TypeScript.",
	"ts Types - assign - infer": "not annotating and letting TS infer it.",
	"ts Types - TypeGuards": "A type guard is some expression that performs a runtime check that guarantees the type in some scope.",
	"ts Types - TypeGuards - typeof": "function isNumber(x: any): x is number { return typeof x === 'number'; }",
	"ts Types - TypeGuards - instanceof": "",
	"ts Types - TypeGuards - custom": "To define a type guard, we simply need to define a function whose return type is a type predicate:. function isFish(pet: Fish | Bird): pet is Fish { return (pet as Fish).swim !== undefined; }",
	"ts Types - TypeAliases": "Type aliases create a new name for a type. Type aliases are sometimes similar to interfaces, but can name primitives, unions, tuples, and any other types that you’d otherwise have to write by hand.",
	"ts Types - Generics": ".",

	"Interfaces": "SECTION",
	"Interfaces - contract": "Interfaces are a core feature of TypeScript. They allow you to define a contract for your objects.",
	"Interfaces - vs Types - extensibility": "One of the most significant differences is how you extend them. Interfaces are built with extension in mind. You can easily extend an interface using the extends keyword. This makes interfaces a natural choice when you're working with object-oriented design patterns. Types, on the other hand, are more flexible but less formal in their extensibility. You can’t directly extend a type in the same way, but you can achieve similar results using intersection types:",
	"Interfaces - vs Types - merging": "Another difference is that interfaces can be merged, while types cannot. This is particularly useful when you’re working with third-party libraries or want to add additional properties to an existing interface.:",


	"Files - .d.ts": "Their purpose is to hold declarations (not implementations) and public types. Having a single add.ts file, containing both the declaration and implementation, is the equivalent of having the add.d.ts and add.js files defined separately. This means you don’t need to worry about organizing declaration files with their respective implemention files, which is great for developer experience.",
	"Files - .d.ts - autogenerate": "You can simply auto-generate .d.ts files from your .ts files, just by changing a few settings in your tsconfig.json 'compilerOptions': { 'declaration': true } and package.json 'main': 'dist/index.js', 'types': 'dist/index.d.ts',     ",

	"Props Chaining": "",
	"Props Chaining - optional": "example?.a?.[0]"

}