{
	"DataTypes": "SECTION",
	"DataTypes - type": "Types allow you to create complex types by combining existing types, union types, intersection types, and even utility types.",
	"DataTypes - assign - satisfies": "TypeScript satisfies operator allow developers to check and validate the value of a variable against a given type.",
	"DataTypes - assign - :": "The : tells the variable will always be this type. const obj: Record<string, string> = {}",
	"DataTypes - assign - as": "Third way to declare type is using as annotation, I will really suggest not to use this way of declaring types since this is literally like telling lie to TypeScript.",
	"DataTypes - assign - infer": "not annotating and letting TS infer it.",
	"DataTypes - TypeGuards": "A type guard is some expression that performs a runtime check that guarantees the type in some scope.",
	"DataTypes - TypeGuards - typeof": "function isNumber(x: any): x is number { return typeof x === 'number'; }",
	"DataTypes - TypeGuards - instanceof": "",
	"DataTypes - TypeGuards - custom": "To define a type guard, we simply need to define a function whose return type is a type predicate:. function isFish(pet: Fish | Bird): pet is Fish { return (pet as Fish).swim !== undefined; }",
	"DataTypes - TypeAliases": "Type aliases create a new name for a type. Type aliases are sometimes similar to interfaces, but can name primitives, unions, tuples, and any other types that you’d otherwise have to write by hand.",
	"DataTypes - Generics": ".",
	"DataTypes - Generics - Partial<T>": "Partial<T> constructs a type that makes all properties of the given type T optional.",
	"DataTypes - Generics - Required<T>": "Required<T> constructs a type that makes all properties of the given type T required.",
	"DataTypes - Generics - Readonly<T>": "Readonly<T> makes all properties of the type T immutable, i.e., they cannot be reassigned.",
	"DataTypes - Generics - Record<K, T>": "Record<K, T> constructs a type with keys of type K and values of type T.",
	"DataTypes - Generics - Pick<T, K>": "Pick<T, K> constructs a type by picking a set of properties K from T.",
	"DataTypes - Generics - Omit<T, K>": "Omit<T, K> constructs a type by removing a set of properties K from T.",
	"DataTypes - Generics - ReturnType<T>": "ReturnType<T> extracts the return type of a function type T.",
	"DataTypes - Generics - Parameters<T>": "Parameters<T> constructs a tuple type from the types used in the parameters of a function type T.",
	"DataTypes - Generics - InstanceType<T>": "InstanceType<T> constructs a type consisting of the instance type of a constructor function type T.",
	"DataTypes - Generics - NonNullable<T>": "NonNullable<T> constructs a type by excluding null and undefined from T.",
	"DataTypes - Generics - Awaited<T>": "Awaited<T> unwraps the type T if it's a promise.",
	"DataTypes - Generics - ThisType<T>": "ThisType<T> allows you to specify the type of this within an object or class.",
	"DataTypes - Generics - Indexed Access Types": "Indexed Access Types allow you to access a specific property type of a type T using a key K.",
	"DataTypes - Generics - keyof T": "keyof T extracts the keys of type T as a union of string literals.",
	"DataTypes - Generics - Exclude<T, U>": "Exclude<T, U> constructs a type by excluding from T all union members that are assignable to U.",
	"DataTypes - Generics - Extract<T, U>": "Extract<T, U> constructs a type by extracting from T all union members that are assignable to U.",
	"DataTypes - Generics - Template Literal Types": "Template Literal Types allow you to create types by combining string literals and union types.",
	"DataTypes - Generics - Conditional Types": "Conditional Types allow you to choose one of two types based on a condition expressed as a type relationship.",
	"DataTypes - Generics - Infer": "The infer keyword allows for type inference in conditional types.",
	"DataTypes - Generics - Decorator": "Decorators are functions that can modify classes, methods, accessors, or properties.",
	"DataTypes - Interfaces - contract": "Interfaces are a core feature of TypeScript. They allow you to define a contract for your objects.",
	"DataTypes - Interfaces - vs Types - extensibility": "One of the most significant differences is how you extend them. Interfaces are built with extension in mind. You can easily extend an interface using the extends keyword. This makes interfaces a natural choice when you're working with object-oriented design patterns. Types, on the other hand, are more flexible but less formal in their extensibility. You can’t directly extend a type in the same way, but you can achieve similar results using intersection types:",
	"DataTypes - Interfaces - vs Types - merging": "Another difference is that interfaces can be merged, while types cannot. This is particularly useful when you’re working with third-party libraries or want to add additional properties to an existing interface.:",

	"Logic - Conditions - Errors": "https://tomaszs2.medium.com/typescript-5-6-release-candidate-no-more-condition-errors-you-can-skip-type-checking-too-169a782ae30b",
	"Logic - Patterns - ts-pattern": "https://tauantcamargo.medium.com/how-ts-pattern-can-improve-your-code-readability-d64996841646",

	"Files - .d.ts": "Their purpose is to hold declarations (not implementations) and public types. Having a single add.ts file, containing both the declaration and implementation, is the equivalent of having the add.d.ts and add.js files defined separately. This means you don’t need to worry about organizing declaration files with their respective implemention files, which is great for developer experience.",
	"Files - .d.ts - autogenerate": "You can simply auto-generate .d.ts files from your .ts files, just by changing a few settings in your tsconfig.json 'compilerOptions': { 'declaration': true } and package.json 'main': 'dist/index.js', 'types': 'dist/index.d.ts',     ",

	"Props Chaining": "",
	"Props Chaining - optional": "example?.a?.[0]"

}