{

	"Services - Design": "",
	"Services - Design - APIFirst": "The API-first approach, also known as 'design-first' emphasizes the design and documentation of the API as the primary starting point for development. In this approach, the API contract is defined upfront, specifying the resources, endpoints, data structures, and communication protocols before writing any code.",
	"Services - Design - APIFirst - DefineAPIContract": "Create a detailed specification of the API using tools like OpenAPI (formerly Swagger), API Blueprint, or RAML. This specification serves as a contract between the API provider and consumers, ensuring a clear understanding of the API’s functionality and behavior.",
	"Services - Design - APIFirst - RefineAPIContract": "Collaborate with stakeholders, including product owners, developers, and potential consumers, to review and refine the API contract until it meets the required functionality and adheres to best practices.",
	"Services - Design - APIFirst - GenerateClientLibraries": "Use the API specification to automatically generate client libraries, documentation, and other artifacts that facilitate API consumption and integration.",
	"Services - Design - APIFirst - ImplementAPI:": "With the contract in place, developers can begin implementing the API logic, adhering strictly to the defined contract.",
	"Services - Design - CodeFirst:": "In contrast to the API-first approach, the code-first approach, also known as 'implementation-first' focuses on writing the application code first and then generating the API contract from the implemented code. This approach is often preferred when the application logic is well-understood, and the API is primarily an interface for exposing the existing functionality.",
	"Services - Design - CodeFirst - DevelopApplicationLogic:": "Write the application code, including business logic, data models, and other components, without initially considering the API.",
	"Services - Design - CodeFirst - DefineAPIContract:": "Use code annotations, decorators, or other language-specific mechanisms to define the API contract based on the existing code.",
	"Services - Design - CodeFirst - GenerateAPISpecification:": "Tools like Swagger, NSwag, or Swashbuckle analyze the code and generate the API specification (e.g., OpenAPI, Swagger JSON/YAML) based on the defined contract.",
	"Services - Design - CodeFirst - IterateAndRefine:": "Review and refine the generated API specification to ensure it aligns with best practices and meets the desired functionality.",

	"Layer4": "SECTION",
	"Layer4 - Protocols - TCPIP": "",
	"Layer4 - Networking - VPC": "",
	"Layer4 - Networking - VPN": "https://www.linkedin.com/posts/sandip-das-developer_this-is-how-%F0%9D%90%95%F0%9D%90%8F%F0%9D%90%8D-works-and-every-cloud-activity-7318836487989444612-M7IR/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Layer4 - Networking - VPN ": "https://www.linkedin.com/posts/activity-7318807987937030144-xpBu/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Layer4 - Networking - NetworkFirewalls - Layer4": "TCPIP - network firewalls look at data packets and their state.",
	"Layer4 - Networking - ReverseProxy": "A Reverse Proxy is a type of proxy server that retrieves resources on behalf of a client from one or more servers. Operate at the Application Layer,",
	"Layer4 - Networking - ReverseProxy - Location": "It sits between the client and the backend services or servers.",
	"Layer4 - Networking - ReverseProxy - Functions": "A Reverse Proxy focuses more on network-level concerns like load balancing, security, and caching for a wider range of applications.",
	"Layer4 - Networking - ReverseProxy - Functions - TrafficManagement": "Forwards client requests to backend servers.",
	"Layer4 - Networking - ReverseProxy - Functions - Security": "Provides an additional layer of defense (hides the identities of backend servers).",
	"Layer4 - Networking - ReverseProxy - Functions - Security - SSL": "Handles SSL encryption and decryption, offloading that responsibility from backend servers.",
	"Layer4 - Networking - ReverseProxy - Functions - Caching": "Can cache content to reduce server load and improve performance.",
	"Layer4 - Networking - ForwardProxy": "A Forward Proxy, also known simply as a proxy, acts as an intermediary between client devices and the internet. It facilitates requests from clients to external servers, providing functionalities such as content filtering, access control, and anonymity.",
	"Layer4 - Networking - ForwardProxy - Functions - ContentFiltering": "Organizations use Forward Proxies to control and monitor internet usage within their network. Proxies can filter out malicious content, restrict access to certain websites, and enforce usage policies.",
	"Layer4 - Networking - ForwardProxy - Functions - Anonymity": "Forward Proxies provide a level of anonymity for clients by masking their IP addresses. This is particularly useful for users seeking to access the internet without revealing their identity.",
	"Layer4 - Networking - LoadBalancer": "A Load Balancer is a network distributor at Layer 4 or 7 of OSI Model.",
	"Layer4 - Networking - LoadBalancer - Types - Hardware": "Expensive but provide high performance.",
	"Layer4 - Networking - LoadBalancer - Types - Software": "Cost-effective and flexible (Nginx, HAProxy).",
	"Layer4 - Networking - LoadBalancer - Functions - TrafficDistribution": "Distributes requests across multiple servers.",
	"Layer4 - Networking - LoadBalancer - Functions - HighAvailability": "Prevents overload, ensures uptime, and reroutes traffic on failure.",
	"Layer4 - Networking - LoadBalancer - Functions - Scalability": "Optimizes routing for minimal latency and resource efficiency.",
	"Layer4 - Networking - LoadBalancer - Functions - Types - CLB": "Classic Load Balancer (CLB). CLB operates in Layer 4 and Layer 7.",
	"Layer4 - Networking - LoadBalancer - Functions - Types - ALB": "Application Load Balancer (ALB). ALB operates in Layer 7",
	"Layer4 - Networking - LoadBalancer - Functions - Types - NLB": "Network Load Balancer (NLB). NLB operates in Layer 4",
	"Layer4 - Networking - LoadBalancer - Functions - Types - GLB": "Gateway Load Balancer (GLB). NLB operates in Layer 3",
	"Layer4 - Networking - LoadBalancer - Algorithms": "Optimizing by servers capacity.",
	"Layer4 - Networking - LoadBalancer - Algorithms - RoundRobin": "Sequential manner. Applies to servers relatively equal. Simple but does not account for server load or capability",
	"Layer4 - Networking - LoadBalancer - Algorithms - StickyRoundRobin": "Maintains session persistence. Apps that maintain user sessions. Improves user experience but can lead to uneven load distribution",
	"Layer4 - Networking - LoadBalancer - Algorithms - WeightedRoundRobin": "Assigns a weight to each server based on its capacity or capability. Applies servers of varying capabilities but requires  monitoring and configuration of server weights",
	"Layer4 - Networking - LoadBalancer - Algorithms - LeastResponseTime": "Routes to server with lowest response time. Apps where response time is critical but requires constant monitoring.",
	"Layer4 - Networking - LoadBalancer - Algorithms - LeastBandwith": "Routes to server with least network bandwidth at the moment. Useful when managing network usage is important to prevent congestion.",
	"Layer4 - Networking - LoadBalancer - Algorithms - LeastPackets": "Prioritizes the server that has received the fewest packets, enhancing efficiency.",
	"Layer4 - Networking - LoadBalancer - Algorithms - LeastConnections": "Directs to the server with the fewest active connections (e.g., database connections, file uploads). More efficient use of resources but requires real-time monitoring of active connections.",
	"Layer4 - Networking - LoadBalancer - Algorithms - WeightedLeastConnections": "",
	"Layer4 - Networking - LoadBalancer - Algorithms - Hash": "A hash function determines which server should handle a request (e.g. client's IP address or session ID). Applies to scenarios where user data needs to be kept on the same server.",
	"Layer4 - Networking - LoadBalancer - Algorithms - ContentBased": "Distributes traffic based on the content being requested.",
	"Layer4 - Networking - LoadBalancer - Algorithms - Geographical": "Routes users to the nearest server, minimizing latency.",
	"Layer4 - Networking - LoadBalancer - Algorithms - Layer7": "Looks deeper into the request data, allowing for more intelligent routing.",
	"Layer4 - Networking - LoadBalancer - Algorithms - RequestBased": "Balances traffic according to the rate of incoming requests.",
	"Layer4 - Networking - LoadBalancer - Algorithms - DNS": "Uses DNS to distribute load among multiple servers, enhancing fault tolerance.",
	"Layer4 - Networking - LoadBalancer - Algorithms - Random": "It picks a server at random for each new request. Useful when you don't need to consider server load or differences in server capacity.",
	"Layer4 - Networking - LoadBalancer - UseCases": ".",
	"Layer4 - Networking - LoadBalancer - UseCases - HealthMonitoring": "It checks if services are alive. If one fails, it stops sending traffic there. This keeps users away from broken systems.",
	"Layer4 - Networking - LoadBalancer - UseCases - SSLTermination ": "It handles encryption at the edge. This offloads the heavy SSL work from your backend, making things faster.",
	"Layer4 - Networking - LoadBalancer - UseCases - SessionPersistence ": "It keeps users connected to the same server. Useful for logins, shopping carts, or anything that needs memory of past actions.",
	"Layer4 - Networking - LoadBalancer - UseCases - TrafficDistribution ": "It spreads requests across servers. This avoids overload and keeps response times low.",
	"Layer4 - Networking - LoadBalancer - UseCases - HighAvailability ": "If one server dies, traffic is rerouted. This keeps your app running even when parts fail.",
	"Layer4 - Networking - LoadBalancer - UseCases - Scalability": "It lets you add more servers as demand grows. No downtime needed — just plug and play.",
	"Layer4 - Networking - LoadBalancer - Tools - NGINX": "",
	"Layer4 - Networking - LoadBalancer - Tools - HAProxy": "",
	"Layer4 - Networking - LoadBalancer - Tools - AWS ELB": "",
	"Layer4 - Networking - LoadBalancer - Tools - Ribbon": "",
	"Layer4 - Networking - LoadBalancer - Tools - SpringCloudLoadBalancer": "",

	"Layer7": "SECTION",
	"Layer7 - Protocols - HTTP": "",
	"Layer7 - Protocols - HTTP - keep-alive": "Keep Connections Alive: Enable HTTP keep-alive to avoid re-establishing connections for every request.",
	"Layer7 - Protocols - HTTP2": "HTTP/2 began as the SPDY protocol, developed primarily at Google",
	"Layer7 - Protocols - HTTP2 - Goal": "Reducing server latency",
	"Layer7 - Protocols - HTTP2 - Features - Binary": "binary framing layer. As opposed to HTTP/1.1, which keeps all requests and responses in plain text format, HTTP/2 uses the binary framing layer to encapsulate all messages in binary format, while still maintaining HTTP semantics, such as verbs, methods, and headers.",
	"Layer7 - Protocols - HTTP2 - Features - Headers - compression": "Small files load more quickly than large ones. To speed up web performance, both HTTP/1.1 and HTTP/2 compress HTTP messages to make them smaller. However, HTTP/2 uses a more advanced compression method called HPACK that eliminates redundant information in HTTP header packets. This eliminates a few bytes from every HTTP packet. Given the volume of HTTP packets involved in loading even a single webpage, those bytes add up quickly, resulting in faster loading.",
	"Layer7 - Protocols - HTTP2 - Features - Prioritization": "Stream prioritization not only solves the possible issue of requests competing for the same resource, but also allows developers to customize the relative weight of requests to better optimize application performance.",
	"Layer7 - Protocols - HTTP2 - Features - Multiplexing": "HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it. In contrast, HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource. HTTP/2 does this by splitting data into binary-code messages and numbering these messages so that the client knows which stream each binary message belongs to.",
	"Layer7 - Protocols - HTTP2 - Features - Push": "Server push: Typically, a server only serves content to a client device if the client asks for it. However, this approach is not always practical for modern webpages, which often involve several dozen separate resources that the client must request. HTTP/2 solves this problem by allowing a server to 'push' content to a client before the client asks for it. The server also sends a message letting the client know what pushed content to expect – like if Bob had sent Alice a Table of Contents of his novel before sending the whole thing.",
	"Layer7 - Protocols - HTTP3 - Transport": "Both HTTP/1.1 and HTTP/2 use TCP as their transport, whereas HTTP/3 is based on Google’s QUIC – a transport layer network protocol that implements user space congestion control over UDP (User Datagram Protocol).",

	"Processing": "SECTION",
	"Processing - Servers": "",
	"Processing - Servers - Java - SpringBoot": "",
	"Processing - Servers - Java - Micronaut ": "",
	"Processing - Servers - Java - Quarkus ": "",
	"Processing - Servers - Java - Vert.x: ": "",
	"Processing - Servers - Java - Dropwizard ": "",
	"Processing - Servers - Java - Helidon ": "",
	"Processing - Servers - Java - Lagom ": "",
	"Processing - Servers - Java - KumuluzEE ": "",
	"Processing - Servers - JS - ExpressJS ": "",
	"Processing - Servers - JS - NestJS": ".",
	"Processing - Servers - JS - NestJS - Features - Layers": "Too Many Layers and Abstractions. Nest.js often borrows ideas from Java’s Spring framework — Singletons, Dependency Injection, and so forth. In TypeScript/JavaScript, many of these patterns can be implemented in simpler ways, like exporting instances directly from modules. Nest.js adds multiple layers of “magic” that sometimes feel more burdensome than helpful in a dynamic language.",
	"Processing - Servers - JS - NestJS - Features - Debugging": "Debugging Nightmares. While developing APIs, I encountered stack traces pointing to deeply wrapped compiled JavaScript files. Tracing an error back to the original TypeScript code could become tedious. It slowed me down, especially when quick fixes were needed.",
	"Processing - Servers - JS - NestJS - Features - Dependency": "Version Conflicts and Dependency Chaos. The Node.js ecosystem moves fast. It’s common for one minor library update to break compatibility with another. I faced scenarios where Nest.js would stop building after a minor version change in a secondary dependency — only because TypeScript definitions had shifted. Rolling back versions or hunting down workarounds took time and energy I’d rather spend on new features.",
	"Processing - Servers - JS - Fastify": "",
	"Processing - Servers - JS - Fastify - Features - Structure": "Clear Structure. By dividing code into repositories, services, and controllers, I keep my architecture organized while avoiding unnecessary overhead.",
	"Processing - Servers - JS - Fastify - Features - Debugging": "Simplified Debugging. With fewer decorators and wrappers, errors point more directly to the right place in my TypeScript source.",
	"Processing - Servers - JS - Fastify - Features - Dependency": "Reduced Dependency Headaches. Fewer layers mean less risk of version conflicts. Fastify itself is lightweight, and updates generally go smoothly..",
	"Processing - Servers - Python - Flask": "",
	"Processing - Serverless": "Use a deployment infrastructure that hides any concept of servers (i.e. reserved or preallocated resources)- physical or virtual hosts, or containers. The infrastructure takes your service’s code and runs it. You are charged for each request based on the resources consumed. To deploy your service using this approach, you package the code (e.g. as a ZIP file), upload it to the deployment infrastructure and describe the desired performance characteristics. The deployment infrastructure is a utility operated by a public cloud provider. It typically uses either containers or virtual machines to isolate the services. However, these details are hidden from you. Neither you nor anyone else in your organization is responsible for managing any low-level infrastructure such as operating systems, virtual machines, etc.",
	"Processing - Serverless - Tools - Firebase": "Firebase by Google provides a complete suite of backend services, including real-time databases, authentication, hosting, and cloud functions.",
	"Processing - Serverless - Tools - Susabase": "Often referred to as the open-source alternative to Firebase, Supabase offers a powerful Postgres database, authentication, and real-time capabilities.",
	"Processing - Serverless - Tools - Backendless": "Backendless is a no-code/low-code platform that provides backend features like databases, APIs, and user management.",
	"Processing - Serverless - Tools - Netlify": "Netlify combines frontend hosting with backend-like functionalities, such as serverless functions and database integrations.",
	"Processing - Serverless - Tools - Zapier": "Zapier connects different web applications, automating workflows and reducing the need for custom backend APIs.",
	"Processing - Serverless - Tools - NotionAPI": "Notion’s API allows developers to use its robust database and organization tools as a backend.",
	"Processing - Serverless - Tools - AWSAmplify": "AWS Amplify is a powerful toolset for building serverless applications. It provides backend services like authentication, storage, and APIs without needing to code backend logic.",
	"Processing - Serverless - Tools - Bubble": "Bubble is a no-code platform that lets you build full-stack applications without touching backend code.",
	"Processing - Serverless - Tools - Hasura": "Hasura is a GraphQL engine that lets you build scalable APIs over your databases instantly.",
	"Processing - Serverless - Tools - SpringCloudFunction": "",
	"Processing - Serverless - Tools - AWSLambda": "",
	"Processing - Serverless - Tools - AzureFunctions": ""

}