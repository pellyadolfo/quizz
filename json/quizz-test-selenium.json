{
	"Selenium RC": "SECTION",
	"SeleniumRC (Selenium 1)": "",
	
	"Selenium WebDriver": "SECTION",
	"SeleniumWebDriver (Selenium 2)": "The primary new feature in Selenium 2.0 is the integration of the WebDriver API. WebDriver is designed to provide a simpler, more concise programming interface in addition to addressing some limitations in the Selenium-RC API. Selenium-WebDriver was developed to better support dynamic web pages where elements of a page may change without the page itself being reloaded. WebDriver’s goal is to supply a well-designed object-oriented API that provides improved support for modern advanced web-app testing problems.",
	"SeleniumWebDriver vs SeleniumRC": "Selenium-WebDriver makes direct calls to the browser using each browser’s native support for automation. How these direct calls are made, and the features they support depends on the browser you are using. Information on each ‘browser driver’ is provided later in this chapter. For those familiar with Selenium-RC, this is quite different from what you are used to. Selenium-RC worked the same way for each supported browser. It ‘injected’ javascript functions into the browser when the browser was loaded and then used its javascript to drive the AUT within the browser. WebDriver does not use this technique. Again, it drives the browser directly using the browser’s built in support for automation.",
	"SeleniumWebDriver - Selenium Servers": "You may, or may not, need the Selenium Server, depending on how you intend to use Selenium-WebDriver. If your browser and tests will all run on the same machine, and your tests only use the WebDriver API, then you do not need to run the Selenium-Server, WebDriver will run the browser directly. There are some reasons though to use the Selenium-Server with Selenium-WebDriver. (1) You are using Selenium-Grid to distribute your tests over multiple machines or virtual machines (VMs). (2) You want to connect to a remote machine that has a particular browser version that is not on your current machine. (3) You are not using the Java bindings (i.e. Python, C#, or Ruby) and would like to use HtmlUnit Driver",
	"SeleniumWebDriver - Framework": "It’s not tied to any particular test framework, so it can be used equally well in a unit testing project or from a plain old “main” method.",
	"SeleniumWebDriver - Library": "Once your project is set up, you can see that WebDriver acts just as any normal library: it is entirely self-contained, and you usually don’t need to remember to start any additional processes or run any installers before using it, as opposed to the proxy server with Selenium-RC. Note: additional steps are required to use ChromeDriver, Opera Driver, Android Driver and iOS Driver",
	"SeleniumWebDriver - Commands - Fetching a Page": "driver.get('http://www.google.com'),",
	"SeleniumWebDriver - Commands - Locating UI Elements - ById": "WebElement element = driver.findElement(By.id('coolestWidgetEvah')),",
	"SeleniumWebDriver - Commands - Locating UI Elements - By Class Name": "List<WebElement> cheeses = driver.findElements(By.className('cheese')),",
	"SeleniumWebDriver - Commands - Locating UI Elements - By Tag Name": "WebElement frame = driver.findElement(By.tagName('iframe')),",
	"SeleniumWebDriver - Commands - Locating UI Elements - By Name": "WebElement cheese = driver.findElement(By.name('cheese')),",
	"SeleniumWebDriver - Commands - Locating UI Elements - By Link Text": "WebElement cheese = driver.findElement(By.linkText('cheese')),",
	"SeleniumWebDriver - Commands - Locating UI Elements - By Partial Link Text": "WebElement cheese = driver.findElement(By.partialLinkText('cheese')),",
	"SeleniumWebDriver - Commands - Locating UI Elements - By CSS": "WebElement cheese = driver.findElement(By.cssSelector('#food span.dairy.aged')),",
	"SeleniumWebDriver - Commands - Locating UI Elements - By XPath": "List<WebElement> inputs = driver.findElements(By.xpath('//input')),",
	"SeleniumWebDriver - Commands - Locating UI Elements - Using JavaScript": "WebElement element = (WebElement) ((JavascriptExecutor)driver).executeScript('return $('.cheese')[0]'),",
	"SeleniumWebDriver - Commands - Locating UI Elements - By Link Text ": "",
	"SeleniumWebDriver - Commands - Getting text values": "WebElement element = driver.findElement(By.id('elementID')), element.getText(),",
	"SeleniumWebDriver - Commands - Filling In Forms": "",
	"SeleniumWebDriver - Commands - Filling In Forms - submit": "driver.findElement(By.id('submit')).click(),",
	"SeleniumWebDriver - Commands - Navigating Windows": "driver.switchTo().window('windowName'),",
	"SeleniumWebDriver - Commands - Navigating Frame": "driver.switchTo().frame('frameName'),",
	"SeleniumWebDriver - Commands - Popup Dialogs": "Alert alert = driver.switchTo().alert(),",
	"SeleniumWebDriver - Commands - Navigation - To": "driver.navigate().to('http://www.example.com'),",
	"SeleniumWebDriver - Commands - Navigation - Forward": "driver.navigate().forward(),",
	"SeleniumWebDriver - Commands - Navigation - Back": "driver.navigate().back(),",
	"SeleniumWebDriver - Commands - Cookies - create": "Cookie cookie = new Cookie('key', 'value'),",
	"SeleniumWebDriver - Commands - Cookies - add": "driver.manage().addCookie(cookie),",
	"SeleniumWebDriver - Commands - Cookies - delete by name": "driver.manage().deleteCookieNamed('CookieName'),",
	"SeleniumWebDriver - Commands - Cookies - delete by cookie": "driver.manage().deleteCookie(loadedCookie),",
	"SeleniumWebDriver - Commands - Cookies - delete all": "driver.manage().deleteAllCookies(),",
	"SeleniumWebDriver - Commands - Cookies - Changing the User Agent": "FirefoxProfile profile = new FirefoxProfile(), profile.addAdditionalPreference('general.useragent.override', 'some UA string'), WebDriver driver = new FirefoxDriver(profile),",
	"SeleniumWebDriver - Commands - Cookies - Drag And Drop": "(new Actions(driver)).dragAndDrop(element, target).perform(),",
	"SeleniumWebDriver - Commands - Wait": "Most of the web applications are developed using Ajax and Javascript. When a page is loaded by the browser the elements which we want to interact with may load at different time intervals. Not only it makes this difficult to identify the element but also if the element is not located it will throw an 'ElementNotVisibleException' exception. Using Waits, we can resolve this problem.",
	"SeleniumWebDriver - Commands - Wait - Implicit Wait": "Selenium Web Driver has borrowed the idea of implicit waits from Watir. The implicit wait will tell to the web driver to wait for certain amount of time before it throws a 'No Such Element Exception'. The default setting is 0. Once we set the time, web driver will wait for that time before throwing an exception.",
	"SeleniumWebDriver - Commands - Wait - Explicit Wait": "The explicit wait is used to tell the Web Driver to wait for certain conditions (Expected Conditions) or the maximum time exceeded before throwing an 'ElementNotVisibleException' exception. The explicit wait is an intelligent kind of wait, but it can be applied only for specified elements. Explicit wait gives better options than that of an implicit wait as it will wait for dynamically loaded Ajax elements.",
	"SeleniumWebDriver - Commands - Wait - Fluent Wait": "The fluent wait is used to tell the web driver to wait for a condition, as well as the frequency with which we want to check the condition before throwing an 'ElementNotVisibleException' exception. Frequency: Setting up a repeat cycle with the time frame to verify/check the condition at the regular interval of time.",
	"SeleniumWebDriver - Drivers - HtmlUnit Driver": "This is currently the fastest and most lightweight implementation of WebDriver. As the name suggests, this is based on HtmlUnit. HtmlUnit is a java based implementation of a WebBrowser without a GUI. For any language binding (other than java) the Selenium Server is required to use this driver.",
	"SeleniumWebDriver - Drivers - Firefox Driver": "Controls the Firefox browser using a Firefox plugin. The Firefox Profile that is used is stripped down from what is installed on the machine to only include the Selenium WebDriver.xpi (plugin). A few settings are also changed by default (see the source to see which ones) Firefox Driver is capable of being run and is tested on Windows, Mac, Linux. Currently on versions 3.6, 10, latest - 1, latest",
	"SeleniumWebDriver - Drivers - Internet Explorer Driver": "The InternetExplorerDriver is a standalone server which implements WebDriver’s wire protocol. This driver has been tested with IE 7, 8, 9, 10, and 11 on appropriate combinations of Vista, Windows 7, Windows 8, and Windows 8.1. As of 15 April 2014, IE 6 is no longer supported. The driver supports running 32-bit and 64-bit versions of the browser. The choice of how to determine which “bit-ness” to use in launching the browser depends on which version of the IEDriverServer.exe is launched. If the 32-bit version of IEDriverServer.exe is launched, the 32-bit version of IE will be launched. Similarly, if the 64-bit version of IEDriverServer.exe is launched, the 64-bit version of IE will be launched.",
	"SeleniumWebDriver - Drivers - Chrome Driver": "ChromeDriver is maintained / supported by the Chromium project iteslf. WebDriver works with Chrome through the chromedriver binary (found on the chromium project’s download page). You need to have both chromedriver and a version of chrome browser installed. chromedriver needs to be placed somewhere on your system’s path in order for WebDriver to automatically discover it. The Chrome browser itself is discovered by chromedriver in the default installation path. These both can be overridden by environment variables.",
	"SeleniumWebDriver - Drivers - Opera Driver": "",
	"SeleniumWebDriver - Drivers - iOS Driver": "",
	"SeleniumWebDriver - Drivers - Android Driver": "Selendroid project",


	"Selenium Grid": "SECTION",
	"Selenium Grid ": "",

	"Selenium IDE": "SECTION",
	"Selenium IDE ": ""
}