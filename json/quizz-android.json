{
	"libraries": "SECTION",
	"SDK": "",
	"NDK": "",
	"Jetpack": "",

	"configuration": "SECTION",
	"attributes": "All attributes are defined per build variant except compileSdkVersion, which is defined per the whole module. There is also a restriction that minSdkVersion of given module cannot be lower than the value in any dependent module eg. you cannot use version 7.5.0 of Google Play Services library (which minSdkVersion is 9) in an app which has that value set to 8. Moreover, targetSdkVersion should not be set to value higher than compileSdkVersion, because it means that app is targeting something which can not be known yet.",
	"attributes - guide": "minSdkVersion <= targetSdkVersion <= compileSdkVersion",
	"attributes - ideally": "minSdkVersion (lowest possible) <= targetSdkVersion == compileSdkVersion (latest SDK)",
	"attributes - minSdkVersion": "It simply tells that app requires at least given API level. It cannot be installed in any normal way on a system with lower API level, this includes commandline via adb, manual installation via system UI (installation from unknown source), installation from IDE or gradle scripts and Google Play Store. Default value is 1 which means that in most of the currently developed apps it needs to be set explicitly.",
	"attributes - maxSdkVersion": "maxSdkVersion which usage not recommended is a partial opposite of minSdkVersion.",
	"attributes - targetSdkVersion": "targetSdkVersion is a hint for system on which app is running, indicating which API level is app designed for. The targetSdkVersion is supposed to indicate that you have tested your app on (presumably up to and including) the version you specify. If value is not defined then it will default to minSdkVersion. Recommended way is to set it to the highest API on which app has been tested.",
	"attributes - compileSdkVersion": "compileSdkVersion is the API level which app is compiled against. Value should be always set to the highest stable API level, even if app does not use any API from it. This is due to the fact that some API may be deprecated, stop working – invoked method may start doing nothing like WebView.htmlonChildViewAdded(android.view.View, android.view.View), callbacks may stop being called like WebChromeClient#onJsTimeout(). In such cases compiler warning is raised. Only API levels of installed SDK platforms can be used as a values.",
	
	"foreground animals": "SECTION",
	"Activities": "",
	"Notifications": "",
			
	"background animals": "SECTION",
	"Jobs - AsyncTask": "",
	"Jobs - Handler": "",
	"Jobs - AlarmManager": "",
	"Jobs - SyncAdapter": "",
	"Jobs - GCMNetworkManager": "GCMNetworkManager have been replaced by FireBase JobDispatcher. If your app minimum API level is less than 21, you should use this one.",
	"Jobs - JobDispatcher": "Firebase. In your minSDK < 23.. Then you have a JobDispatcher",
	"Jobs - JobScheduler": "Android Lollipop (API level 21) introduced JobScheduler as a part of optimizing background behavior.",
	"Jobs - JobScheduler - compatibility": "Of course, implementing a background service using JobService is a very nice approach. However, JobService is a feature supported by API level 21, so there is a backward compatibility issue. In particular, if target SDK of app addresses O(26) on Android O device, executing service in background wouldn’t be allowed. To clear this limitation, we should apply Job things. However, JobScheduler was introduced at API 21. So, we have to write a backward compatible code for devices not having JobScheduler.",
	"Jobs - JobScheduler - Lifecycle - implement - JobInfo": ".",		
	"Jobs - JobScheduler - Lifecycle - implement - JobService": ".",		
	"Jobs - JobScheduler - Lifecycle - implement - permission - android.permission.BIND_JOB_SERVICE": ".",		
	"Jobs - JobScheduler - Lifecycle - Start - JobService.onStartJob()": ".",		
	"Jobs - JobScheduler - Lifecycle - Run - thread": "By default, JobService runs on the main thread.",
	"Jobs - JobScheduler - Lifecycle - Stop - JobService.onStopJob()": ".",		
	"Jobs - JobScheduler - Lifecycle - Stop - JobService.jobFinished()": ".",		
	"Jobs - JobIntentService": "Thankfully, Support Library addedJobIntentService for more convenient approach to this. It uses the JobScheduler function on Android O, but runs as a background service to emulate JobScheduler on pre-O.",
	"Jobs - JobIntentService - compatibility": "On Android N and below devices, the background service starts immediately and the loaded jobs are executed sequentially. This ensures backwards compatibility with the same code. In Android O and later, jobs loaded through JobScheduler are executed sequentially. Internally, it is scheduled byjobInfo.setOverrideDeadline(0).build(). If you want other conditions, JobIntentService doesn’t fit it. You don’t need WakefulBroadcastReceiver to use Wakelock when running on pre-O, because JobIntentService would manage Wakelock for you. This prevent writing wrong code such as battery drain due to not releasing Wakelocks.",
	"Jobs - JobIntentService - Lifecycle - Start - JobIntentService.enqueueWork(Context context, Intent work)": "",
	"Jobs - JobIntentService - Lifecycle - Run - JobIntentService.onHandleWork(Intent intent)": "",
	"Jobs - JobIntentService - Lifecycle - Stop - JobIntentService.onStopCurrentWork ()": "",
	"Jobs - android-job": "A utility library for Android to run jobs delayed in the background. Depending on the Android version either the JobScheduler, GcmNetworkManager or AlarmManager is getting used. Deprecated in favour of WorkManager. https://github.com/evernote/android-job",
	"Jobs - WorkManager": "The WorkManager API makes it easy to specify deferrable, asynchronous tasks and when they should run. These APIs let you create a task and hand it off to WorkManager to run immediately or at an appropriate time. It is intended for background jobs that should run even if the app is no longer in the foreground.",
	"Jobs - WorkManager - release": "Part of JetPack",
	"Jobs - WorkManager - feature - deferable tasks": "Delayed task execution",
	"Jobs - WorkManager - feature - guaranteed": "It can waken up the app and app's process to do the work thereby guarantees that works will be executed. Provides tasks which can survive process death. Gracefully manages doze mode or other restrictions imposed by OS.",
	"Jobs - WorkManager - feature - observable": "Allows observation of work status. You can check the state of your app in Run time.",
	"Jobs - WorkManager - feature - chains": "Allows the ability to create complex chains of work. Allows work chaining which allows to segregate big chunk of work into small works and execute them based on different constraints",
	"Jobs - WorkManager - feature - compatible": "Backward compatibility with or without Google play Services",
	"Jobs - WorkManager - WorkManager": "Receives work with arguments & constraints and enqueue it.",
	"Jobs - WorkManager - Worker": "have only one method to implement doWork() which is executed on a background thread. It’s the place where all your background tasks should be done. Try to keep it as simple as possible.",
	"Jobs - WorkManager - WorkRequest": "work request specify which Worker enqueued with what Arguments and what are the Constraints for it (e.g., internet, charging ).",
	"Jobs - WorkManager - WorkResult": "Success, Failure, Retry.",
	"Jobs - WorkManager - Data": "Persistable set of key/value pairs which are passed to/from Worker.",
	"Service": "A Service is an application component that can perform long-running operations in the background, and it doesn't provide a user interface.",
	"Service - deprecated": "Unless you are not using Service as Foreground service — there is no any reason for using service. If you need to depend on it — you need to use a job (WorkManager).",
	"Service - Lifecycle - Creation - Service - manifest": "",
	"Service - Lifecycle - Creation - Service - onCreate()": "The system invokes this method to perform one-time setup procedures when the service is initially created (before it calls either onStartCommand() or onBind()). If the service is already running, this method is not called.",
	"Service - Lifecycle - Start - Started Services": "The service is created when another component calls startService(). The service then runs indefinitely and must stop itself by calling stopSelf(). Another component can also stop the service by calling stopService().",
	"Service - Lifecycle - Start - Background": "A background service performs an operation that isn't directly noticed by the user. For example, if an app used a service to compact its storage, that would usually be a background service.",
	"Service - Lifecycle - Start - Background - Intent Service": "The IntentService is used to perform a certain task in the background. Once done, the instance of IntentService terminate itself automatically.",
	"Service - Lifecycle - Start - Background - Intent Service - features - threads": "It automatically processes all incoming requests in a separate thread taking the burden of thread management away from the developer. The IntentService class provides a straightforward structure for running an operation on a single background thread.",
	"Service - Lifecycle - Start - Background - Intent Service - features - no ui": "It can't interact directly with your user interface. To put its results in the UI, you have to send them to an Activity.",
	"Service - Lifecycle - Start - Background - Intent Service - features - sequentially": "Work requests run sequentially. If an operation is running in an IntentService, and you send it another request, the request waits until the first operation is finished.",
	"Service - Lifecycle - Start - Background - Intent Service - features - no interrupt": "An operation running on an IntentService can't be interrupted.",
	"Service - Lifecycle - Start - Background - Intent Service - features - stop": "Once the request Queue is empty it automatically stops itself, so the developer need not worry about handling the service lifecycle.",
	"Service - Lifecycle - Start - Background - Component.startService()": "",
	"Service - Lifecycle - Start - Background - Component.startService() - API26 (Android O)": "The startService() method now throws an IllegalStateException if an app targeting Android 8.0 tries to use that method in a situation when it isn’t permitted to create background services.",
	"Service - Lifecycle - Start - Background - IntentService.onHandleIntent(Intent workIntent)": "",
	"Service - Lifecycle - Start - Foreground": "A foreground service performs some operation that is noticeable to the user. For example, an audio app would use a foreground service to play an audio track. Foreground services must display a Notification. Foreground services continue running even when the user isn't interacting with the app.",
	"Service - Lifecycle - Start - Foreground - priority": "the term foregrounddoesn’t apply to whether the Service is running on the main Thread or a Background Thread. It means that the Android system will give this service highest priority and will try not to destroy it when t is running low on system resources. You should only put a Started Service in the foreground if it is critical to do this in order to deliver a compelling user experience. A Foreground service is a service that the user is actively aware of and isn't a candidate for the system to kill when low on memory.",
	"Service - Lifecycle - Start - Foreground - notification": "When a Started Service moves into the foreground, it must display a persistent notification, explicitly notifying the user that the service is running.",
	"Service - Lifecycle - Start - Foreground - thread": "A Started Service in the foreground is detached from the lifecycle of UI components (with the exception of the persistent notification)",
	"Service - Lifecycle - Start - Foreground - Context.startForegroundService (Intent service)": "That method creates a background service, but the method signals to the system that the service will promote itself to the foreground. Once the service has been created, the service must call its startForeground() method within five seconds.",
	"Service - Lifecycle - Start - Foreground - Service.startForeground(int, android.app.Notification)": "If your service is started (running through Context.startService(Intent)), then also make this service run in the foreground, supplying the ongoing notification to be shown to the user while in this state. By default started services are background, meaning that their process won't be given foreground CPU scheduling (unless something else in that process is foreground) and, if the system needs to kill them to reclaim more memory (such as to display a large page in a web browser), they can be killed without too much harm. You use startForeground(int, Notification) if killing your service would be disruptive to the user, such as if your service is performing background music playback, so the user would notice if their music stopped playing. Note that calling this method does not put the service in the started state itself, even though the name sounds like it. You must always call ContextWrapper.startService(Intent) first to tell the system it should keep the service running, and then use this method to tell it to keep it running harder. Apps targeting API Build.VERSION_CODES.P or later must request the permission Manifest.permission.FOREGROUND_SERVICE in order to use this API.",
	"Service - Lifecycle - Start - Foreground - Permission": "Apps that target Android 9 (API level 28) or higher and use foreground services must request the FOREGROUND_SERVICE permission. This is a normal permission, so the system automatically grants it to the requesting app. If an app that targets API level 28 or higher attempts to create a foreground service without requesting FOREGROUND_SERVICE, the system throws a SecurityException.",
	"Service - Lifecycle - Start - Service.onStartCommand()": "The system invokes this method by calling startService() when another component (such as an activity) requests that the service be started. When this method executes, the service is started and can run in the background indefinitely. If you implement this, it is your responsibility to stop the service when its work is complete by calling stopSelf() or stopService(). If you only want to provide binding, you don't need to implement this method",
	"Service - Lifecycle - Start - Service.onStartCommand() - START_NOT_STICKY": "If the system kills the service do not recreate the service (unless there are pending intents to deliver).",
	"Service - Lifecycle - Start - Service.onStartCommand() - START_NOT_STICKY - usage": "This is the safest option to avoid running your service when not necessary and when your application can simply restart any unfinished jobs.",
	"Service - Lifecycle - Start - Service.onStartCommand() - START_STICKY": "If the system kills the service recreate the service. Do not redeliver the last intent.",
	"Service - Lifecycle - Start - Service.onStartCommand() - START_STICKY - usage": "This is suitable for media players (or similar services) that are not executing commands but are running indefinitely and waiting for a job.",
	"Service - Lifecycle - Start - Service.onStartCommand() - START_REDELIVER_INTENT": "If the system kills the service recreate the service. Eedeliver the last intent.",
	"Service - Lifecycle - Start - Service.onStartCommand() - START_REDELIVER_INTENT - usage": "This is suitable for services that are actively performing a job that should be immediately resumed, such as downloading a file.",
	"Service - Lifecycle - Bind - Bound Services": "A service is bound when an application component binds to it by calling bindService(). A bound service runs only as long as another application component is bound to it. Multiple components can bind to the service at once, but when all of them unbind, the service is destroyed.",
	"Service - Lifecycle - Bind - Component.bindService()": "",
	"Service - Lifecycle - Bind - Service.onBind()": "The system invokes this method by calling bindService() when another component wants to bind with the service (such as to perform RPC). In your implementation of this method, you must provide an interface that clients use to communicate with the service by returning an IBinder. You must always implement this method, however, if you don't want to allow binding, you should return null.",
	"Service - Lifecycle - Bind - Service.onRebind()": "",
	"Service - Lifecycle - Communicate - IBinder": "A bound service offers a client-server interface that allows components to interact with the service, send requests, receive results, and even do so across processes with interprocess communication (IPC).",
	"Service - Lifecycle - Unbind - Service.onUnbind()": "",
	"Service - Lifecycle - Unbind - Component.unbindService()": "",
	"Service - Lifecycle - Run  - Thread": "If you do use a service, it still runs in your application's main thread by default, so you should still create a new thread within the service if it performs intensive or blocking operations.",
	"Service - Lifecycle - Stop - Service.stopSelf()": "",
	"Service - Lifecycle - Stop - Component.stopService()": "",
	"Service - Lifecycle - Destroy - onDestroy()": "The system invokes this method when the service is no longer used and is being destroyed. Your service should implement this to clean up any resources such as threads, registered listeners, or receivers. This is the last call that the service receives.",
	"Service - GoolePlayServices": "",
	"Service - GoolePlayServices - Confirm Update - GooglePlayServicesUtil (deprecated)": "int status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getApplicationContext()), if(status != ConnectionResult.SUCCESS) { if(status == ConnectionResult.SERVICE_VERSION_UPDATE_REQUIRED) { Toast.makeText(context,'Please udpate your google play services',Toast.LENGTH_SHORT).show(), } }",
	"Service - GoolePlayServices - Confirm Update - GoogleApiAvailability": "GoogleApiAvailability googleAPI = GoogleApiAvailability.getInstance(), int result = googleAPI.isGooglePlayServicesAvailable(activity), if(result != ConnectionResult.SUCCESS) { if (googleAPI.isUserResolvableError(result))  { googleAPI.getErrorDialog(activity, result, AppConstant.PLAY_SERVICES_RESOLUTION_REQUEST).show(), } }",
	"Service - recommendation": "Foreground Service / IntentService / WorkManager",

	"device state": "SECTION",
	"Device Processes - swap space": "Android kernel was first developed it and it was based on Linux-Kernel. The main difference between Android and all other Linux-Kernel based systems is that Android does not have a thing called 'swap space.'",
	"Device Processes - OOM Killer": "free up memory by killing the processes based on their “visibility state” and amount of memory consumed.",
	"Device Processes - OOM Killer - oom_adj": "Every process gave its oom_adj score by Activity Manager. It’s a combination of application state (e.g., foreground, background, background with service, etc.). Here is a short example of all oom_adj values: setprop ro.FOREGROUND_APP_ADJ 0, setprop ro.VISIBLE_APP_ADJ 1, setprop ro.SECONDARY_SERVER_ADJ 2, setprop ro.BACKUP_APP_ADJ 2, setprop ro.HOME_APP_ADJ 4, setprop ro.HIDDEN_APP_MIN_ADJ 7, setprop ro.CONTENT_PROVIDER_ADJ 14, setprop ro.EMPTY_APP_ADJ 15",
	"Device Processes - OOM Killer - rules": "Higher values of omm_adj are more likely to be killed by the kernel’s oom killer. The current foreground app has an omm_adj of 0. The OOM killer uses configurable rules based on free memory and omm_adj thresholds. ie, rules state 'if free memory < X1, kill processes with omm_adj > Y1'",
	"Device Processes - OOM Killer - rules - memory": "The less memory you consume, the better chance you have to carry out the important stuff.",
	"Device Processes - OOM Killer - rules - background": "The state of Application is essential. So when your app goes to background, and you still want to send Luke into space, you have to use 'Services'. A Service is an application component that can perform long-running operations in the background, and it does not provide a user interface. Services drain memory",
	"Device Processes - OOM Killer - rules - hierarchy": "The process being killed is chosen based on a ranking system of how important that process is to the user at the time. Here, in descending order, is the ranking of each class of process. The higher the rank, the less likely that process is to be killed.",
	"Device Processes - OOM Killer - rules - hierarchy - Cached apps": "These are the remaining apps that have been opened by the user, and then backgrounded. They will be killed first to recover memory, and have the most restrictions applied to them on modern releases. You can read about them on the Behavior Changes pages for Nougat, Oreo and Pie.",
	"Device Processes - OOM Killer - rules - hierarchy - Previous app": "The previous foreground app the user was using. The previous app lives above the cached apps as it's the most likely app the user will switch to next.",
	"Device Processes - OOM Killer - rules - hierarchy - Home": "The Launcher app containing desktop wallpaper",
	"Device Processes - OOM Killer - rules - hierarchy - Service": "Background services like download manager and sync manager.",
	"Device Processes - OOM Killer - rules - hierarchy - Perceptible apps": "These are apps that the user can perceive are running. For example an app with a foreground service playing audio, or an app set as the preferred voice interaction service will be bound to the system_server, effectively promoting it to Perceptible level.",
	"Device Processes - OOM Killer - rules - hierarchy - Foreground app": "A foregrounded / top (user visible) app is the app a user is currently using.",
	"Device Processes - OOM Killer - rules - hierarchy - Persistent apps": "Persistent apps like Phone, Wi-Fi, and Bluetooth are crucial to keeping your device connected and able to provide its most basic features.",
	"Device Processes - OOM Killer - rules - hierarchy - System": "The system_server process, which is responsible for maintaining this list.",
	"Device Processes - OOM Killer - rules - hierarchy - Native": "Native Linux daemon processes are responsible for running everything (including the process killer itself).",
	"Device State": "When an Android device is left idle, it will first dim, then turn off the screen, and ultimately turn off the CPU.",
	"Device State - WAKE_LOCK - declare": "To use a wake lock, the first step is to add the WAKE_LOCK permission to your application's manifest file: <uses-permission android:name='android.permission.WAKE_LOCK' />",
	"Device State - WAKE_LOCK - create": "PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, 'My Tag'),",
	"Device State - WAKE_LOCK - acquire": "wl.acquire(),",
	"Device State - WAKE_LOCK - release": "wl.release(),",
	"Device State - Lifecycle - **State** - on": "",
	"Device State - Lifecycle - Event - screen full bright": "",
	"Device State - Lifecycle - Tool - WAKE_LOCK - PowerManager.SCREEN_BRIGHT_WAKE_LOCK (deprecated)": "",
	"Device State - Lifecycle - Event - dim": "",
	"Device State - Lifecycle - **State** - dimmed screen": "",
	"Device State - Lifecycle - Tool - WAKE_LOCK - PowerManager.SCREEN_DIM_WAKE_LOCK (deprecated)": "",
	"Device State - Lifecycle - Tool - FLAG_KEEP_SCREEN_ON": "The best way to do this is to use the FLAG_KEEP_SCREEN_ON in your activity (and only in an activity, never in a service or other app component).",
	"Device State - Lifecycle - Tool - keepScreenOn": "Another way to implement this is in your application's layout XML file, by using the android:keepScreenOn attribute: android:keepScreenOn='true'",
	"Device State - Lifecycle - Event - Screen Off": "",
	"Device State - Lifecycle - **State** - Screen Off": "",
	"Device State - Lifecycle - Tool - WAKE_LOCK": "You can use a PowerManager system service feature called wake locks.",
	"Device State - Lifecycle - Tool - WAKE_LOCK - PowerManager.PARTIAL_WAKE_LOCK": "",
	"Device State - Lifecycle - Tool - WAKE_LOCK - PowerManager.FULL_WAKE_LOCK": "",
	"Device State - Lifecycle - Tool - Whitelisting App": "",
	"Device State - Lifecycle - Tool - Use the charger": "",
	"Device State - Lifecycle - Event - Lose network conection": "",
	"Device State - Lifecycle - Event - No background jobs run": "",
	"Device State - Lifecycle - Event - Device No Charging": "",
	"Device State - Lifecycle - **State** - App Standby Mode": "",
	"Device State - Lifecycle - State - App Standby Mode - scope": "App Standby only affects the ones you don’t use very often.",
	"Device State - Lifecycle - State - App Standby Mode - version": "from Marshmallow",
	"Device State - Lifecycle - Event - Stop Foreground Services (Theory)": "",
	"Device State - Lifecycle - Tool - Settings": "Doze is accessible in the settings under Battery > Overflow > Battery optimization. Here, you’ll see a list of apps that are exempt from Doze, which will probably just be Google Play Services and a few device-specific features. Pick any of them to exempt from Doze mode (Don’t optimize)",
	"Device State - Lifecycle - Tool - Settings - ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS": "Show screen for controlling which apps can ignore battery optimizations.",
	"Device State - Lifecycle - **State** - Doze Mode": "",
	"Device State - Lifecycle - State - Doze Mode - Light-Doze": "",
	"Device State - Lifecycle - State - Doze Mode - Deep-Doze": "",
	"Device State - Lifecycle - State - Doze Mode - scope": "concerned with all the apps on your phone.",
	"Device State - Lifecycle - State - Doze Mode - version": "from Marshmallow",
	"Device State - Lifecycle - State - Doze Mode - Idle Time": "When you leave your device sitting unplugged with the screen off for about 30 minutes, it shifts into Doze mode to prevent the battery from being drained. Idle time is not specified by Google and I guess this is implemented differently by OEMs",
	"Device State - Lifecycle - State - Doze Mode - OEMs": "Google does not allow OEMs to modify the way it works.",
	"Device State - Lifecycle - State - Doze Mode - Maintenance Window": "The device will periodically wake up from Doze mode for a short time, which allows apps to run tasks they’ve been queueing up with the Android job scheduler. These are called maintenance windows, and they become less frequent the longer a device sits untouched.",
	"Device State - Lifecycle - Event - Temporary network conection": "Network access is disabled, unless your app receives a high priority Google Cloud Messaging tickle.",
	"Device State - Lifecycle - Event - Temporary JobScheduler": "JobScheduler are not permitted to run.",
	"Device State - Lifecycle - Event - Temporary Syncs from Sync-Adapters": "Syncs and jobs for your sync adapters are not permitted to run.",
	"Device State - Lifecycle - Event - Temporary Alarms": "Alarms scheduled with the AlarmManager class are disabled, except for alarms that you've set with the setAlarmClock() method and AlarmManager.setAndAllowWhileIdle().",
	"Device State - Lifecycle - Event - No Wifi scans": "WiFi scans are not performed.",
	"Device State - Lifecycle - **State** - Doze Mode - No Maintenance Window": "",
	"Device State - Lifecycle - Event - Stop Foreground Services (Practice)": "Processes which have a current running foreground service are supposed to be unaffected by Doze. However, there is an issue on Android M devices where foreground services are not properly whitelisted when the foreground service is the in the same process as the top activity and improperly dozed. The fix is available on AOSP and will be included in builds of Android N. It would be up to OEMs to integrate that patch into any Android M builds they produce. https://stackoverflow.com/questions/37869201/how-does-doze-mode-affect-background-foreground-services-with-without-partial-f",
	"Device State - Lifecycle - Event - High priority push messages will not show up": "So for example, a Hangouts message or FCM",
	"Device State - Lifecycle - Event - Some Alarms": "Alarms scheduled with the AlarmManager class set with the setAlarmClock() method and AlarmManager.setAndAllowWhileIdle() and setExactAndAllowWhileIdle() are disabled.",
	"Device State - Lifecycle - Event - CPU to sleep": "",
	"Device State - Lifecycle - **State** - Sleep Mode": "",
	"Device State - Lifecycle - Event - no RIL": "no accept RIL(Radio Interface Layer)",

	"command line tools": "SECTION",
	"abd": "Android Debug Bridge (adb) is a versatile command-line tool that lets you communicate with a device. The adb command facilitates a variety of device actions, such as installing and debugging apps, and it provides access to a Unix shell that you can use to run a variety of commands on a device.",
	"abd - parts": "It is a client-server program that includes three components: A client, which sends commands. The client runs on your development machine. You can invoke a client from a command-line terminal by issuing an adb command. A daemon (adbd), which runs commands on a device. The daemon runs as a background process on each device. A server, which manages communication between the client and the daemon. The server runs as a background process on your development machine.",
	"abd - install": "adb is included in the Android SDK Platform-Tools package. You can download this package with the SDK Manager, which installs it at android_sdk/platform-tools/",
	"logcat": ""
}