{
	"ts": "SECTION",
	"ts - Typescript": "TypeScript is a superset of JavaScript in which you add types to JavaScript. JavaScript is a loosely typed language which leads to lot of types error in production code. With TypeScript developers can catch those error, even before running the code.",
	"ts - Typescript - 5.7": "TypeScript 5.7 adds support for ES2024 features",

	"Variables": "SECTION",
	"Variables - DataTypes - type": "Types allow you to create complex types by combining existing types, union types, intersection types, and even utility types.",
	"Variables - DataTypes - Basic - Literal": "",
	"Variables - DataTypes - Basic - Template Literal": "Template Literal Types allow you to create types by combining string literals and union types.",
	"Variables - DataTypes - Basic - string": "",
	"Variables - DataTypes - Basic - number": "",
	"Variables - DataTypes - Basic - boolean": "",
	"Variables - DataTypes - Basic - void": "",
	"Variables - DataTypes - Basic - never": "The type never represents value that never occurs. It is typically used for return statements of function that doesn’t returns properly.",
	"Variables - DataTypes - Basic - any": "The any type in TypeScript allows you to bypass type checking, meaning that any value can be assigned to variables with the any type, and they can be used without any static type constraints. Essentially, it turns off TypeScript’s type system for that particular variable.",
	"Variables - DataTypes - Basic - unknown": "unknown type in TypeScript is similar to any, but with stricter type safety. It means 'I don't know the type yet,' and you can't perform operations on an unknown value without first narrowing its type.",
	"Variables - DataTypes - Basic - null": "",
	"Variables - DataTypes - Basic - undefined": "",
	"Variables - DataTypes - Advanced - Union": "hold values of multiple types",
	"Variables - DataTypes - Advanced - Intersection": "Typescript allows us to combine multiple types into one",
	"Variables - DataTypes - UtilityTypes": ".",
	"Variables - DataTypes - UtilityTypes - constraints": "function loggingIdentity<T extends Lengthwise>(arg: T): T { .. }",
	"Variables - DataTypes - UtilityTypes - constructs - Partial<T>": "Partial<T> constructs a type that makes all properties of the given type T optional.",
	"Variables - DataTypes - UtilityTypes - constructs - Pick<T, K>": "Pick<T, K> constructs a type by picking a set of properties K from T.",
	"Variables - DataTypes - UtilityTypes - constructs - Omit<T, K>": "Omit<T, K> constructs a type by removing a set of properties K from T.",
	"Variables - DataTypes - UtilityTypes - constructs - Required<T>": "Required<T> constructs a type that makes all properties of the given type T required.",
	"Variables - DataTypes - UtilityTypes - constructs - Record<K, T>": "Record<K, T> constructs a type with keys of type K and values of type T.",
	"Variables - DataTypes - UtilityTypes - constructs - Parameters<T>": "Parameters<T> constructs a tuple type from the types used in the parameters of a function type T.",
	"Variables - DataTypes - UtilityTypes - constructs - InstanceType<T>": "InstanceType<T> constructs a type consisting of the instance type of a constructor function type T.",
	"Variables - DataTypes - UtilityTypes - constructs - NonNullable<T>": "NonNullable<T> constructs a type by excluding null and undefined from T.",
	"Variables - DataTypes - UtilityTypes - constructs - Exclude<T, U>": "Exclude<T, U> constructs a type by excluding from T all union members that are assignable to U.",
	"Variables - DataTypes - UtilityTypes - constructs - Extract<T, U>": "Extract<T, U> constructs a type by extracting from T all union members that are assignable to U.",
	"Variables - DataTypes - UtilityTypes - config - Optional<T>": "const car: { brand: string, model: string, year?: number } = { brand: 'Tata', model: 'Punch' };",
	"Variables - DataTypes - UtilityTypes - config - Readonly<T>": "Readonly<T> makes all properties of the type T immutable, i.e., they cannot be reassigned.",
	"Variables - DataTypes - UtilityTypes - config - ThisType<T>": "ThisType<T> allows you to specify the type of this within an object or class.",
	"Variables - DataTypes - UtilityTypes - audit - DataTypes - keyof T": "keyof T extracts the keys of type T as a union of string literals.",
	"Variables - DataTypes - UtilityTypes - audit - ReturnType<T>": "ReturnType<T> extracts the return type of a function type T.",
	"Variables - DataTypes - UtilityTypes - audit - Awaited<T>": "Awaited<T> unwraps the type T if it's a promise.",
	"Variables - DataTypes - UtilityTypes - audit - IndexedAccessTypes": "Indexed Access Types allow you to access a specific property type of a type T using a key K.",
	"Variables - DataTypes - UserDefined - type": "type ReadOnlyUser = ReadOnly<User>;",
	"Variables - DataTypes - UserDefined - Union": "Union types are used when the property can be more then one value, like string or number. For this reason, they are also called OR and are used by using | symbol.",
	"Variables - DataTypes - UserDefined - Enum": "An enum is a type of variables which are constants. You have to use the values within it only. The values are numeric by default and starts with 0 and increments by 1.",
	"Variables - DataTypes - UserDefined - Array - string[]": "",
	"Variables - DataTypes - UserDefined - Array - Inference": "If we don’t give any type to an array, it will infer the type.",
	"Variables - DataTypes - UserDefined - Array - Typed - TS5.7": "As mentioned earlier, typed arrays like Uint8Array are now generic over ArrayBufferLike, improving type flexibility. let uint8Array: Uint8Array<ArrayBufferLike>;",
	"Variables - DataTypes - UserDefined - Tuple": "It is a type array with pre-defined length and types. let ourTuple: [number, boolean, string]; ourTuple = [5, false, 'Coding Hero was here'];",
	"Variables - DataTypes - UserDefined - Interface": "Interface define the structure of an object.",
	"Variables - DataTypes - UserDefined - Interface - contract": "Interfaces are a core feature of TypeScript. They allow you to define a contract for your objects.",
	"Variables - DataTypes - UserDefined - Interface - vs Types - extensibility": "One of the most significant differences is how you extend them. Interfaces are built with extension in mind. You can easily extend an interface using the extends keyword. This makes interfaces a natural choice when you're working with object-oriented design patterns. Types, on the other hand, are more flexible but less formal in their extensibility. You can’t directly extend a type in the same way, but you can achieve similar results using intersection types:",
	"Variables - DataTypes - UserDefined - Interface - vs Types - merging": "Another difference is that interfaces can be merged, while types cannot. This is particularly useful when you’re working with third-party libraries or want to add additional properties to an existing interface.:",
	"Variables - DataTypes - UserDefined - Conditional": "Conditional types allow you to create types that depend on other types. type IsArray<T> = T extends any[] ? true : false;",
	"Variables - DataTypes - UserDefined - Conditional - infer": "not annotating and letting TS infer it. The infer keyword allows for type inference in conditional types.",
	"Variables - DataTypes - UserDefined - Mapped": "Mapped types allow you to create new types based on old ones by transforming properties. type ReadonlyUser = Readonly<User>;",
	"Variables - DataTypes - UserDefined - Branded": "Branded types add semantic meaning to primitive types, helping to reduce errors when similar types (like IDs) are used inappropriately. type UserId = string & { __brand: 'UserId' };",
	"Variables - DataTypes - Operations - DataTypes - TypeAliases": "Type aliases create a new name for a type. Type aliases are sometimes similar to interfaces, but can name primitives, unions, tuples, and any other types that you’d otherwise have to write by hand.",
	"Variables - DataTypes - Operations - TypeGuards": "A type guard is some expression that performs a runtime check that guarantees the type in some scope.",
	"Variables - DataTypes - Operations - TypeGuards - typeof": "function isNumber(x: any): x is number { return typeof x === 'number'; }",
	"Variables - DataTypes - Operations - TypeGuards - instanceof": "",
	"Variables - DataTypes - Operations - TypeGuards - custom": "To define a type guard, we simply need to define a function whose return type is a type predicate:. function isFish(pet: Fish | Bird): pet is Fish { return (pet as Fish).swim !== undefined; }",
	"Variables - DataTypes - Operations - Conversion - Casting": "Casting is the process of overriding a type of a variable.",
	"Variables - Declaration - implicit": "Explicit means writing out the type. let firstName: string = 'Nabendu';",
	"Variables - Declaration - explicit": "Implicit means TypeScript will guess the type, based on the value. Like below type will be considered a number let age = 41;",
	"Variables - Declaration - Assignment - NullishCoalescence": "Nullish Coalescence is used in expressions which have a fallback feature while dealing with null or undefined. It is used with the ?? operator.",
	"Variables - Declaration - Assignment - satisfies": "TypeScript satisfies operator allow developers to check and validate the value of a variable against a given type.",
	"Variables - Declaration - Assignment - :": "The : tells the variable will always be this type. const obj: Record<string, string> = {}",
	"Variables - Declaration - Assignment - as": "Third way to declare type is using as annotation, I will really suggest not to use this way of declaring types since this is literally like telling lie to TypeScript.",
	"Variables - Declaration - Declare": "The declare keyword in TypeScript serves a vital purpose: it informs the TypeScript compiler about the existence of code that may not be immediately visible or recognizable. https://javascript.plainenglish.io/mastering-typescript-the-power-of-declare-keyword-4f66a08c2d8a",

	"Logic": "SECTION",
	"Logic - Sync - Imperative - ControlFlow - Conditions - Props Chaining": "",
	"Logic - Sync - Imperative - ControlFlow - Conditions - Props Chaining - optional": "example?.a?.[0]",
	"Logic - Sync - Imperative - ControlFlow - Conditions - Errors": "https://tomaszs2.medium.com/typescript-5-6-release-candidate-no-more-condition-errors-you-can-skip-type-checking-too-169a782ae30b",
	"Logic - Sync - Imperative - ControlFlow - PatternMatching - ts-pattern": "https://tauantcamargo.medium.com/how-ts-pattern-can-improve-your-code-readability-d64996841646",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterable": "",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterator - IteratorHelperMethods - 5.6": "",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterator - IteratorHelperMethods - map": "",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterator - IteratorHelperMethods - Iterator": "Developers can create custom iterators by extending the new Iterator class.",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterator - IteratorHelperMethods - existing": "Adapter for Existing Iterables Existing iterables can be adapted into the new type using Iterator.from. Iterator.from([1, 2, 3]).filter(x => x > 1);",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterator - BuiltinIterator - 5.6": "TypeScript 5.6 introduces the BuiltinIterator type, which provides a more precise type model for native iterable iterators.",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterator - BuiltinIteratorReturn": "",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterator - BuiltinIteratorReturn - strictBuiltinIteratorReturn": "When you call the next() method on an Iterator<T, TReturn>, it gives you back an object that has a value and a done property.",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterator - IteratorObject": "",
	"Logic - Sync - Imperative - ControlFlow - Loops - Iterator - IteratorResult": "",
	"Logic - Sync - Imperative - ControlFlow - Loops - IterableIterator": "",
	"Logic - Sync - Functional - Decorators": "Decorators are functions that can modify classes, methods, accessors, or properties.",
	"Logic - Sync - Functional - Decorators - goal": "They allow us to add metadata, modify or extend the behavior of classes, methods, properties, and parameters and apply reusable logic at various levels within our code.",
	"Logic - Sync - Functional - Decorators - types - Class": "It is a function that takes the constructor of the class as its parameter and can return either the original constructor or a new constructor to replace it.",
	"Logic - Sync - Functional - Decorators - types - Method": "It is applied to methods within a class and can be used to modify or extend the method definition. It takes three parameters: the target object, the name of the method, and the property descriptor of the method.",
	"Logic - Sync - Functional - Decorators - types - Property": "Property decorators are applied to properties within a class and can be used to modify or extend the property definition.",
	"Logic - Sync - Functional - Decorators - types - Parameter": "Parameter decorators are applied to a parameter of a method or constructor and can be used to modify or extend the parameter definition.",
	"Logic - IO - Files - .d.ts": "Their purpose is to hold declarations (not implementations) and public types. Having a single add.ts file, containing both the declaration and implementation, is the equivalent of having the add.d.ts and add.js files defined separately. This means you don’t need to worry about organizing declaration files with their respective implemention files, which is great for developer experience.",
	"Logic - IO - Files - .d.ts - autogenerate": "You can simply auto-generate .d.ts files from your .ts files, just by changing a few settings in your tsconfig.json 'compilerOptions': { 'declaration': true } and package.json 'main': 'dist/index.js', 'types': 'dist/index.d.ts',     ",

	"CICD - Bundling": "SECTION",
	"CICD - Bundling - Arch - Functions": "",
	"CICD - Bundling - Arch - Interfaces": "",
	"CICD - Bundling - Arch - Interfaces - extensibility": "",
	"CICD - Bundling - Arch - Classes": "",
	"CICD - Bundling - Arch - Classes - Abstract": "When we declare a base class with abstract keyword, we cannot create objects for the same. In this method, we generally use the methods of the abstract class in a child class.",
	"CICD - Bundling - Arch - Classes - Overriding": "",
	"CICD - Bundling - Arch - Classes - Singleton": "",
	"CICD - Bundling - Arch - OOP": "Object oriented programming is allowed in TypeScript and it is used to design structured and better applications. The concept of OOPs in typescript is similar to the regular OOPs concepts of other programming languages.",
	"CICD - Bundling - Arch - Mixins": "Mixins are patterns used to combine multiple classes or add shared behaviors to classes in a flexible way.",
	"CICD - Bundling - Arch - Mixins - usage": "Instead of creating deep inheritance chains, mixins allow us to combine various small classes or traits, making our code more modular and reusable.",
	"CICD - Bundling - Arch - Module": "",
	"CICD - Bundling - Arch - Module - Aumentation": "Module augmentation allows you to extend existing types, which is especially useful for integrating third-party libraries into your system.",
	"CICD - Bundling - Arch - Namespace": "Namespaces can contain classes, interfaces, functions, variables, and other namespaces. namespace MyNamespace { ... }",
	"CICD - Bundling - Arch - Patterns - DI": "In enterprise systems, dependency injection (DI) promotes testability and loose coupling. TypeScript interfaces play a crucial role in enforcing contracts between components.",
	"CICD - Bundling - Packaging - Modules - ESM - import - noUncheckedSideEffectImports": "TypeScript 5.6 introduced a new option called --noUncheckedSideEffectImports. When you enable this option, TypeScript will throw an error if it can’t find the file you’re trying to import.",
	"CICD - Bundling - Packaging - Modules - ESM - import - rewriteRelativeImportExtensions": "With this new compiler option, TypeScript 5.7 automatically rewrites relative import paths from .ts, .tsx, .mts, and .cts to their corresponding .js, .jsx, .mjs, or .cjs extensions during compilation. This allows you to seamlessly develop using .ts files and still have compatible output for JavaScript environments.",
	"CICD - Bundling - Packaging - Modules - ESM - import - module nodenext": "When importing JSON files, TypeScript now requires an import assertion that specifies the type of the module: import config from './config.json' assert { type: 'json' };",

	"CICD - Building": "SECTION",
	"CICD - Building - NullishCheck": "In TypeScript 5.6. the compiler will throw errors when it figures out that a truthy or nullish check is guaranteed to always evaluate in a certain way.",
	"CICD - Building - NotInitialized": "With TypeScript 5.7, the compiler now accurately detects uninitialized variables, even when they are accessed inside nested functions, preventing potential runtime errors",
	"CICD - Building - Process": "Parser > AST > Binder > Symbols > TypeChecker > TypeInfo > Emitter > JSOutput",
	"CICD - Building - Process - Parser": "Converts source code into an Abstract Syntax Tree (AST)",
	"CICD - Building - Process - Binder": "Creates symbols to connect declarations of the same entity across the entire program",
	"CICD - Building - Process - TypeChecker": "Performs semantic analysis and generates type information",
	"CICD - Building - Process - Emitter": "Outputs JavaScript code based on the AST and type information",

	"CICD - Execution": "SECTION",
	"CICD - Execution - Scopes": "",
	"CICD - Execution - Scopes - public": "public — Default if not mentioned and allows the class member to be accessed from anywhere.",
	"CICD - Execution - Scopes - private": "private- The class member can be accessed from only within the class.",
	"CICD - Execution - Scopes - protected": "protected — The class member can be accessed by itself or an inherited class.",
	"CICD - Execution - Engines": "",
	"CICD - Execution - Engines - node-ts": "",
	"CICD - Execution - Engines - ts-node-dev": "",
	"CICD - Execution - Engines - tsx": "tsx stands for TypeScript Execute and it's a Node.js enhancement to run TypeScript."

}