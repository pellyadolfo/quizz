{

	"Definition": "SECTION",
	"Richardson Maturity Model": "Level 0: Swamp of POX. Level 0 uses its implementing protocol (normally HTTP, but it doesn't have to be) like a transport protocol. Level 1: Resources. When your API can distinguish between different resources, it might be level 1. This level uses multiple URIs, where every URI is the entry point to a specific resource. Level 2: HTTP verbs. This level indicates that your API should use the protocol properties in order to deal with scalability and failures. Don't use a single POST method for all, but make use of GET when you are requesting resources, and use the DELETE method when you want to delete a resources. Also, use the response codes of your application protocol. Don't use 200 (OK) code when something went wrong for instance. Level 3: Hypermedia controls Level 3, the highest level, uses HATEOAS to deal with discovering the possibilities of your API towards the clients.",
	"REST Constraints (6 from thesis)": "Uniform Interface, Stateless, Cacheable, Client-Server, Layered System, Code on Demand (optional)",
	"REST Constraint. 1. Uniform Interface": "*(1) Resource-Based (Individual resources are identified in requests using URIs as resource identifiers), (2) Manipulation of Resources Through Representations (When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource on the server, provided i has permission to do so). (3) Self-descriptive Messages (Each message includes enough information to describe how to process the message). (4) Hypermedia as the Engine of Application State (HATEOAS) (Clients deliver state via body contents, query-string parameters, request headers and the requested URI (the resource name). Services deliver state to clients via body content, response codes, and response headers. This is technically referred-to as hypermedia (or hyperlinks within hypertext).",
	"REST Constraint. 2. Stateless": "As REST is an acronym for REpresentational State Transfer, statelessness is key. Essentially, what this means is that the necessary state to handle the request is contained within the request itself, whether as part of the URI, query-string parameters, body, or headers. The URI uniquely identifies the resource and the body contains the state (or state change) of that resource. Then after the server does it's processing, the appropriate state, or the piece(s) of state that matter, are communicated back to the client via headers, status and response body.",
	"REST Constraint. 3. Cacheable": "As on the World Wide Web, clients can cache responses. Responses must therefore, implicitly or explicitly, define themselves as cacheable, or not, to prevent clients reusing stale or inappropriate data in response to further requests. Well-managed caching partially or completely eliminates some client–server interactions, further improving scalability and performance.",
	"REST Constraint. 4. Client-Server": "The uniform interface separates clients from servers. This separation of concerns means that, for example, clients are not concerned with data storage, which remains internal to each server, so that the portability of client code is improved. Servers are not concerned with the user interface or user state, so that servers can be simpler and more scalable. Servers and clients may also be replaced and developed independently, as long as the interface is not altered.",
	"REST Constraint. 5. Layered System": "A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Intermediary servers may improve system scalability by enabling load-balancing and by providing shared caches. Layers may also enforce security policies.",
	"REST Constraint. 6. Code on Demand (optional)": "Servers are able to temporarily extend or customize the functionality of a client by transferring logic to it that it can execute. Examples of this may include compiled components such as Java applets and client-side scripts such as JavaScript. Complying with these constraints, and thus conforming to the REST architectural style, will enable any kind of distributed hypermedia system to have desirable emergent properties, such as performance, scalability, simplicity, modifiability, visibility, portability and reliability. NOTE: The only optional constraint of REST architecture is code on demand. If a service violates any other constraint, it cannot strictly be referred to as RESTful.",

	"Designing": "SECTION",
	"Designing a REST API": "(1) Identify Object Model. The very first step in designing a REST API based application is – identifying the objects which will be presented as resources. (2) Now when object model is ready, it’s time to decide the resource URIs. At this step, while designing the resource URIs – focus on the relationship between resources and its sub-resources. These resource URIs are endpoints for RESTful services. These URIs do not use any verb or operation. It’s very important to not include any verb in URIs. URIs should all be nouns only. (3) Determine Representations Now when resource URIs have been decided, let’s work on their representations. Mostly representations are defined in either XML or JSON format. (4) Assign HTTP Methods So our resource URIs and their representation are fixed now. Let’s decide the possible operations in application and map these operations on resource URIs. A user of network application can perform browse, create, update or delete operations. So let’s map them. (5) You need to work on other aspects of the application as well: Logging, Security, Discovery etc.",

	"Transport": "SECTION",
	"Are REST and HTTP the same thing?": "There is nothing in the REST constraints that makes the usage of HTTP as a transfer protocol mandatory. It's perfectly possible to use other transfer protocols like SNMP, SMTP and others to use, and your API could still very well be a RESTful API In practice, most - if not all - RESTful APIs currently use HTTP as a transport layer, since the infrastructure, servers and client libraries for HTTP are widely available already",

	"Methods": "SECTION",
	"REST Methods - idempotency and safety contract": "It is a contract defined by the HTTP standard that developers must adhere to when implementing RESTful APIs over HTTP. An operation doesn’t automatically become idempotent or safe just because it is invoked using the GET method, if it isn’t implemented in an idempotent manner",
	"REST Methods - safe methods": "Some idempotent operations have an additional, special property: they do not modify the state on the server side at all. Simply put, these methods are read-only and have absolutely zero side-effects. These types of operations are given a special name: safe or nullipotent methods. Safe HTTP method are GET and HEAD, which doesn't change the resource representation on the Server, but all other HTTP methods e.g. POST, PUT, or DELETE are non-safe.",
	"REST Methods - Idempotent methods": "In the context of REST APIs, when making multiple identical requests has the same effect as making a single request – then that REST API is called idempotent. If you follow REST principles in designing API, you will have automatically idempotent REST APIs for GET, PUT, DELETE, HEAD, OPTIONS and TRACE HTTP methods. Only POST APIs will not be idempotent. Idempotency in REST does not mean that consecutive calls to the same method and resource must return the same response, but rather that consecutive calls to the same method and resource MUST have the same intended effect on the server.",
	"REST Methods - HTTP GET": "Use GET requests to retrieve resource representation/information only – and not to modify it in any way. As GET requests do not change the state of the resource, these are said to be safe methods. Additionally, GET APIs should be idempotent. Responses if item: 200 (OK), single user. 404 (Not Found), if ID not found or invalid. Responses if collection: 200 (OK), list of users. Use pagination, sorting and filtering to navigate big lists.",
	"REST Methods - HTTP POST": "POST methods are used to create a new resource into the collection of resources. Responses to this method are not cacheable. POST is neither safe nor idempotent and invoking two identical POST requests will result in two different resources containing the same information (except resource ids). Responses if item: Avoid using POST on single resource. Responses if collection: 201 (Created), ‘Location’ header with link to /users/{id} containing new ID.",
	"REST Methods - HTTP PUT": "Use PUT APIs primarily to update existing resource (if the resource does not exist then API may decide to create a new resource or not). If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable. Responses if item: 200 (OK) or 204 (No Content). Use 404 (Not Found), if ID not found or invalid.. Responses if collection: 404 (Not Found), unless you want to update every resource in the entire collection of resource.",
	"REST Methods - HTTP DELETE": "As the name applies, DELETE APIs are used to delete resources (identified by the Request-URI). DELETE operations are idempotent. If you DELETE a resource, it’s removed from the collection of resource. Repeatedly calling DELETE API on that resource will not change the outcome – however calling DELETE on a resource a second time will return a 404 (NOT FOUND) since it was already removed. Some may argue that it makes DELETE method non-idempotent. It’s a matter of discussion and personal opinion. If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable. Responses if item: 200 (OK). 404 (Not Found), if ID not found or invalid. Responses if collection: 404 (Not Found), unless you want to delete the whole collection — use with caution.",
	"REST Methods - HTTP PATCH": "HTTP PATCH requests are to make partial update on a resource. If you see PUT requests also modify a resource entity so to make more clear – PATCH method is the correct choice for partially updating an existing resource and PUT should only be used if you’re replacing a resource in its entirety. Support for PATCH in browsers, servers, and web application frameworks is not universal. PATCH method is not a replacement for the POST or PUT methods. It applies a delta (diff) rather than replacing the entire resource. Responses if item: 200 (OK) or 204 (No Content). Use 404 (Not Found), if ID not found or invalid. Responses if collection: 404 (Not Found), unless you want to modify the collection itself.",
	"REST Methods - HTTP OPTIONS": "This method allows the client of the REST API to determine, which HTTP method ( GET, HEAD, POST, PUT, DELETE ) can be used for a resource identified by requested URI, without initiating a resource request by using any particular HTTP method. Response to this method are not cacheable.",
	"REST Methods - HTTP HEAD": "Simply put, HEAD returns all of the HTTP headers, just like GET, but provides no body content. All of the same rules regarding content caching can be applied, regarding headers in the request/response.",
	"REST Methods - HTTP POST vs HTTP PUT vs HTTP PATCH": "PUT is for creating or conmpletely updating a single resource when you know the URL (e.g. create update object). It is idempotent. POST is to create when you do not know the URL (e.g.adding item to a collection). No idempotent, PATCH is to update part of a resource when you know the URL. Idempotent",

	"Features": "SECTION",
	"REST Features": "The basic purpose of HTTP caching is to provide a mechanism for applications to scale better and perform faster.",
	"REST Features ": "HTTP caching involves the client, the proxy, and the server. In this post, we will discuss mainly the proxy, which sits between the client and server. Typically, reverse proxies are deployed close to the server, and forward proxies close to the client.",
	"REST Features - Caching - proxy": "A typical proxy caches idempotent requests. HTTP caching is applicable by default only to idempotent requests, only idempotent and nullipotent requests yield the same result when run multiple times. In the HTTP world, this fact means that GET requests can be cached but POST requests cannot.",
	"REST Features - Caching - idempotent calls": "A typical proxy caches idempotent requests. The proxy gets the request, examines it for cache headers, and sends it to the server. Then the proxy examines the response and, if it is cacheable, caches it with the URL as the key (along with some headers in certain cases) and the response as the value.  This scheme works well with GET requests, because for the same URL repeated invocation does not change the response. Intermediaries can make use of this idempotency to safely cache GET requests. But this is not the case with an idempotent POST request. The URL (and headers) cannot be used as the key because the response could be different – the same URL, but with a different body.",
	"REST Features - Caching - no idempotent calls (POST)": "Responses to POST method are not cacheable, UNLESS the response includes appropriate Cache-Control or Expires header fields.",
	"REST Features - Caching - headers": "HTTP response headers: Expires, Cache-Control, ETag, Last-Modified",
	"REST Features - Compression": "HTTP response headers: Accept-Encoding, Content-Encoding",
	"REST Features - Content Negotiation": "HTTP response headers: Content-Type, Accept",
	"REST Features - Versioning": "(1) Using URI: /api/v1/customer/{id}, (2) Using Custom Request Header: Accept-version: v1, (3) Using Accept header: Accept: application/vnd.example.v1+json",
	"REST Features - Security - Authentication": "",
	"REST Features - Security - Authentication - HTTP Basic Authentication": "",
	"REST Features - Security - Authentication - HTTP Digest Authentication": "",
	"REST Features - Security - Authentication - Token Based Authentication": "",
	"REST Features - Security - Authorization": "",
	"REST Features - Security - Input Validation": "",
	"REST Features - Security - Encryption": ""
}