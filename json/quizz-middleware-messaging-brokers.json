{

	"WebSphereMQ": "SECTION",
  "WebSphereMQ - Features - MesageModel": "Queue-topic based",
  "WebSphereMQ - Features - Persistence": "Yes, strong durability",
  "WebSphereMQ - Features - Performance": "Moderate to high",

  "RabbitMQ": "SECTION",
  "RabbitMQ - Features - MesageModel": "Queue based (push)",
  "RabbitMQ - Features - Persistence": "Yes, durable queues",
  "RabbitMQ - Features - Performance": "Moderate",
  "RabbitMQ - Usage - OptimizedFor": "The Lightweight and Versatile Choice. Best for: Task queues, real-time messaging, and microservices communication. Choose RabbitMQ for lightweight messaging and quick integrations.",
  "RabbitMQ - Usage - Strength": "Built on the AMQP protocol, enabling reliable message delivery. Supports message acknowledgment, flexible routing, and prioritization. Easy setup and integration across multiple languages.",
  "RabbitMQ - Usage - UseCase:": "Asynchronous workflows like email notifications or order processing.",

  "ActiveMQ": "SECTION",
  "ActiveMQ - Features - MesageModel": "Queue-topic based",
  "ActiveMQ - Features - Persistence": "Yes",
  "ActiveMQ - Features - Performance": "Moderate",
  "ActiveMQ - Usage - OptimizedFor": "The Enterprise-Ready Solution Best for: Protocol-heavy enterprise systems and legacy integrations. Go with ActiveMQ for robust, enterprise-level messaging needs.",
  "ActiveMQ - Usage - Strength": "Supports a variety of messaging protocols (AMQP, MQTT, JMS). Rich support for traditional patterns like point-to-point and publish/subscribe. Reliable and proven in enterprise environments.",
  "ActiveMQ - Usage - UseCase": "Integrating legacy systems with modern apps or cross-protocol communication.",

  "Kafka": "SECTION",
  "Kafka - Features - MesageModel": "Log based (pull)",
  "Kafka - Features - Persistence": "Yes, log storage and retention",
  "Kafka - Features - Performance": "High",
	"Kafka - Features": "Apache Kafka is developed in Scala and started out at LinkedIn. Kafka only provides a total order over messages within a partition, not between different partitions in a topic.",
  "Kafka - KafkaMessage ": "Message is the basic unit of data in Kafka. It consists of headers, key, and value. ",
  "Kafka - KafkaTopics ": "Messages are organized into topics, which are divided into partitions for scalability. Every message goes to a particular Topic. Topics have multiple partitions.",
  "Kafka - KafkaTopics - RetentionPolicy": "Adjust log.retention.hours & segment.bytes wisely.",
	"Kafka - KafkaPartitions": "",
	"Kafka - KafkaPartitions - Strategies": "",
	"Kafka - KafkaCluster ": "A Kafka cluster consists of several brokers where each partition is replicated across multiple brokers to provide high availability and redundancy. ",
	"Kafka - KafkaProducer ": "Producers in Kafka create new messages, batch them, and send them to a Kafka topic.",
	"Kafka - KafkaProducer - Tuning": "Set acks=all, tweak linger.ms & batch.size for efficiency.",
	"Kafka - KafkaProducer - Idempotent": "Enable enable.idempotence=true for exactly-once delivery.",
	"Kafka - KafkaConsumer ": "Kafka consumers work together as a consumer group to read messages from the broker. ",
	"Kafka - KafkaConsumer - Balanced": "Ensure even consumer distribution across partitions.",
  "Kafka - Usage - OptimizedFor": "The Real-Time Data Streamer. Best for: High-throughput event streaming, big data pipelines, and log aggregation. Pick Kafka for large-scale, real-time event-driven systems.",
  "Kafka - Usage - Strength": "Distributed and partitioned for scalability and fault-tolerance. Optimized for event-driven architectures and real-time analytics. Includes stream processing capabilities via Kafka Streams and KSQL.",
  "Kafka - Usage - Advantages": "Kafka can handle multiple producers and consumers, while providing disk-based data retention and high scalability. ",
	"Kafka - Usage - UseCase": "Streaming IoT data or powering real-time financial dashboards.",
	"Kafka - Usage - UseCases - LogProcessing ": "Log Processing and Analysis: Efficiently handles massive volumes of log data for analysis and insight generation.",
	"Kafka - Usage - UseCases - DataStreaming ": "Data Streaming for Recommendations: Powers real-time data streaming to deliver personalized recommendations.",
	"Kafka - Usage - UseCases - SystemMonitoring ": "System Monitoring and Alerting: Facilitates real-time monitoring and alerting systems for timely responses to system metrics.",
	"Kafka - Usage - UseCases - ChangeDataCapture ": "Change Data Capture (CDC): Captures and processes database changes to keep data in sync across systems.",
	"Kafka - Usage - UseCases - SystemMigration ": "System Migration: Supports the seamless migration of systems by ensuring data consistency and availability.",
	"Kafka - Usage - UseCases - MonitorLag ": "Use Kafka Manager or Prometheus to track consumer lag.",
	"Kafka - Usage - UseCases - StreamProcessing ": "Use Kafka Streams or Flink for real-time processing.",

	"NATS": "SECTION",
  "NATS - Features - MesageModel": "Subject-based (pub-sub)",
  "NATS - Features - Persistence": "Optionally, memory first with persistance",
  "NATS - Features - Performance": "Extremely fast and light weight",

	"Bufstream": "SECTION",
  "Bufstream - Features - MesageModel": "",
	"Bufstream ": "https://www.linkedin.com/posts/nikkisiapno_kafka-vs-bufstream-whats-the-difference-activity-7307343842318462976-Agz1/",

	"Brokers - Mosquito": "",
	"Brokers - Pushy": "",
	"Brokers - VerneMQ": "",
	"Brokers - IBM Bluemix": "",
	"Brokers - IBM IoT MessageSight": "",
	"Brokers - IBM WebSphere MQ Telemetry": "",
	"Brokers - HiveMQ": "",
	"Brokers - Azure IoT": "",
	"Brokers - ThingMQ": "",
	"Brokers - ThingStudio": "",
	"Brokers - cloudMQTT": "",
	"Brokers - Heroku CloudMQTT": "",
	"Brokers - MachineHead": "",
	"Brokers - Mercury": "This is a message broker that enables some common messaging patterns over WebSockets.",
	"Brokers - JMS PTP": "",
	"Brokers - ZeroMQ": "",
	"Brokers - AWS SQS": "",
	"Brokers - AWS SNS": "",
	"Brokers - AWS Kinesis": "",
	"Brokers - AWS AmazonMQ": "",
	"Brokers - Microsoft Azure Event Hubs": "",
	"Brokers - Google pub/sub": "",
	"Brokers - Spark Streams": ""

}