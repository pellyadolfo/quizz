{
	"REST ": "SECTION",
	"REST - Requirements - Constraints - (6 from thesis)": "Uniform Interface, Stateless, Cacheable, Client-Server, Layered System, Code on Demand (optional)",
	"REST - Requirements - Constraints - 1. Uniform Interface": "*(1) Resource-Based (Individual resources are identified in requests using URIs as resource identifiers), (2) Manipulation of Resources Through Representations (When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource on the server, provided i has permission to do so). (3) Self-descriptive Messages (Each message includes enough information to describe how to process the message). (4) Hypermedia as the Engine of Application State (HATEOAS) (Clients deliver state via body contents, query-string parameters, request headers and the requested URI (the resource name). Services deliver state to clients via body content, response codes, and response headers. This is technically referred-to as hypermedia (or hyperlinks within hypertext).",
	"REST - Requirements - Constraints - 2. Stateless": "As REST is an acronym for REpresentational State Transfer, statelessness is key. Essentially, what this means is that the necessary state to handle the request is contained within the request itself, whether as part of the URI, query-string parameters, body, or headers. The URI uniquely identifies the resource and the body contains the state (or state change) of that resource. Then after the server does it's processing, the appropriate state, or the piece(s) of state that matter, are communicated back to the client via headers, status and response body.",
	"REST - Requirements - Constraints - 3. Cacheable": "As on the World Wide Web, clients can cache responses. Responses must therefore, implicitly or explicitly, define themselves as cacheable, or not, to prevent clients reusing stale or inappropriate data in response to further requests. Well-managed caching partially or completely eliminates some client–server interactions, further improving scalability and performance.",
	"REST - Requirements - Constraints - 4. Client-Server": "The uniform interface separates clients from servers. This separation of concerns means that, for example, clients are not concerned with data storage, which remains internal to each server, so that the portability of client code is improved. Servers are not concerned with the user interface or user state, so that servers can be simpler and more scalable. Servers and clients may also be replaced and developed independently, as long as the interface is not altered.",
	"REST - Requirements - Constraints - 5. Layered System": "A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Intermediary servers may improve system scalability by enabling load-balancing and by providing shared caches. Layers may also enforce security policies.",
	"REST - Requirements - Constraints - 6. Code on Demand (optional)": "Servers are able to temporarily extend or customize the functionality of a client by transferring logic to it that it can execute. Examples of this may include compiled components such as Java applets and client-side scripts such as JavaScript. Complying with these constraints, and thus conforming to the REST architectural style, will enable any kind of distributed hypermedia system to have desirable emergent properties, such as performance, scalability, simplicity, modifiability, visibility, portability and reliability. NOTE: The only optional constraint of REST architecture is code on demand. If a service violates any other constraint, it cannot strictly be referred to as RESTful.",
	"REST - Requirements - Richardson Maturity Model": "",
	"REST - Requirements - Richardson Maturity Model - Level0": "Level 0: Level 0 uses its implementing protocol (normally HTTP, but it doesn't have to be) like a transport protocol (Swamp of POX).",
	"REST - Requirements - Richardson Maturity Model - Level1": "Level 1: Resources. When your API can distinguish between different resources, it might be level 1. This level uses multiple URIs, where every URI is the entry point to a specific resource.",
	"REST - Requirements - Richardson Maturity Model - Level2": "Level 2: HTTP verbs. This level indicates that your API should use the protocol properties in order to deal with scalability and failures. Don't use a single POST method for all, but make use of GET when you are requesting resources, and use the DELETE method when you want to delete a resources. Also, use the response codes of your application protocol. Don't use 200 (OK) code when something went wrong for instance. ",
	"REST - Requirements - Richardson Maturity Model - Level3": "Level 3: Hypermedia controls Level 3, the highest level, uses HATEOAS to deal with discovering the possibilities of your API towards the clients.",
	"REST - Protocols": "Typically HTTP but nothing makes HTTP mandatory. Can be SNMP, SMTP and others to use.",
	"REST - Design": ".",
	"REST - Design - 1-ObjectModel": "(1) Identify Object Model. Identifying the objects which will be presented as resources.",
	"REST - Design - 2-ResourceURIs": "(2) Decide the resource URIs.",
	"REST - Design - 2-ResourceURIs - endpoints": "These resource URIs are endpoints for RESTful services..",
	"REST - Design - 2-ResourceURIs - nouns": "These URIs do not use any verb or operation. URIs should all be nouns only.",
	"REST - Design - 3-Representations": "(3) Determine Representations in either XML or JSON format.",
	"REST - Design - 4-HTTPMethods": "(4) Assign HTTP Methods.",
	"REST - Design - 4-HTTPMethods - GET": "Use GET requests to retrieve resource representation/information only – and not to modify it in any way.",
	"REST - Design - 4-HTTPMethods - GET - Response - ifItem": "Responses if item: 200 (OK), single user. 404 (Not Found), if ID not found or invalid.",
	"REST - Design - 4-HTTPMethods - GET - Response - ifCollection": "Responses if collection: 200 (OK), list of users.",
	"REST - Design - 4-HTTPMethods - GET - Properties - Safe": "As GET requests do not change the state of the resource, these are said to be safe methods.",
	"REST - Design - 4-HTTPMethods - GET - Properties - Idempotent": "Additionally, GET APIs should be idempotent.",
	"REST - Design - 4-HTTPMethods - GET - Operations - Pagination": "Use pagination, sorting and filtering to navigate big lists.",
	"REST - Design - 4-HTTPMethods - POST": "Create a new resource into the collection of resources.",
	"REST - Design - 4-HTTPMethods - POST - Response - ifItem": "Responses if item: Avoid using POST on single resource.",
	"REST - Design - 4-HTTPMethods - POST - Response - ifCollection": "Responses if collection: 201 (Created), ‘Location’ header with link to /users/{id} containing new ID.",
	"REST - Design - 4-HTTPMethods - PUT": "Update existing resource (if the resource does not exist then API may decide to create a new resource or not).",
	"REST - Design - 4-HTTPMethods - PUT - Response - ifItem": "Responses if item: 200 (OK) or 204 (No Content). Use 404 (Not Found), if ID not found or invalid.",
	"REST - Design - 4-HTTPMethods - PUT - Response - ifCollection": "Responses if collection: 404 (Not Found), unless you want to update every resource in the entire collection of resource.",
	"REST - Design - 4-HTTPMethods - PUT - Operations - Caching": "If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.",
	"REST - Design - 4-HTTPMethods - DELETE": "delete resources (identified by the Request-URI). If you DELETE a resource, it’s removed from the collection of resource.",
	"REST - Design - 4-HTTPMethods - DELETE - Response - ifItem": "Responses if item: 200 (OK). 404 (Not Found), if ID not found or invalid.",
	"REST - Design - 4-HTTPMethods - DELETE - Response - ifCollection": "Responses if collection: 404 (Not Found), unless you want to delete the whole collection — use with caution.",
	"REST - Design - 4-HTTPMethods - DELETE - Properties - Idempotent": "DELETE operations are idempotent. Repeatedly calling DELETE API on that resource will not change the outcome – however calling DELETE on a resource a second time will return a 404 (NOT FOUND) since it was already removed. Some may argue that it makes DELETE method non-idempotent. It’s a matter of discussion and personal opinion. ",
	"REST - Design - 4-HTTPMethods - DELETE - Operations - Caching": "If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.",
	"REST - Design - 4-HTTPMethods - PATCH": "make partial update on a resource. If you see PUT requests also modify a resource entity so to make more clear – PATCH method is the correct choice for partially updating an existing resource and PUT should only be used if you’re replacing a resource in its entirety. Support for PATCH in browsers, servers, and web application frameworks is not universal. PATCH method is not a replacement for the POST or PUT methods. It applies a delta (diff) rather than replacing the entire resource.",
	"REST - Design - 4-HTTPMethods - PATCH - Response - ifItem": "Responses if item: 200 (OK) or 204 (No Content). Use 404 (Not Found), if ID not found or invalid.",
	"REST - Design - 4-HTTPMethods - PATCH - Response - ifCollection": "Responses if collection: 404 (Not Found), unless you want to modify the collection itself.",
	"REST - Design - 4-HTTPMethods - OPTIONS": "This method allows the client of the REST API to determine, which HTTP method ( GET, HEAD, POST, PUT, DELETE ) can be used for a resource identified by requested URI, without initiating a resource request by using any particular HTTP method.",
	"REST - Design - 4-HTTPMethods - OPTIONS - Operations - Caching": "Response to this method are not cacheable.",
	"REST - Design - 4-HTTPMethods - HEAD": "returns all of the HTTP headers, just like GET, but provides no body content. All of the same rules regarding content caching can be applied, regarding headers in the request/response.",
	"REST - Design - 4-HTTPMethods - HTTP POST vs HTTP PUT vs HTTP PATCH": "PUT is for creating or conmpletely updating a single resource when you know the URL (e.g. create update object). It is idempotent. POST is to create when you do not know the URL (e.g.adding item to a collection). No idempotent, PATCH is to update part of a resource when you know the URL. Idempotent",
	"REST - Design - 5-Other": "(5) You need to work on other aspects of the application as well: Logging, Security, Discovery etc.",
	"REST - ContentNegotiation - Accept": "Specifies what response format the client can handle.",
	"REST - ContentNegotiation - Content-Type": "Specifies the format of the data being sent (request body or response body).",
	"REST - Versioning": "",
	"REST - Versioning - /v1/": "(1) Using URI: /api/v1/customer/{id}",
	"REST - Versioning - Accept": "(2) Using Accept header: Accept: application/vnd.example.v1+json",
	"REST - Versioning - Accept-version": "(3) Using Custom Request Header: Accept-version: v1",
	"REST - Security": "Enforce HTTPS, use OAuth 2.0, implement rate limiting, and validate all inputs.",
	"REST - Caching": "The basic purpose of HTTP caching is to provide a mechanism for applications to scale better and perform faster.",
	"REST - Caching - scope": "HTTP caching involves client, forward proxy, reverse proxy and server.",
	"REST - Caching - headers": "HTTP response headers: Expires, Cache-Control, ETag, Last-Modified",
	"REST - Caching - headers - Expire": ".",
	"REST - Caching - headers - ETag": "ETags (Entity Tags) are HTTP response headers (ETag) that act as unique identifiers for a specific version of a resource. They help browsers and servers determine whether a cached resource is still fresh or needs to be re-downloaded.",
	"REST - Caching - headers - Cache-Control": ".",
	"REST - Caching - headers - Last-Modified": ".",
	"REST - Caching - proxy": "A typical proxy caches idempotent and nullipotent requests.",
	"REST - Caching - proxy - Nullipotent": "GET and HEAD. Safe or nullipotent methods. Read-only. They do not modify the state on the server.",
	"REST - Caching - proxy - Idempotent": "PUT (override), DELETE (after first), OPTIONS and TRACE. Multiple identical requests has the same effect in server. Developers must adhere to when implementing RESTful APIs over HTTP.",
	"REST - Caching - proxy - NoIdempotent": "Responses to POST are not idempotent. They are not cacheable UNLESS the response includes appropriate Cache-Control or Expires header fields.",
	"REST - ResponseSize - Compression": "HTTP response headers: Accept-Encoding, Content-Encoding",
	"REST - ResponseSize - Pagination": "GET - Limit large datasets (?page=1&size=10).",
	"REST - ResponseSize - Filtering": "GET - Focused searches (?name=sketech).",
	"REST - ResponseSize - Sorting": "GET - Organize results (?sort=name).",

	"REST - JAX-RS": "SECTION",
	"REST - JAX-RS ": "JAX-RS is a standard defined in Java Specification Request 311 (JSR-311). JAX-RS is only a specification and it needs a compatible implementation to be used.",
	"REST - JAX-RS - JAX-RS 1.0 - 2008": "When JAX-RS 1.0 was first unveiled back in 2008.",
	"REST - JAX-RS - JAX-RS 1.1 - 2010": "From version 1.1 on, JAX-RS is an official part of Java EE 6. A notable feature of being an official part of Java EE is that no configuration is necessary to start using JAX-RS.",
	"REST - JAX-RS - JAX-RS 2.0 - 2011": "In January 2011 the JCP formed the JSR 339 expert group to work on JAX-RS 2.0.",
	"REST - JAX-RS - JAX-RS 2.1 - 2017": "On 2017-08-22 JAX-RS 2.1[4] specification final release was published. Main new supported features include server-sent events, reactive clients, and JSON-B.[5]",
	"REST - JAX-RS - Impl - Jersey": "Jersey RESTful Web Services framework is open source, production quality, framework for developing RESTful Web Services in Java that provides support for JAX-RS APIs and serves as a JAX-RS (JSR 311 & JSR 339) Reference Implementation.",
	"REST - JAX-RS - Impl - RestEasy": "JBoss's JAX-RS project.",
	"REST - JAX-RS - Impl - Restlet ": "probably the first REST framework, which existed prior to JAX-RS.",
	"REST - JAX-RS - Impl - CXF": "which is a merger between XFire and Celtix (an Open Source ESB, sponsored by IONA and originally hosted at ObjectWeb).",
	"REST - JAX-RS - Impl - ApacheWink": "",

	"REST - SpringMVC": "SECTION",
	"REST - SpringMVC ": "Spring MVC module provides capabilities to write RESTful web services.",

	"REST - SpringDataREST": "SECTION",
	"REST - SpringDataREST ": "The core functionality of Spring Data REST is to export resources for Spring Data repositories. Thus, the core artifact to look at and potentially customize the way the exporting works is the repository interface.",
	"REST - SpringDataREST - configure - add - as springboot": "<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-rest</artifactId> </dependency>",
	"REST - SpringDataREST - configure - add - as dependency": "<dependency> <groupId>org.springframework.data</groupId> <artifactId>spring-data-rest-webmvc</artifactId> </dependency>",
	"REST - SpringDataREST - configure - settings - RepositoryDetectionStrategy": "Spring Data REST uses a RepositoryDetectionStrategy to determine whether a repository is exported as a REST resource.",
	"REST - SpringDataREST - configure - settings - RepositoryDetectionStrategy - DEFAULT": "Exposes all public repository interfaces but considers the exported flag of @(Repository)RestResource.",
	"REST - SpringDataREST - configure - settings - RepositoryDetectionStrategy - ALL": "Exposes all repositories independently of type visibility and annotations.",
	"REST - SpringDataREST - configure - settings - RepositoryDetectionStrategy - ANNOTATION": "Only repositories annotated with @(Repository)RestResource are exposed, unless their exported flag is set to false.",
	"REST - SpringDataREST - configure - settings - RepositoryDetectionStrategy - VISIBILITY": "Only public repositories annotated are exposed.",
	"REST - SpringDataREST - configure - mechanism - application.properties": "spring.data.rest.<property>=<value>",
	"REST - SpringDataREST - configure - mechanism - RepositoryRestConfigurer": "create a @Bean as @Bean  public RepositoryRestConfigurer repositoryRestConfigurer() { ... }",
	"REST - SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureConversionService(ConfigurableConversionService conversionService)": "Override this method to add your own converters.",
	"REST - SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureExceptionHandlerExceptionResolver(ExceptionHandlerExceptionResolver exceptionResolver)": "Configure the ExceptionHandlerExceptionResolver.",
	"REST - SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureHttpMessageConverters(List<HttpMessageConverter< ?>> messageConverters)": "Configure the available HttpMessageConverters by adding your own.",
	"REST - SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureJacksonObjectMapper(com.fasterxml.jackson.databind.ObjectMapper objectMapper)": "Configure the Jackson ObjectMapper directly.",
	"REST - SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureRepositoryRestConfiguration(RepositoryRestConfiguration config)": "Override this method to add additional configuration.",
	"REST - SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureValidatingRepositoryEventListener(ValidatingRepositoryEventListener validatingListener)": "Override this method to add validators manually.",
	"REST - SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - withConfig(Consumer<RepositoryRestConfiguration> consumer)": "Convenience method to easily create simple RepositoryRestConfigurer instances that solely want to tweak the RepositoryRestConfiguration.",
	"REST - SpringDataREST - configure - mechanism - RepositoryRestConfigurer - adapter - RepositoryRestConfigurerAdapter": "@Override public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) { config.setBasePath('/api'), }",
	"REST - SpringDataREST - exposingRepository - basis": "public interface OrderRepository extends CrudRepository<Order, Long> { } For this repository, Spring Data REST exposes a collection resource named after the uncapitalized, pluralized version of the domain class the exported repository is handling, i.e. /orders",
	"REST - SpringDataREST - exposingRepository - basis - properties - basePath": "the root URI for Spring Data REST",
	"REST - SpringDataREST - exposingRepository - basis - properties - defaultPageSize": "change the default for the number of items served in a single page",
	"REST - SpringDataREST - exposingRepository - basis - properties - maxPageSize": "change the maximum number of items in a single page",
	"REST - SpringDataREST - exposingRepository - basis - properties - pageParamName": "change the name of the query parameter for selecting pages",
	"REST - SpringDataREST - exposingRepository - basis - properties - limitParamName": "change the name of the query parameter for the number of items to show in a page",
	"REST - SpringDataREST - exposingRepository - basis - properties - sortParamName": "change the name of the query parameter for sorting",
	"REST - SpringDataREST - exposingRepository - basis - properties - defaultMediaType": "change the default media type to use when none is specified",
	"REST - SpringDataREST - exposingRepository - basis - properties - returnBodyOnCreate": "change whether a body should be returned when creating a new entity",
	"REST - SpringDataREST - exposingRepository - basis - properties - returnBodyOnUpdate": "change whether a body should be returned when updating an entity",
	"REST - SpringDataREST - exposingRepository - basis - methods": "Which HTTP resources are exposed for a certain repository is mostly driven by the structure of the repository. In other words, the resource exposure will follow which methods you have exposed on the repository. If you extend CrudRepository you usually expose all methods required to expose all HTTP resources we can register by default. ",
	"REST - SpringDataREST - exposingRepository - basis - methods - restricting": "Repositories that are not exposing those methods — either by not declaring them at all or explicitly using @RestResource(exported = false) — won’t expose those HTTP methods on those resources.",
	"REST - SpringDataREST - exposingRepository - basis - status - 200 OK": "For plain GET requests.",
	"REST - SpringDataREST - exposingRepository - basis - status - 201 Created": "For POST and PUT requests that create new resources.",
	"REST - SpringDataREST - exposingRepository - basis - status - 204 No Content": "For PUT, PATCH, and DELETE requests when the configuration is set to not return response bodies for resource updates (RepositoryRestConfiguration.returnBodyOnUpdate). If the configuration value is set to include responses for PUT, 200 OK is returned for updates, and 201 Created is returned for resource created through PUT.",
	"REST - SpringDataREST - exposingRepository - HAL": "Spring Data REST uses HAL to render responses. HAL defines the links to be contained in a property of the returned document.",
	"REST - SpringDataREST - exposingRepository - HAL - list": "To discover what resources are available at the root of the application, issue an HTTP GET to the root URL, as follows: curl -v http://localhost:8080/",
	"REST - SpringDataREST - exposingRepository - path - collection": "Spring Data REST exposes a collection resource at /orders. The path is derived from the uncapitalized, pluralized, simple class name of the domain class being managed.",
	"REST - SpringDataREST - exposingRepository - path - collection - methods": "Collections resources support both GET and POST. All other HTTP methods cause a 405 Method Not Allowed.",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - GET": "Returns all entities the repository servers through its findAll(…) method. If the repository is a paging repository we include the pagination links if necessary and additional page metadata.",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - GET - findAll(Pageable)": "",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - GET - findAll(Pageable) - pagination": "If the repository has pagination capabilities, the resource takes the following parameters: page: The page number to access (0 indexed, defaults to 0), size: The page size requested (defaults to 20)., sort: A collection of sort directives in the format ($propertyname,)+[asc|desc]?.",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - GET - findAll(Sort)": "",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - GET - findAll()": "",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - GET - media": "The GET method supports the following media types: application/hal+json, application/json",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - HEAD": "The HEAD method returns whether the collection resource is available. It has no status codes, media types, or related resources.",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - HEAD - findAll(Pageable)": "",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - HEAD - findAll(Sort)": "",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - HEAD - findAll()": "",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - POST": "The POST method creates a new entity from the given request body.",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - POST - save()": "",
	"REST - SpringDataREST - exposingRepository - path - collection - methods - POST - media": "The POST method supports the following media types: application/hal+json, application/json",
	"REST - SpringDataREST - exposingRepository - path - item": "Spring Data REST exposes an item resource for each of the items managed by the repository under the URI template /orders/{id}.",
	"REST - SpringDataREST - exposingRepository - path - item - methods": "Item resources generally support GET, PUT, PATCH, and DELETE, unless explicit configuration prevents that",
	"REST - SpringDataREST - exposingRepository - path - item - methods - GET": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - GET - findById(…)": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - HEAD": "The HEAD method returns whether the item resource is available. It has no status codes, media types, or related resources.",
	"REST - SpringDataREST - exposingRepository - path - item - methods - HEAD - findById(…)": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - PUT": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - PUT - save()": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - PATCH": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - PATCH - save()": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - DELETE": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - DELETE - delete(T)": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - DELETE - delete(ID)": "",
	"REST - SpringDataREST - exposingRepository - path - item - methods - DELETE - delete(Iterable)": "",
	"REST - SpringDataREST - exposingRepository - path - association": "Spring Data REST exposes sub-resources of every item resource for each of the associations the item resource has. The name and path of the resource defaults to the name of the association property and can be customized by using @RestResource on the association property.",
	"REST - SpringDataREST - exposingRepository - path - association": "",
	"REST - SpringDataREST - exposingRepository - path - association": "",
	"REST - SpringDataREST - exposingRepository - path - association": "",
	"REST - SpringDataREST - exposingRepository - path - search": "",
	"REST - SpringDataREST - exposingRepository - path - search": "",
	"REST - SpringDataREST - exposingRepository - path - search": "",
	"REST - SpringDataREST - exposingRepository - path - search": "",
	"REST - SpringDataREST - exposingRepository - path - query": "",
	"REST - SpringDataREST - exposingRepository - path - query - GET": "",
	"REST - SpringDataREST - exposingRepository - path - query - GET": "",
	"REST - SpringDataREST - exposingRepository - path - query - HEAD": "",
	"REST - SpringDataREST - exposingRepository - path - query - HEAD": "",
	"REST - SpringDataREST - exposingRepository - path - custom": "The name of the resource and the path can be customized by using @RepositoryRestResource on the repository interface."

}