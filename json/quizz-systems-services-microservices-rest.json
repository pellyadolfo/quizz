{
	"REST ": "SECTION",
	"REST 0": "https://www.linkedin.com/posts/ahsandev404_apibestpractices-activity-7313801094982262784-XxlV?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",

	"REST - Requirements": "SECTION",
	"REST - Requirements - Constraints": "6 from thesis: Uniform Interface, Stateless, Cacheable, Client-Server, Layered System, Code on Demand (optional)",
	"REST - Requirements - Constraints - 1a. UniformInterface - ResourceBased": "*(1) Resource-Based (Individual resources are identified in requests using URIs as resource identifiers).",
	"REST - Requirements - Constraints - 1b. UniformInterface - Representations": "(2) Manipulation of Resources Through Representations (When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource on the server, provided i has permission to do so).",
	"REST - Requirements - Constraints - 1c. UniformInterface - SelfDescribingMessages": "*(3) Self-descriptive Messages (Each message includes enough information to describe how to process the message).",
	"REST - Requirements - Constraints - 1d. UniformInterface - HATEOAS": "*(4) Hypermedia as the Engine of Application State (HATEOAS) (Clients deliver state via body contents, query-string parameters, request headers and the requested URI (the resource name). Services deliver state to clients via body content, response codes, and response headers. This is technically referred-to as hypermedia (or hyperlinks within hypertext).",
	"REST - Requirements - Constraints - 2. Stateless": "As REST is an acronym for REpresentational State Transfer, statelessness is key. Essentially, what this means is that the necessary state to handle the request is contained within the request itself, whether as part of the URI, query-string parameters, body, or headers. The URI uniquely identifies the resource and the body contains the state (or state change) of that resource. Then after the server does it's processing, the appropriate state, or the piece(s) of state that matter, are communicated back to the client via headers, status and response body.",
	"REST - Requirements - Constraints - 3. Cacheable": "As on the World Wide Web, clients can cache responses. Responses must therefore, implicitly or explicitly, define themselves as cacheable, or not, to prevent clients reusing stale or inappropriate data in response to further requests. Well-managed caching partially or completely eliminates some client–server interactions, further improving scalability and performance.",
	"REST - Requirements - Constraints - 4. ClientServer": "The uniform interface separates clients from servers. This separation of concerns means that, for example, clients are not concerned with data storage, which remains internal to each server, so that the portability of client code is improved. Servers are not concerned with the user interface or user state, so that servers can be simpler and more scalable. Servers and clients may also be replaced and developed independently, as long as the interface is not altered.",
	"REST - Requirements - Constraints - 5. LayeredSystem": "A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Intermediary servers may improve system scalability by enabling load-balancing and by providing shared caches. Layers may also enforce security policies.",
	"REST - Requirements - Constraints - 6. CodeOnDemand": "Optional - Servers are able to temporarily extend or customize the functionality of a client by transferring logic to it that it can execute. Examples of this may include compiled components such as Java applets and client-side scripts such as JavaScript. Complying with these constraints, and thus conforming to the REST architectural style, will enable any kind of distributed hypermedia system to have desirable emergent properties, such as performance, scalability, simplicity, modifiability, visibility, portability and reliability. NOTE: The only optional constraint of REST architecture is code on demand. If a service violates any other constraint, it cannot strictly be referred to as RESTful.",
	"REST - Requirements - Richardson Maturity Model": "",
	"REST - Requirements - Richardson Maturity Model - Level0": "Level 0: Level 0 uses its implementing protocol (normally HTTP, but it doesn't have to be) like a transport protocol (Swamp of POX).",
	"REST - Requirements - Richardson Maturity Model - Level1": "Level 1: Resources. When your API can distinguish between different resources, it might be level 1. This level uses multiple URIs, where every URI is the entry point to a specific resource.",
	"REST - Requirements - Richardson Maturity Model - Level2": "Level 2: HTTP verbs. This level indicates that your API should use the protocol properties in order to deal with scalability and failures. Don't use a single POST method for all, but make use of GET when you are requesting resources, and use the DELETE method when you want to delete a resources. Also, use the response codes of your application protocol. Don't use 200 (OK) code when something went wrong for instance. ",
	"REST - Requirements - Richardson Maturity Model - Level3": "Level 3: Hypermedia controls Level 3, the highest level, uses HATEOAS to deal with discovering the possibilities of your API towards the clients.",

	"REST": "SECTION",
	"REST - Protocol - Design": ".",
	"REST - Protocol - Transport": "Typically HTTP but nothing makes HTTP mandatory. Can be SNMP, SMTP and others to use.",
	"REST - Protocol - Design - 1-ObjectModel": "(1) Identify Object Model. Identifying the objects which will be presented as resources.",
	"REST - Protocol - Design - 2-ResourceURIs": "(2) Decide the resource URIs.",
	"REST - Protocol - Design - 2-ResourceURIs - endpoints": "These resource URIs are endpoints for RESTful services..",
	"REST - Protocol - Design - 2-ResourceURIs - nouns": "These URIs do not use any verb or operation. URIs should all be nouns only.",
	"REST - Protocol - Design - 3-Representations": "(3) Determine Representations in either XML or JSON format.",
	"REST - Protocol - Design - 4-HTTPMethods": "(4) Assign HTTP Methods.",
	"REST - Protocol - Design - 5-Other": "(5) You need to work on other aspects of the application as well: Logging, Security, Discovery etc.",
	"REST - Request - HTTPMethods": "7 API methods.",
	"REST - Request - HTTPMethods - GET": "Use GET requests to retrieve resource representation/information only – and not to modify it in any way.",
	"REST - Request - HTTPMethods - GET - Response - ifItem": "Responses if item: 200 (OK), single user. 404 (Not Found), if ID not found or invalid.",
	"REST - Request - HTTPMethods - GET - Response - ifCollection": "Responses if collection: 200 (OK), list of users.",
	"REST - Request - HTTPMethods - GET - Properties - Safe": "As GET requests do not change the state of the resource, these are said to be safe methods.",
	"REST - Request - HTTPMethods - GET - Properties - Idempotent": "Additionally, GET APIs should be idempotent.",
	"REST - Request - HTTPMethods - GET - Operations - Pagination": "Use pagination, sorting and filtering to navigate big lists.",
	"REST - Request - HTTPMethods - POST": "CREATE a new resource into the collection of resources.",
	"REST - Request - HTTPMethods - POST - FileUploads": "REST is not limited, you can POST or PUT whatever content you want to (within reason, of course).",
	"REST - Request - HTTPMethods - POST - Response - ifItem": "Responses if item: Avoid using POST on single resource.",
	"REST - Request - HTTPMethods - POST - Response - ifCollection": "Responses if collection: 201 (Created), ‘Location’ header with link to /users/{id} containing new ID.",
	"REST - Request - HTTPMethods - PUT": "UPDATE existing resource (if the resource does not exist then API may decide to create a new resource or not).",
	"REST - Request - HTTPMethods - PUT - Response - ifItem": "Responses if item: 200 (OK) or 204 (No Content). Use 404 (Not Found), if ID not found or invalid.",
	"REST - Request - HTTPMethods - PUT - Response - ifCollection": "Responses if collection: 404 (Not Found), unless you want to update every resource in the entire collection of resource.",
	"REST - Request - HTTPMethods - PUT - Operations - Caching": "If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.",
	"REST - Request - HTTPMethods - PATCH": "PARTIAL UPDATE on a resource. If you see PUT requests also modify a resource entity so to make more clear – PATCH method is the correct choice for partially updating an existing resource and PUT should only be used if you’re replacing a resource in its entirety. Support for PATCH in browsers, servers, and web application frameworks is not universal. PATCH method is not a replacement for the POST or PUT methods. It applies a delta (diff) rather than replacing the entire resource.",
	"REST - Request - HTTPMethods - PATCH - Response - ifItem": "Responses if item: 200 (OK) or 204 (No Content). Use 404 (Not Found), if ID not found or invalid.",
	"REST - Request - HTTPMethods - PATCH - Response - ifCollection": "Responses if collection: 404 (Not Found), unless you want to modify the collection itself.",
	"REST - Request - HTTPMethods - DELETE": "delete resources (identified by the Request-URI). If you DELETE a resource, it’s removed from the collection of resource.",
	"REST - Request - HTTPMethods - DELETE - Response - ifItem": "Responses if item: 200 (OK). 404 (Not Found), if ID not found or invalid.",
	"REST - Request - HTTPMethods - DELETE - Response - ifCollection": "Responses if collection: 404 (Not Found), unless you want to delete the whole collection — use with caution.",
	"REST - Request - HTTPMethods - DELETE - Properties - Idempotent": "DELETE operations are idempotent. Repeatedly calling DELETE API on that resource will not change the outcome – however calling DELETE on a resource a second time will return a 404 (NOT FOUND) since it was already removed. Some may argue that it makes DELETE method non-idempotent. It’s a matter of discussion and personal opinion. ",
	"REST - Request - HTTPMethods - DELETE - Operations - Caching": "If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.",
	"REST - Request - HTTPMethods - HEAD": "returns all of the HTTP headers, just like GET, but provides no body content. All of the same rules regarding content caching can be applied, regarding headers in the request/response.",
	"REST - Request - HTTPMethods - OPTIONS": "This method allows the client of the REST API to determine, which HTTP method ( GET, HEAD, POST, PUT, DELETE ) can be used for a resource identified by requested URI, without initiating a resource request by using any particular HTTP method.",
	"REST - Request - HTTPMethods - OPTIONS - Operations - Caching": "Response to this method are not cacheable.",
	"REST - Client": "",
	"REST - Client - ServiceDiscovery": "",
	"REST - Client - ServiceDiscovery - EndPoints": "Multiple endpoints for different resources (/users, /posts)",
	"REST - Client - Caching": "REST caching leverages HTTP caching.",
	"REST - Client - Caching - proxy": "A typical proxy caches idempotent and nullipotent requests.",
	"REST - Client - Caching - proxy - Nullipotent": "GET and HEAD. Safe or nullipotent methods. Read-only. They do not modify the state on the server.",
	"REST - Client - Caching - proxy - Idempotent": "PUT (override), DELETE (after first), OPTIONS and TRACE. Multiple identical requests has the same effect in server. Developers must adhere to when implementing RESTful APIs over HTTP.",
	"REST - Client - Caching - proxy - NoIdempotent": "Responses to POST are not idempotent. They are not cacheable UNLESS the response includes appropriate Cache-Control or Expires header fields.",
	"REST - Client - Versioning": "",
	"REST - Client - Versioning - /v1/": "(1) Using URI: /api/v1/customer/{id}",
	"REST - Client - Versioning - Accept": "(2) Using Accept header: Accept: application/vnd.example.v1+json",
	"REST - Client - Versioning - Accept-version": "(3) Using Custom Request Header: Accept-version: v1",
	"REST - Client - ResponseSize - Pagination": "GET - Limit large datasets (?page=1&size=10).",
	"REST - Client - ResponseSize - Filtering": "GET - Focused searches (?name=sketech).",
	"REST - Client - ResponseSize - Sorting": "GET - Organize results (?sort=name).",
	"REST - Client - Tools - HttpClient": "Introduced in Java 11, the java.net.http.HttpClient is a modern, feature-rich HTTP client that provides a simple API for sending HTTP requests and handling responses. It supports both synchronous and asynchronous operations and is designed to handle HTTP/1.1 and HTTP/2 protocols, making it suitable for a wide range of applications. Strength is that is Native support in the JDK and ease of use. It is perfect for projects that require minimal dependencies and leverage the latest Java features.",
	"REST - Client - Tools - ApacheHttpClient": "Apache HttpClient is a robust and flexible HTTP client library that has been widely used in the Java community for many years. Known for its rich set of features and configurability, it allows developers to handle HTTP communications in a highly customizable manner. It supports advanced features like connection management, cookie handling, and authentication. It is highly configurable and has a large community and extensive documentation. Suitable for applications requiring complex HTTP interactions and fine-grained control over HTTP operations.",
	"REST - Client - Tools - OkHttp": "OkHttp is a modern, efficient HTTP client developed by Square. Known for its performance and ease of use, it provides a powerful, flexible API for managing HTTP connections and requests. Efficient connection pooling, HTTP/2 support, and built-in caching mechanisms. It’s lightweight and easy to integrate with other libraries. Ideal for mobile and web applications where performance and simplicity are paramount.",
	"REST - Client - Tools - SpringRestTemplate": "RestTemplate is part of the Spring Framework and provides a synchronous client for consuming RESTful web services.",
	"REST - Client - Tools - SpringWebFluxWebClient": "WebClient is part of the Spring WebFlux framework and provides a reactive, non-blocking alternative to RestTemplate. It’s designed for modern applications that require high concurrency and low-latency interactions, leveraging Project Reactor for its reactive programming model. Supports reactive programming paradigms, making it suitable for high-throughput and low-latency applications. Ideal for applications that benefit from reactive programming and require non-blocking IO operations.",
	"REST - Service": "",
	"REST - Service - Security": "Enforce HTTPS, use OAuth 2.0, implement rate limiting, and validate all inputs.",
	"REST - Response": "",
	"REST - Response - Codes - 1xx": "1xx Informational",
	"REST - Response - Codes - 2xx": "2xx Success",
	"REST - Response - Codes - 3xx": "3xx Redirection",
	"REST - Response - Codes - 4xx": "4xx Client Error",
	"REST - Response - Codes - 5xx": "5xx Server Error",
	"REST - Response - Format": "REST use JSON, but other formats, like XML or HTML, can also be used.",
	"REST - Response - Format - ContentNegotiation": "REST makes use of HTTP content negotiation mechanisms to allow for many different types of content.",
	"REST - Response - Format - ContentNegotiation - Process - Client - Accept": "Specifies what response format the client can handle. Could use a REST endpoint to get CSV or HTML content.",
	"REST - Response - Format - ContentNegotiation - Process - Client - Content-Type": "Specifies the format of the data being sent (request body or response body).",
	"REST - Response - Format - ContentNegotiation - Process - Server": "The server analyzes the Accept header and determines the best format it can provide. If multiple formats are supported, the server chooses the most appropriate one based on priority.",
	"REST - Response - Format - ContentNegotiation - Process - Server - Content-Type": "The server sends the response in the agreed-upon format, along with the Content-Type header indicating the media type, eg) Content-Type: application/json.",
	"REST - Response - Format - ContentNegotiation - Types - ServerDriven": "The server decides the response format based on the Accept header from the client.",
	"REST - Response - Format - ContentNegotiation - Types - ClientDriven": "The client requests specific formats through query parameters, such as ?format=json.",
	"REST - Response - Format - ContentNegotiation - Types - AgentDriven": "Intermediary software or a proxy negotiates the content format.",
	"REST - Response - Scope - Problems - OverFetching": "Common (client gets all fields, even if unneeded).",
	"REST - Response - Scope - Problems - UnderFetching": "Common (requires multiple requests for related data).",
	"REST - Response - Scope - Aggregation": "Requires API Gateway/BFF.",
	"REST - Response - Error": "400, 500",
	"REST - CI - Integration - Tools - PlayFramework": ".",
	"REST - CI - Integration - Tools - Dropwizard": "",
	"REST - CI - Integration - Tools - Blade": "",
	"REST - CI - Integration - Tools - Grails": "",
	"REST - CI - Integration - Tools - SpringMVC": ".",
	"REST - CI - Integration - Tools - SpringHATEOAS": ".",
	"REST - CI - Integration - Tools - SpringDataREST": ".",
	"REST - CI - Testing - Manual": "Done manually by a tester",
	"REST - CI - Testing - Manual - SoapUI": "",
	"REST - CI - Testing - Manual - Postman": "",
	"REST - CI - Testing - Manual - Insomnia": "",
	"REST - CI - Testing - Manual - HTTPie": "",
	"REST - CI - Testing - Automated": "Done via scripts/tools",
	"REST - CI - Testing - Automated - RestAssured": "",
	"REST - CI - Testing - Automated - PostmanCollections": "",
	"REST - CI - Testing - Automated - KarateDSL": "",
	"REST - CI - Testing - Automated - K6": "",
	"REST - CI - Testing - Automated - Pact": "",
	"REST - CI - Testing - Automated - PyTest": "",
	"REST - CI - Testing - Automated - Supertest": "",
	"REST - CD - Observability - Documentation - Swagger": "",
	"REST - CD - Observability - Documentation - Swagger - Codegen": "",
	"REST - CD - Observability - Documentation - Swagger - Editor": "",
	"REST - CD - Observability - Documentation - Swagger - UI": "",
	"REST - CD - Observability - Documentation - OpenAPI": "",
	"REST - CD - Observability - Documentation - ReDoc": "",

	"JAX-RS": "SECTION",
	"JAX-RS ": "JAX-RS is a standard defined in Java Specification Request 311 (JSR-311). JAX-RS is only a specification and it needs a compatible implementation to be used.",
	"JAX-RS - JAX-RS 1.0 - 2008": "When JAX-RS 1.0 was first unveiled back in 2008.",
	"JAX-RS - JAX-RS 1.1 - 2010": "From version 1.1 on, JAX-RS is an official part of Java EE 6. A notable feature of being an official part of Java EE is that no configuration is necessary to start using JAX-RS.",
	"JAX-RS - JAX-RS 2.0 - 2011": "In January 2011 the JCP formed the JSR 339 expert group to work on JAX-RS 2.0.",
	"JAX-RS - JAX-RS 2.1 - 2017": "On 2017-08-22 JAX-RS 2.1[4] specification final release was published. Main new supported features include server-sent events, reactive clients, and JSON-B.[5]",
	"JAX-RS - JAX-RS 4.0 - 2024": "https://jakarta.ee/specifications/restful-ws/4.0/jakarta-restful-ws-spec-4.0",
	"JAX-RS - Application - ": "A JAX-RS application consists of one or more resources and zero or more providers.",
	"JAX-RS - Application - Application": "The resources and providers that make up a JAX-RS application are configured via an application-supplied subclass of Application. An implementation MAY provide alternate mechanisms for locating resource classes and providers (e.g. runtime class scanning) but use of Application is the only portable means of configuration.",
	"JAX-RS - Application - Resources": "Using JAX-RS a Web resource is implemented as a resource class and requests are handled by resource methods.",
	"JAX-RS - Application - Resources - Class": "A resource class is a Java class that uses JAX-RS annotations to implement a corresponding Web resource.",
	"JAX-RS - Application - Resources - Class - @Path": "Resource classes are POJOs that have at least one method annotated with @Path or a request method designator.",
	"JAX-RS - Application - Resources - Class - @Path - URI": "A root resource class is anchored in URI space using the @Path annotation. The value of the annotation is a relative URI path template whose base URI is provided by the combination of the deployment context and the application path.",
	"JAX-RS - Application - Resources - Class - @Path - URITemplates": "A URI path template is a string with zero or more embedded parameters that, when values are substituted for all the parameters, is a valid URI[5] path.",
	"JAX-RS - Application - Resources - Class - @Path - SubResources": "",
	"JAX-RS - Application - Resources - Class - @Path - MatchingRequests": "",
	"JAX-RS - Application - Resources - Class - Lifecycle": ".",
	"JAX-RS - Application - Resources - Class - Environment": ".",
	"JAX-RS - Application - Resources - Structure": ".",
	"JAX-RS - Application - Resources - Structure - Constructors": ".",
	"JAX-RS - Application - Resources - Structure - Constructors - Params": ".",
	"JAX-RS - Application - Resources - Structure - Constructors - Params - @Context": ".",
	"JAX-RS - Application - Resources - Structure - Constructors - Params - @HeaderParam": ".",
	"JAX-RS - Application - Resources - Structure - Constructors - Params - @CookieParam": ".",
	"JAX-RS - Application - Resources - Structure - Constructors - Params - @MatrixParam": ".",
	"JAX-RS - Application - Resources - Structure - Constructors - Params - @QueryParam": ".",
	"JAX-RS - Application - Resources - Structure - Constructors - Params - @PaThParam": ".",
	"JAX-RS - Application - Resources - Structure - Methods": "Resource methods are methods of a resource class annotated with a request method designator.",
	"JAX-RS - Application - Resources - Structure - Methods - MethodDesignator": "A request method designator is a runtime annotation that is annotated with the @HttpMethod annotation.",
	"JAX-RS - Application - Resources - Structure - Methods - MethodDesignator - @GET": ".",
	"JAX-RS - Application - Resources - Structure - Methods - MethodDesignator - @POST": ".",
	"JAX-RS - Application - Resources - Structure - Methods - MethodDesignator - @PUT": ".",
	"JAX-RS - Application - Resources - Structure - Methods - MethodDesignator - @DELETE": ".",
	"JAX-RS - Application - Resources - Structure - Methods - MethodDesignator - @PATCH": ".",
	"JAX-RS - Application - Resources - Structure - Methods - MethodDesignator - @HEAD": ".",
	"JAX-RS - Application - Resources - Structure - Methods - MethodDesignator - @OPTIONS": ".",
	"JAX-RS - Application - Resources - Structure - Methods - Visibility": "Only public methods may be exposed as resource methods. An implementation SHOULD warn users if a non-public method carries a method designator or @Path annotation.",
	"JAX-RS - Application - Resources - Structure - Methods - @FormParam": "When a resource method is invoked, parameters annotated with @FormParam or one of the annotations listed in Section [resource_field] are mapped from the request according to the semantics of the annotation.",
	"JAX-RS - Application - Resources - Structure - Methods - @FormParam - DefaultValue": "The DefaultValue annotation may be used to supply a default value for parameters",
	"JAX-RS - Application - Resources - Structure - Methods - @FormParam - Encoded": "The Encoded annotation may be used to disable automatic URI decoding of parameter values",
	"JAX-RS - Application - Resources - Structure - Methods - @FormParam - Exceptions": "Exceptions thrown during construction of parameter values are treated the same as exceptions thrown during construction of field or bean property values, see Fields and Bean Properties. Exceptions thrown during construction of @FormParam annotated parameter values are treated the same as if the parameter were annotated with @HeaderParam.",
	"JAX-RS - Application - Resources - Structure - Methods - @FormParam - EntityPart": "For resource methods that consume multipart/form-data media types, the @FormParam annotation may be used on jakarta.ws.rs.core.EntityPart parameters.",
	"JAX-RS - Application - Resources - Structure - Methods - MediaTypes": "Application classes can declare the supported request and response media types using the @Consumes and @Produces annotations respectively. These annotations MAY be applied to a resource method, a resource class, or to an entity provider",
	"JAX-RS - Application - Resources - Structure - Methods - MediaTypes - @Produces": "@Produces('application/widgets+xml')",
	"JAX-RS - Application - Resources - Structure - Methods - MediaTypes - @Consumes": "@Consumes('application/widgets+xml')",
	"JAX-RS - Application - Resources - Structure - Fields": ".",
	"JAX-RS - Application - Resources - Structure - Fields - Params": ".",
	"JAX-RS - Application - Resources - Structure - Fields - Params - @QueryParam": "Extracts the value of a URI query parameter.",
	"JAX-RS - Application - Resources - Structure - Fields - Params - @PathParam": "Extracts the value of a URI template parameter.",
	"JAX-RS - Application - Resources - Structure - Fields - Params - @CookieParam": "Extracts the value of a cookie.",
	"JAX-RS - Application - Resources - Structure - Fields - Params - @HeaderParam": "Extracts the value of a header.",
	"JAX-RS - Application - Resources - Structure - Fields - Params - @MatrixParam": "Extracts the value of a URI matrix parameter.",
	"JAX-RS - Application - Resources - Structure - Fields - Params - @Context": "Injects an instance of a supported resource.",
	"JAX-RS - Application - Resources - Structure - Return": "Resource methods MAY return void, Response, GenericEntity, or another Java type, these return types are mapped to a response entity body.",
	"JAX-RS - Application - Resources - Structure - Return - ReturnTypes": ".",
	"JAX-RS - Application - Resources - Structure - Return - ReturnTypes - void": "Results in an empty entity body with a 204 status code.",
	"JAX-RS - Application - Resources - Structure - Return - ReturnTypes - Response": "Results in an entity body mapped from the entity property of the Response with the status code specified by the status property of the Response. A null return value results in a 204 status code. If the status property of the Response is not set: a 200 status code is used for a non-null entity property and a 204 status code is used if the entity property is null.",
	"JAX-RS - Application - Resources - Structure - Return - ReturnTypes - Response - ResponseBuilder": "Methods that need to provide additional metadata with a response should return an instance of Response, the ResponseBuilder class provides a convenient way to create a Response instance using a builder pattern.",
	"JAX-RS - Application - Resources - Structure - Return - ReturnTypes - GenericEntity": "Results in an entity body mapped from the Entity property of the GenericEntity. If the return value is not null a 200 status code is used, a null return value results in a 204 status code.",
	"JAX-RS - Application - Resources - Structure - Return - ReturnTypes - CompletionStage": "Results in an entity body mapped from the class of the returned instance or of its type parameter T if the return type is CompletionStage<T> (see CompletionStage); if the class is an anonymous inner class, its superclass is used instead. If the return value is not null a 200 status code is used, a null return value results in a 204 status code.",
	"JAX-RS - Application - Resources - Structure - Return - Conversion": "Conversion between a Java object and an entity body is the responsibility of an entity provider, see Entity Providers. The return type of a resource method and the type of the returned instance are used to determine the raw type and generic type supplied to the isWritable method of MessageBodyWriter.",
	"JAX-RS - Application - Resources - Structure - Exceptions": "A resource method, sub-resource method or sub-resource locator may throw any checked or unchecked exception. An implementation MUST catch all exceptions and process them.",
	"JAX-RS - Application - Resources - Structure - Exceptions - WebApplicationException": "Instances of WebApplicationException and its subclasses MUST be mapped to a response as follows. If the response property of the exception is null, then an implementation MUST use the most appropriate exception mapping provider (see Exception Mapping Providers) to create a new Response instance; otherwise the response property is used directly. The resulting Response instance is then processed according to Return Type.",
	"JAX-RS - Application - Resources - Structure - Exceptions - MappingProvider": "An implementation MUST use the exception mapping provider (see Exception Mapping Providers) whose generic type is the nearest superclass of the exception to create a Response instance that is then processed according to Return Type. If the exception mapping provider throws an exception while creating a Response then return a server error (status code 500) response to the client.",	
	"JAX-RS - Application - @Provider": "A @Provider is a marker interface for JAX-RS extensions. Providers in JAX-RS are responsible for various cross-cutting concerns such as filtering requests, converting representations into Java objects, mapping exceptions to responses, etc.",
	"JAX-RS - Application - @Provider - Classes - Lifecycle": "By default a single instance of each provider class is instantiated for each JAX-RS application.",
	"JAX-RS - Application - @Provider - Classes - Discovery": "The annotation @Provider is used by a JAX-RS runtime to automatically discover provider classes via mechanisms such as class scanning. A JAX-RS implementation that supports automatic discovery of classes MUST process only those classes that are annotated with @Provider.",
	"JAX-RS - Application - @Provider - Classes - Services": "On runtime initialization, an implementation MUST discover and register certain service providers in jakarta.ws.rs.core.Configuration runtime configurations, if and only if service loading is enabled.",
	"JAX-RS - Application - @Provider - Classes - Services - Configuration": ".",
	"JAX-RS - Application - @Provider - Classes - Services - ServiceLoader": ".",
	"JAX-RS - Application - @Provider - Classes - Constructors": "Provider classes that are instantiated by the JAX-RS runtime and MUST have a public constructor for which the JAX-RS runtime can provide all parameter values. Note that a zero argument constructor is permissible under this rule.",
	"JAX-RS - Application - @Provider - Classes - Priorities": "Application-supplied providers may be annotated with @Priority. If two or more providers are candidates for a certain task, the one with the highest priority is chosen: the highest priority is defined to be the one with the lowest value in this case.",
	"JAX-RS - Application - @Provider - Classes - Environment": ".",
	"JAX-RS - Application - @Provider - EntityProviders": ".",
	"JAX-RS - Application - @Provider - EntityProviders - MessageBodyReader": "The MessageBodyReader interface defines the contract between the JAX-RS runtime and components that provide mapping services from representations to a corresponding Java type.",
	"JAX-RS - Application - @Provider - EntityProviders - MessageBodyWriter": "A class wishing to provide such a service implements the MessageBodyReader interface and may be annotated with @Provider for automatic discovery.",
	"JAX-RS - Application - @Provider - EntityProviders - MediaTypes": "Message body readers and writers MAY restrict the media types they support using the @Consumes and @Produces annotations respectively.",
	"JAX-RS - Application - @Provider - EntityProviders - MediaTypes - @Produces": "@Produces('application/widgets+xml')",
	"JAX-RS - Application - @Provider - EntityProviders - MediaTypes - @Consumes": "@Consumes('application/widgets+xml')",
	"JAX-RS - Application - @Provider - ContextProviders": "Context providers supply context to resource classes and other providers. A context provider class implements the ContextResolver<T> interface and may be annotated with @Provider for automatic discovery. E.g., an application wishing to provide a customized JAXBContext to the default JAXB entity providers would supply a class implementing ContextResolver<JAXBContext>.",
	"JAX-RS - Application - @Provider - ExceptionMappingProviders": "Exception mapping providers map a checked or runtime exception to an instance of Response.",
	"JAX-RS - Application - @Provider - ExceptionMappingProviders - ExceptionMapper": "An exception mapping provider implements the ExceptionMapper<T> interface and may be annotated with @Provider for automatic discovery.",
	"JAX-RS - Application - @Provider - Exceptions": ".",
	"JAX-RS - Application - @Provider - Exceptions - ServerRuntime": ".",
	"JAX-RS - Application - @Provider - Exceptions - ClientRuntime": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters": "Filters execute code at an extension point but without wrapping a method invocation.",
	"JAX-RS - Application - @Provider - Handlers - Filters - ClientAPI": "In the Client API, a ClientRequestFilter is executed as part of the invocation pipeline, before the HTTP request is delivered to the network; a ClientResponseFilter is executed upon receiving a server response, before control is returned to the application.",
	"JAX-RS - Application - @Provider - Handlers - Filters - ExtensionPoints": "There are four extension points for filters: ClientRequest, ClientResponse, ContainerRequest and ContainerResponse. For each of these extension points, there is a corresponding interface: ClientRequestFilter, ClientResponseFilter, ContainerRequestFilter and ContainerResponseFilter.",
	"JAX-RS - Application - @Provider - Handlers - Filters - ExtensionPoints - ClientRequest": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters - ExtensionPoints - ClientResponse": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters - ExtensionPoints - ContainerRequest": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters - ExtensionPoints - ContainerResponse": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters - ExtensionPoints - PreMatchContainerRequest": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters - ": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters - Types - ClientFilters": "A client filter is a class that implements ClientRequestFilter or ClientResponseFilter or both.",
	"JAX-RS - Application - @Provider - Handlers - Filters - Types - ClientFilters - ClientRequestFilter": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters - Types - ClientFilters - ClientResponseFilter": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters - Types - ContainerFilters": "A container filter is a class that implements ContainerRequestFilter or ContainerResponseFilter, or both.",
	"JAX-RS - Application - @Provider - Handlers - Filters - Types - ContainerFilters - ContainerRequestFilter": ".",
	"JAX-RS - Application - @Provider - Handlers - Filters - Types - ContainerFilters - ContainerResponseFilter": ".",
	"JAX-RS - Application - @Provider - Handlers - Interceptors": "Entity interceptors wrap around a method invocation at a specific extension point.",
	"JAX-RS - Application - @Provider - Handlers - Interceptors - ServerAPI": "In the Server API, a ContainerRequestFilter is executed upon receiving a request from a client; a ContainerResponseFilter is executed as part of the response pipeline, before the HTTP response is delivered to the network.",
	"JAX-RS - Application - @Provider - Handlers - Interceptors - ExtensionPoints": "There are two extension points for entity interceptors: ReadFrom and WriteTo. For each of these extension points, there is a corresponding interface: ReaderInterceptor and WriterInterceptor",
	"JAX-RS - Application - @Provider - Handlers - Interceptors - ExtensionPoints - ReadFrom": ".",
	"JAX-RS - Application - @Provider - Handlers - Interceptors - ExtensionPoints - WriteTo": ".",
	"JAX-RS - Application - @Provider - Handlers - Interceptors - Types - EntityInterceptors": "An entity interceptor is a class that implements ReaderInterceptor or WriterInterceptor, or both.",
	"JAX-RS - Application - @Provider - Handlers - Interceptors - Types - EntityInterceptors - ReaderInterceptor": "",
	"JAX-RS - Application - @Provider - Handlers - Interceptors - Types - EntityInterceptors - WriterInterceptor": "",
	"JAX-RS - ClientAPI": "The Client API is used to access Web resources. It provides a higher-level API than HttpURLConnection as well as integration with JAX-RS providers.",
	"JAX-RS - ClientAPI - Request - ClientBuilder": ".",
	"JAX-RS - ClientAPI - Request - queryParam": ".",
	"JAX-RS - ClientAPI - Request - target": ".",
	"JAX-RS - ClientAPI - Request - request": ".",
	"JAX-RS - ClientAPI - Request - WebTarget": ".",
	"JAX-RS - ClientAPI - Request - Methods - buildGet": ".",
	"JAX-RS - ClientAPI - Request - Methods - buildPost": ".",
	"JAX-RS - ClientAPI - Request - ExecutorServices": ".",
	"JAX-RS - ClientAPI - Request - Exceptions": ".",
	"JAX-RS - ClientAPI - Response - TypedEntities": ".",
	"JAX-RS - ClientAPI - Reactive": ".",
	"JAX-RS - ClientAPI - Async": ".",
	"JAX-RS - ClientAPI - Binding": "Binding in the Client API is accomplished via API calls instead of annotations. Client, Invocation, Invocation.Builder and WebTarget are all configurable types: their configuration can be accessed using the methods inherited from the Configurable interface.",
	"JAX-RS - ClientAPI - Binding - Client": ".",
	"JAX-RS - ClientAPI - Binding - Invocation": ".",
	"JAX-RS - ClientAPI - Binding - Invocation.Builder": ".",
	"JAX-RS - ClientAPI - Binding - WebTarget": ".",
	"JAX-RS - ClientAPI - Priorities": "The order in which filters and interceptors are executed as part of their corresponding chains is controlled by the @Priority annotation.",
	"JAX-RS - ClientAPI - Priorities - Order": "Priorities are represented by integer numbers.",
	"JAX-RS - ClientAPI - Priorities - Order - Request": "Execution chains for extension points ContainerRequest, PreMatchContainerRequest, ClientRequest, ReadFrom and WriteTo are sorted in ascending order; the lower the number the higher the priority.",
	"JAX-RS - ClientAPI - Priorities - Order - Response": "Execution chains for extension points ContainerResponse and ClientResponse are sorted in descending order; the higher the number the higher the priority. These rules ensure that response filters are executed in reversed order of request filters.",
	"JAX-RS - ClientAPI - Priorities - BuiltIn": "The Priorities class in JAX-RS defines a set of built-in priorities for security, header decorators, decoders and encoders.",
	"JAX-RS - ClientAPI - Priorities - BuiltIn - Priorities.USER": ".",
	"JAX-RS - ClientAPI - Priorities - BuiltIn - Priorities.AUTHENTICATION": ".",
	"JAX-RS - ServerAPI": "The Server API in JAX-RS refers to the set of interfaces and classes used to create RESTful web services on the server side. The JAX-RS SSE server API is used to accept connections and send events to one or more clients.",
	"JAX-RS - ServerAPI - Async": ".",
	"JAX-RS - ServerAPI - Events": ".",
	"JAX-RS - ServerAPI - Binding": "Binding is the process by which a filter or interceptor is associated with a resource class or method (Server API) or an invocation (Client API).",
	"JAX-RS - ServerAPI - Binding - GlobalBinding": ".",
	"JAX-RS - ServerAPI - Binding - NameBinding": ".",
	"JAX-RS - ServerAPI - Binding - DynamicBinding": ".",
	"JAX-RS - ServerAPI - Binding - BindingInClientAPI": ".",
	"JAX-RS - Validation - ": ".",
	"JAX-RS - AsyncProcessing - ": ".",
	"JAX-RS - ServerSentEvents - ": ".",
	"JAX-RS - Context": "JAX-RS provides facilities for obtaining and processing information about the application deployment context and the context of individual requests.",
	"JAX-RS - Context - Concurrency": "Context is specific to a particular request but instances of certain JAX-RS components (providers and resource classes with a lifecycle other than per-request) may need to support multiple concurrent requests.",
	"JAX-RS - Context - ContextTypes": ".",
	"JAX-RS - Context - ContextTypes - Application": "The instance of the application-supplied Application subclass can be injected into a class field or method parameter using the @Context annotation. Access to the Application subclass instance allows configuration information to be centralized in that class. Note that this cannot be injected into the Application subclass itself since this would create a circular dependency.",
	"JAX-RS - Context - ContextTypes - UriInfo": "An instance of UriInfo can be injected into a class field or method parameter using the @Context annotation. UriInfo provides both static and dynamic, per-request information, about the components of a request URI. E.g. the following would return the names of any query parameters in a request",
	"JAX-RS - Context - ContextTypes - HttpHeaders": "An instance of HttpHeaders can be injected into a class field or method parameter using the @Context annotation. HttpHeaders provides access to request header information either in map form or via strongly typed convenience methods.",
	"JAX-RS - Context - ContextTypes - ContentNegotiation": "JAX-RS simplifies support for content negotiation and preconditions using the Request interface. An instance of Request can be injected into a class field or method parameter using the @Context annotation. The methods of Request allow a caller to determine the best matching representation variant and to evaluate whether the current state of the resource matches any preconditions in the request.",
	"JAX-RS - Context - ContextTypes - SecurityContext": "The SecurityContext interface provides access to information about the security context of the current request. An instance of SecurityContext can be injected into a class field or method parameter using the @Context annotation. The methods of SecurityContext provide access to the current user principal, information about roles assumed by the requester, whether the request arrived over a secure channel and the authentication scheme used.",
	"JAX-RS - Context - ContextTypes - Providers": "The Providers interface allows for lookup of provider instances based on a set of search criteria. An instance of Providers can be injected into a class field or method parameter using the @Context annotation. This interface is expected to be primarily of interest to provider authors wishing to use other providers functionality. It is injectable in both client and server providers.",
	"JAX-RS - Context - ContextTypes - ResourceContext": "The ResourceContext interface provides access to instantiation and initialization of resource or sub-resource classes in the default per-request scope. It can be injected to help with creation and initialization, or just initialization, of instances created by an application.",
	"JAX-RS - Context - ContextTypes - Configuration": "Both the client and the server runtime configurations are available for injection via @Context. These configurations are available for injection in providers (client or server) and resource classes (server only).",
	"JAX-RS - Environment - ": ".",
	"JAX-RS - RuntimeDelegate - ": "RuntimeDelegate is an abstract factory class that provides various methods for the creation of objects that implement JAX-RS APIs. These methods are designed for use by other JAX-RS API classes and are not intended to be called directly by applications. RuntimeDelegate allows the standard JAX-RS API classes to use different JAX-RS implementations without any code changes.",
	"JAX-RS - Impl - Jersey": "Jersey RESTful Web Services framework is open source, production quality, framework for developing RESTful Web Services in Java that provides support for JAX-RS APIs and serves as a JAX-RS (JSR 311 & JSR 339) Reference Implementation.",
	"JAX-RS - Impl - RestEasy": "JBoss's JAX-RS project.",
	"JAX-RS - Impl - Restlet ": "probably the first REST framework, which existed prior to JAX-RS.",
	"JAX-RS - Impl - CXF": "which is a merger between XFire and Celtix (an Open Source ESB, sponsored by IONA and originally hosted at ObjectWeb).",
	"JAX-RS - Impl - ApacheWink": "",

	"SpringMVC": "SECTION",
	"SpringMVC ": "Spring MVC module provides capabilities to write RESTful web services.",
	"SpringMVC - @RestController": ".",
	"SpringMVC - @RestControllerAdvice": ".",
	"SpringMVC - @GetMapping": ".",
	"SpringMVC - @PostMapping": ".",
	"SpringMVC - @PutMapping": ".",
	"SpringMVC - @DeleteMapping": ".",

	"SpringHATEOAS": "SECTION",

	"SpringDataREST": "SECTION",
	"SpringDataREST ": "The core functionality of Spring Data REST is to export resources for Spring Data repositories. Thus, the core artifact to look at and potentially customize the way the exporting works is the repository interface.",
	"SpringDataREST - configure - add - as springboot": "<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-rest</artifactId> </dependency>",
	"SpringDataREST - configure - add - as dependency": "<dependency> <groupId>org.springframework.data</groupId> <artifactId>spring-data-rest-webmvc</artifactId> </dependency>",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy": "Spring Data REST uses a RepositoryDetectionStrategy to determine whether a repository is exported as a REST resource.",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy - DEFAULT": "Exposes all public repository interfaces but considers the exported flag of @(Repository)RestResource.",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy - ALL": "Exposes all repositories independently of type visibility and annotations.",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy - ANNOTATION": "Only repositories annotated with @(Repository)RestResource are exposed, unless their exported flag is set to false.",
	"SpringDataREST - configure - settings - RepositoryDetectionStrategy - VISIBILITY": "Only public repositories annotated are exposed.",
	"SpringDataREST - configure - mechanism - application.properties": "spring.data.rest.<property>=<value>",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer": "create a @Bean as @Bean  public RepositoryRestConfigurer repositoryRestConfigurer() { ... }",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureConversionService(ConfigurableConversionService conversionService)": "Override this method to add your own converters.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureExceptionHandlerExceptionResolver(ExceptionHandlerExceptionResolver exceptionResolver)": "Configure the ExceptionHandlerExceptionResolver.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureHttpMessageConverters(List<HttpMessageConverter< ?>> messageConverters)": "Configure the available HttpMessageConverters by adding your own.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureJacksonObjectMapper(com.fasterxml.jackson.databind.ObjectMapper objectMapper)": "Configure the Jackson ObjectMapper directly.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureRepositoryRestConfiguration(RepositoryRestConfiguration config)": "Override this method to add additional configuration.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - configureValidatingRepositoryEventListener(ValidatingRepositoryEventListener validatingListener)": "Override this method to add validators manually.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - methods - withConfig(Consumer<RepositoryRestConfiguration> consumer)": "Convenience method to easily create simple RepositoryRestConfigurer instances that solely want to tweak the RepositoryRestConfiguration.",
	"SpringDataREST - configure - mechanism - RepositoryRestConfigurer - adapter - RepositoryRestConfigurerAdapter": "@Override public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) { config.setBasePath('/api'), }",
	"SpringDataREST - exposingRepository - basis": "public interface OrderRepository extends CrudRepository<Order, Long> { } For this repository, Spring Data REST exposes a collection resource named after the uncapitalized, pluralized version of the domain class the exported repository is handling, i.e. /orders",
	"SpringDataREST - exposingRepository - basis - properties - basePath": "the root URI for Spring Data REST",
	"SpringDataREST - exposingRepository - basis - properties - defaultPageSize": "change the default for the number of items served in a single page",
	"SpringDataREST - exposingRepository - basis - properties - maxPageSize": "change the maximum number of items in a single page",
	"SpringDataREST - exposingRepository - basis - properties - pageParamName": "change the name of the query parameter for selecting pages",
	"SpringDataREST - exposingRepository - basis - properties - limitParamName": "change the name of the query parameter for the number of items to show in a page",
	"SpringDataREST - exposingRepository - basis - properties - sortParamName": "change the name of the query parameter for sorting",
	"SpringDataREST - exposingRepository - basis - properties - defaultMediaType": "change the default media type to use when none is specified",
	"SpringDataREST - exposingRepository - basis - properties - returnBodyOnCreate": "change whether a body should be returned when creating a new entity",
	"SpringDataREST - exposingRepository - basis - properties - returnBodyOnUpdate": "change whether a body should be returned when updating an entity",
	"SpringDataREST - exposingRepository - basis - methods": "Which HTTP resources are exposed for a certain repository is mostly driven by the structure of the repository. In other words, the resource exposure will follow which methods you have exposed on the repository. If you extend CrudRepository you usually expose all methods required to expose all HTTP resources we can register by default. ",
	"SpringDataREST - exposingRepository - basis - methods - restricting": "Repositories that are not exposing those methods — either by not declaring them at all or explicitly using @RestResource(exported = false) — won’t expose those HTTP methods on those resources.",
	"SpringDataREST - exposingRepository - basis - status - 200 OK": "For plain GET requests.",
	"SpringDataREST - exposingRepository - basis - status - 201 Created": "For POST and PUT requests that create new resources.",
	"SpringDataREST - exposingRepository - basis - status - 204 No Content": "For PUT, PATCH, and DELETE requests when the configuration is set to not return response bodies for resource updates (RepositoryRestConfiguration.returnBodyOnUpdate). If the configuration value is set to include responses for PUT, 200 OK is returned for updates, and 201 Created is returned for resource created through PUT.",
	"SpringDataREST - exposingRepository - HAL": "Spring Data REST uses HAL to render responses. HAL defines the links to be contained in a property of the returned document.",
	"SpringDataREST - exposingRepository - HAL - list": "To discover what resources are available at the root of the application, issue an HTTP GET to the root URL, as follows: curl -v http://localhost:8080/",
	"SpringDataREST - exposingRepository - path - collection": "Spring Data REST exposes a collection resource at /orders. The path is derived from the uncapitalized, pluralized, simple class name of the domain class being managed.",
	"SpringDataREST - exposingRepository - path - collection - methods": "Collections resources support both GET and POST. All other HTTP methods cause a 405 Method Not Allowed.",
	"SpringDataREST - exposingRepository - path - collection - methods - GET": "Returns all entities the repository servers through its findAll(…) method. If the repository is a paging repository we include the pagination links if necessary and additional page metadata.",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - findAll(Pageable)": "",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - findAll(Pageable) - pagination": "If the repository has pagination capabilities, the resource takes the following parameters: page: The page number to access (0 indexed, defaults to 0), size: The page size requested (defaults to 20)., sort: A collection of sort directives in the format ($propertyname,)+[asc|desc]?.",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - findAll(Sort)": "",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - findAll()": "",
	"SpringDataREST - exposingRepository - path - collection - methods - GET - media": "The GET method supports the following media types: application/hal+json, application/json",
	"SpringDataREST - exposingRepository - path - collection - methods - HEAD": "The HEAD method returns whether the collection resource is available. It has no status codes, media types, or related resources.",
	"SpringDataREST - exposingRepository - path - collection - methods - HEAD - findAll(Pageable)": "",
	"SpringDataREST - exposingRepository - path - collection - methods - HEAD - findAll(Sort)": "",
	"SpringDataREST - exposingRepository - path - collection - methods - HEAD - findAll()": "",
	"SpringDataREST - exposingRepository - path - collection - methods - POST": "The POST method creates a new entity from the given request body.",
	"SpringDataREST - exposingRepository - path - collection - methods - POST - save()": "",
	"SpringDataREST - exposingRepository - path - collection - methods - POST - media": "The POST method supports the following media types: application/hal+json, application/json",
	"SpringDataREST - exposingRepository - path - item": "Spring Data REST exposes an item resource for each of the items managed by the repository under the URI template /orders/{id}.",
	"SpringDataREST - exposingRepository - path - item - methods": "Item resources generally support GET, PUT, PATCH, and DELETE, unless explicit configuration prevents that",
	"SpringDataREST - exposingRepository - path - item - methods - GET": "",
	"SpringDataREST - exposingRepository - path - item - methods - GET - findById(…)": "",
	"SpringDataREST - exposingRepository - path - item - methods - HEAD": "The HEAD method returns whether the item resource is available. It has no status codes, media types, or related resources.",
	"SpringDataREST - exposingRepository - path - item - methods - HEAD - findById(…)": "",
	"SpringDataREST - exposingRepository - path - item - methods - PUT": "",
	"SpringDataREST - exposingRepository - path - item - methods - PUT - save()": "",
	"SpringDataREST - exposingRepository - path - item - methods - PATCH": "",
	"SpringDataREST - exposingRepository - path - item - methods - PATCH - save()": "",
	"SpringDataREST - exposingRepository - path - item - methods - DELETE": "",
	"SpringDataREST - exposingRepository - path - item - methods - DELETE - delete(T)": "",
	"SpringDataREST - exposingRepository - path - item - methods - DELETE - delete(ID)": "",
	"SpringDataREST - exposingRepository - path - item - methods - DELETE - delete(Iterable)": "",
	"SpringDataREST - exposingRepository - path - association": "Spring Data REST exposes sub-resources of every item resource for each of the associations the item resource has. The name and path of the resource defaults to the name of the association property and can be customized by using @RestResource on the association property.",
	"SpringDataREST - exposingRepository - path - search": "",
	"SpringDataREST - exposingRepository - path - query": "",
	"SpringDataREST - exposingRepository - path - query - GET": "",
	"SpringDataREST - exposingRepository - path - query - HEAD": "",
	"SpringDataREST - exposingRepository - path - custom": "The name of the resource and the path can be customized by using @RepositoryRestResource on the repository interface."

}