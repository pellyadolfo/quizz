{
	"modules": "SECTION",
	"modules": "In Spring Security 3.0, the codebase has been sub-divided into separate jars which more clearly separate different functionality areas and third-party dependencies.",
	"modules - org.springframework.security.core": "",
	"modules - org.springframework.security.access": "",
	"modules - org.springframework.security.authentication": "",
	"modules - org.springframework.security.provisioning": "",
	"modules - org.springframework.security.remoting": "",
	"modules - org.springframework.security.web": "",
	"modules - org.springframework.security.config": "",
	"modules - org.springframework.security.ldap": "",
	"modules - org.springframework.security.oauth2-core": "",
	"modules - org.springframework.security.acls": "",
	"modules - org.springframework.security.cas": "",
	"modules - org.springframework.security.openid": "",

	"configuration": "SECTION",
	"Config": "",
	"Config - goal": "The configuration creates a Servlet Filter known as the springSecurityFilterChain which is responsible for all the security (protecting the application URLs, validating submitted username and passwords, redirecting to the log in form, etc) within your application.",
	"Config - Register": "",
	"Config - Register - WebApplicationInitializer": "How do you get the DispatcherServlet registered with the Web container without web.xml? The answer was provided in Spring 3.1 (and of course is available with Spring 4 which came out in December 2013) with the WebApplicationInitializer.  An implementation of the WebApplicationInitializer interface configures the ServletContext programmatically.  In particular, it allows for the creation, configuration, and registration of the DispatcherServlet programmatically.  Thereby allowing the web.xml file to be removed from modern Spring MVC applications.",
	"Config - Register - WebApplicationInitializer - WebApplicationInitializer.onStartup(ServletContext container)": "Spring Security provides a base class AbstractSecurityWebApplicationInitializer that will ensure the springSecurityFilterChain gets registered for you.",
	"Config - Register - WebApplicationInitializer - AbstractSecurityWebApplicationInitializer": "",
	"Config - WebSecurityConfigurer": "Provides a convenient base class for creating a WebSecurityConfigurer instance.",
	"Config - WebSecurityConfigurerAdapter": "Provides a convenient base class for creating a WebSecurityConfigurer instance.",
	"Config - WebSecurityConfigurerAdapter - @EnableWebSecurity": "Add this annotation to an @Configuration class to have the Spring Security configuration defined in any WebSecurityConfigurer or more likely by extending the WebSecurityConfigurerAdapter base class and overriding individual methods (@EnableGlobalAuthentication + @Configuration",
	"Config - WebSecurityConfigurerAdapter - auth - WebSecurityConfigurerAdapter.configure(AuthenticationManagerBuilder auth)": "Used by the default implementation of authenticationManager() to attempt to obtain an AuthenticationManager.",
	"Config - WebSecurityConfigurerAdapter - auth - User Details": "",
	"Config - WebSecurityConfigurerAdapter - auth - User Details - UserDetailsService": "Core interface which loads user-specific data. It is used throughout the framework as a user DAO and is the strategy used by the DaoAuthenticationProvider. The interface requires only one read-only method, which simplifies support for new data-access strategies.",
	"Config - WebSecurityConfigurerAdapter - auth - User Details - UserDetailsService - CachingUserDetailsService": "",
	"Config - WebSecurityConfigurerAdapter - auth - User Details - UserDetailsService - InMemoryUserDetailsManager": "",
	"Config - WebSecurityConfigurerAdapter - auth - User Details - UserDetailsService - JdbcDaoImpl": "",
	"Config - WebSecurityConfigurerAdapter - auth - User Details - UserDetailsService - JdbcUserDetailsManager": "",
	"Config - WebSecurityConfigurerAdapter - auth - User Details - UserDetailsService - LdapUserDetailsManager": "",
	"Config - WebSecurityConfigurerAdapter - auth - User Details - UserDetailsService - LdapUserDetailsService": "",
	"Config - WebSecurityConfigurerAdapter - auth - AuthenticationManagerBuilder.userDetailsService(T userDetailsService)": "Add authentication based upon the custom UserDetailsService that is passed in. It then returns a DaoAuthenticationConfigurer to allow customization of the authentication. This method also ensure that the UserDetailsService is available for the getDefaultUserDetailsService() method. Note that additional UserDetailsService's may override this UserDetailsService as the default.",
	"Config - WebSecurityConfigurerAdapter - auth - AuthenticationManagerBuilder.": "",
	"Config - WebSecurityConfigurerAdapter - auth - AuthenticationManagerBuilder.": "",
	"Config - WebSecurityConfigurerAdapter - auth - AuthenticationManagerBuilder.": "",
	"Config - WebSecurityConfigurerAdapter - auth - AuthenticationManagerBuilder.": "",
	"Config - WebSecurityConfigurerAdapter - http - WebSecurityConfigurerAdapter.configure(HttpSecurity http)": "Override this method to configure the HttpSecurity. Allows configuration of web based security at a resource level, based on a selection match",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity ": "A HttpSecurity is similar to Spring Security's XML <http> element in the namespace configuration. It allows configuring web based security for specific http requests. By default it will be applied to all requests, but can be restricted using requestMatcher(RequestMatcher) or other similar methods.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.authorizeRequests()": "Allows restricting access based upon the HttpServletRequest",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.antMatcher(java.lang.String antPattern)": "Allows configuring the HttpSecurity to only be invoked when matching the provided ant pattern.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.regexMatcher(java.lang.String pattern)": "Allows configuring the HttpSecurity to only be invoked when matching the provided regex pattern.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.mvcMatcher(java.lang.String mvcPattern)": "Allows configuring the HttpSecurity to only be invoked when matching the provided Spring MVC pattern.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.cors()": "Adds a CorsFilter to be used. If a bean by the name of corsFilter is provided, that CorsFilter is used. Else if corsConfigurationSource is defined, then that CorsConfiguration is used. Otherwise, if Spring MVC is on the classpath a HandlerMappingIntrospector is used.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.csrf()": "Adds CSRF support. This is activated by default when using WebSecurityConfigurerAdapter's default constructor. You can disable it using .csrf().disable()",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.addFilter(javax.servlet.Filter filter)": "Adds a Filter that must be an instance of or extend one of the Filters provided within the Security framework.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.addFilterAfter(javax.servlet.Filter filter, java.lang.Class< ? extends javax.servlet.Filter> afterFilter)": "Allows adding a Filter after one of the known Filter classes.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.addFilterAt(javax.servlet.Filter filter, java.lang.Class< ? extends javax.servlet.Filter> atFilter)": "Adds the Filter at the location of the specified Filter class.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.addFilterBefore(javax.servlet.Filter filter, java.lang.Class< ? extends javax.servlet.Filter> beforeFilter": "Allows adding a Filter before one of the known Filter classes.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.anonymous()": "Allows configuring how an anonymous user is represented.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.formLogin()": "Specifies to support form based authentication.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.httpBasic()": "Configures HTTP Basic authentication.",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity.userDetailsService(UserDetailsService userDetailsService)": "Allows adding an additional UserDetailsService to be used",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity": "",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity": "",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity": "",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity": "",
	"Config - WebSecurityConfigurerAdapter - http - HttpSecurity": "",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurityConfigurerAdapter.configure(WebSecurity web)": "Override this method to configure WebSecurity. Used for configuration settings that impact global security (ignore resources, set debug mode, reject requests by implementing a custom firewall definition)",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurity.ignoring()": "Allows adding RequestMatcher instances that Spring Security should ignore.",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurity.httpFirewall(HttpFirewall httpFirewall)": "Allows customizing the HttpFirewall.",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurity": "",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurity": "",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurity": "",
	"Config - WebSecurityConfigurerAdapter - web - WebSecurity": "",
	
	"processes": "SECTION",
	"Authentication": "Inside the SecurityContextHolder we store details of the principal currently interacting with the application. Spring Security uses an Authentication object to represent this information. You wonâ€™t normally need to create an Authentication object yourself, but it is fairly common for users to query the Authentication object. You can use the following code block - from anywhere in your application - to obtain the name of the currently authenticated user, for example: Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal(),",
	"Authentication - status": "A user is authenticated when the SecurityContextHolder contains a fully populated Authentication object.",
	"Authentication - status - automated": "You do not need to intriduce it yourself. It will happen authomatically, e.g. in a filter",
	"Authentication - status - manual": "Spring Security doesnâ€™t mind how you put the Authentication object inside the SecurityContextHolder. The only critical requirement is that the SecurityContextHolder contains an Authentication which represents a principal before the AbstractSecurityInterceptor",
	"Authentication - SecurityContextHolder": "This is where we store details of the present security context of the application, which includes details of the principal currently using the application.",
	"Authentication - SecurityContextHolder - SecurityContext": "The object returned by the call to getContext() is an instance of the SecurityContext interface.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.MODE_THREADLOCAL": "By default the SecurityContextHolder uses a ThreadLocal to store these details, which means that the security context is always available to methods in the same thread of execution, even if the security context is not explicitly passed around as an argument to those methods. Using a ThreadLocal in this way is quite safe if care is taken to clear the thread after the present principalâ€™s request is processed. Of course, Spring Security takes care of this for you automatically so there is no need to worry about it.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.MODE_GLOBAL": "You can use SecurityContextHolder.MODE_GLOBAL strategy for a standalone application.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.MODE_INHERITABLETHREADLOCAL": "Other applications might want to have threads spawned by the secure thread also assume the same security identity. This is achieved by using SecurityContextHolder.MODE_INHERITABLETHREADLOCAL.",
	"Authentication - SecurityContextHolder - SecurityContext - scope - SecurityContextHolder.SYSTEM_PROPERTY": "",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getAuthorities()": "Set by an AuthenticationManager to indicate the authorities that the principal has been granted.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getCredentials()": "The credentials that prove the principal is correct.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getDetails()": "Stores additional details about the authentication request.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.getPrincipal()": "The identity of the principal being authenticated.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.isAuthenticated()": "Used to indicate to AbstractSecurityInterceptor whether it should present the authentication token to the AuthenticationManager.",
	"Authentication - SecurityContextHolder - SecurityContext - content - Authentication - Authentication.setAuthenticated(boolean isAuthenticated)": "The identity of the principal being authenticated.",
	"Authentication - Anonymous": "",
	"Authentication - GlobalAuthenticationConfigurerAdapter": "A SecurityConfigurer that can be exposed as a bean to configure the global AuthenticationManagerBuilder. Beans of this type are automatically used by AuthenticationConfiguration to configure the global AuthenticationManagerBuilder.",		
	"Authentication - GlobalAuthenticationConfigurerAdapter.init(AuthenticationManagerBuilder auth)": "Initialize the SecurityBuilder. Here only shared state should be created and modified, but not properties on the SecurityBuilder used for building the object. This ensures that the SecurityConfigurer.configure(SecurityBuilder) method uses the correct shared objects when building.",			
	"Authorization (ACL)": "",
	"Authorization (ACL) - GrantedAuthority": "These represent the authorities that have been granted to the principal. the GrantedAuthority objects are inserted into the Authentication object by the AuthenticationManager and are later read by AccessDecisionManager s when making authorization decisions.",
	"Authorization (ACL) - GrantedAuthority.getAuthority()": "This method allows AccessDecisionManager s to obtain a precise String representation of the GrantedAuthority. By returning a representation as a String, a GrantedAuthority can be easily 'read' by most AccessDecisionManager s. If a GrantedAuthority cannot be precisely represented as a String, the GrantedAuthority is considered 'complex' and getAuthority() must return null.",
	"Authorization (ACL) - GrantedAuthority - SimpleGrantedAuthority": "Spring Security includes one concrete GrantedAuthority implementation, SimpleGrantedAuthority. This allows any user-specified String to be converted into a GrantedAuthority. All AuthenticationProvider s included with the security architecture use SimpleGrantedAuthority to populate the Authentication object",
	"Authorization (ACL) - AbstractSecurityInterceptor": "The AbstractSecurityInterceptor will ensure the proper startup configuration of the security interceptor. It will also implement the proper handling of secure object invocations, namely:",
	"Authorization (ACL) - AbstractSecurityInterceptor - implementation - ChannelSecurityInterceptor": "",
	"Authorization (ACL) - AbstractSecurityInterceptor - implementation - FilterSecurityInterceptor": "",
	"Authorization (ACL) - AbstractSecurityInterceptor - implementation - MethodSecurityInterceptor": "",
	"Authorization (ACL) - AccessDecisionManager": "The AccessDecisionManager is called by the AbstractSecurityInterceptor and is responsible for making final access control decisions.",
	"Authorization (ACL) - AccessDecisionManager.decide(Authentication authentication, Object secureObject, Collection<ConfigAttribute> attrs) throws AccessDeniedException": "The AccessDecisionManager's decide method is passed all the relevant information it needs in order to make an authorization decision. In particular, passing the secure Object enables those arguments contained in the actual secure object invocation to be inspected. For example, letâ€™s assume the secure object was a MethodInvocation. It would be easy to query the MethodInvocation for any Customer argument, and then implement some sort of security logic in the AccessDecisionManager to ensure the principal is permitted to operate on that customer. Implementations are expected to throw an AccessDeniedException if access is denied.",
	"Authorization (ACL) - AccessDecisionManager.supports(ConfigAttribute attribute)": "The supports(ConfigAttribute) method is called by the AbstractSecurityInterceptor at startup time to determine if the AccessDecisionManager can process the passed ConfigAttribute",
	"Authorization (ACL) - AccessDecisionManager.supports(Class clazz)": "The supports(Class) method is called by a security interceptor implementation to ensure the configured AccessDecisionManager supports the type of secure object that the security interceptor will present.",
	"Authorization (ACL) - AccessDecisionManager - implementation - AccessDecisionVoter": ".",
	"Authorization (ACL) - AccessDecisionManager - implementation - RoleVoter": ".",
	"Authorization (ACL) - AccessDecisionManager - implementation - AuthenticatedVoter": ".",
	"Authorization (ACL) - AccessDecisionManager - implementation - custom": ".",
	"Authorization (ACL) - AccessDecisionManager - implementation - custom ": "Whilst users can implement their own AccessDecisionManager to control all aspects of authorization, Spring Security includes several AccessDecisionManager implementations that are based on voting.",
	"Authorization (ACL) - AfterInvocationManager": ".",
	"Authorization (ACL) - AfterInvocationManager - implementation - AfterInvocationProviderManager": ".",
	"Authorization (ACL) - AfterInvocationManager - implementation - custom": ".",
	"Authorization - SpringEL - SecurityExpressionRoot": "Spring Security 3.0 introduced the ability to use Spring EL expressions as an authorization mechanism in addition to the simple use of configuration attributes and access-decision voters which have seen before. Expression-based access control is built on the same architecture but allows complicated Boolean logic to be encapsulated in a single expression.",
	"Authorization - SpringEL - SecurityExpressionRoot.hasPermission(Object target, Object permission)": "Returns true if the user has access to the provided target for the given permission. For example, hasPermission(domainObject, 'read')",
	"Authorization - SpringEL - SecurityExpressionRoot.hasPermission(Object targetId, String targetType, Object permission)": "Returns true if the user has access to the provided target for the given permission. For example, hasPermission(1, 'com.example.domain.Message', 'read')",
	"Authorization - SpringEL - SecurityExpressionRoot.hasAuthority([authority])": "Returns true if the current principal has the specified authority.",
	"Authorization - SpringEL - SecurityExpressionRoot.hasAnyAuthority([authority1,authority2])": "Returns true if the current principal has any of the supplied authorities (given as a comma-separated list of strings)",
	"Authorization - SpringEL - SecurityExpressionRoot.hasRole([role])": "Returns true if the current principal has the specified role. By default if the supplied role does not start with 'ROLE_' it will be added. This can be customized by modifying the defaultRolePrefix on DefaultWebSecurityExpressionHandler.",
	"Authorization - SpringEL - SecurityExpressionRoot.hasAnyRole([role1,role2])": "Returns true if the current principal has any of the supplied roles (given as a comma-separated list of strings). By default if the supplied role does not start with 'ROLE_' it will be added. This can be customized by modifying the defaultRolePrefix on DefaultWebSecurityExpressionHandler.",
	"Authorization - SpringEL - SecurityExpressionRoot.isAnonymous()": "Determines if the SecurityExpressionOperations.getAuthentication() is anonymous",
	"Authorization - SpringEL - SecurityExpressionRoot.isAuthenticated()": "Determines ifthe SecurityExpressionOperations.getAuthentication() is authenticated",
	"Authorization - SpringEL - SecurityExpressionRoot.isFullyAuthenticated()": "Determines if the SecurityExpressionOperations.getAuthentication() authenticated without the use of remember me",
	"Authorization - SpringEL - SecurityExpressionRoot.isRememberMe()": "Determines if the SecurityExpressionOperations.getAuthentication() was authenticated using remember me",
	"Authorization - SpringEL - SecurityExpressionRoot.denyAll()": "Always denies access",
	"Authorization - SpringEL - SecurityExpressionRoot.permitAll()": "Always grants access.",
	"Authorization - SpringEL - SecurityExpressionRoot.getAuthentication()": "Gets the Authentication used for evaluating the expressions",
	"Authorization - SpringEL - SecurityExpressionRoot.getPrincipal()": "Convenience method to access Authentication.getPrincipal() from getAuthentication()",
	"Authorization - SpringEL - SecurityExpressionRoot.setDefaultRolePrefix(java.lang.String defaultRolePrefix)": "Sets the default prefix to be added to hasAnyRole(String...) or hasRole(String).",
	"Authorization - SpringEL - SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator permissionEvaluator)": "",
	"Authorization - SpringEL - SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy roleHierarchy)": "",
	"Authorization - SpringEL - SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver trustResolver)": "",
	"Localization": "",
	"Session Management - SessionAuthenticationStrategy ": "",
	"Concurrency Control": "",
			
	"security filters": "SECTION",
	"Filters - declaration - DelegatingFilterProxy": "Springâ€™s DelegatingFilterProxy provides the link between web.xml and the application context.",
	"Filters - declaration - FilterChainProxy": "FilterChainProxy lets us add a single entry to web.xml and deal entirely with the application context file for managing our web security beans",
	"Filters - FilterSecurityInterceptor": "",
	"Filters - existing - ChannelProcessingFilter": "",
	"Filters - existing - SecurityContextPersistenceFilter": "",
	"Filters - existing - ConcurrentSessionFilter": "",
	"Filters - existing - UsernamePasswordAuthenticationFilter": "",
	"Filters - existing - CasAuthenticationFilter": "",
	"Filters - existing - BasicAuthenticationFilter": "",
	"Filters - existing - DigestAuthenticationFilter": "",
	"Filters - existing - SecurityContextHolderAwareRequestFilter": "",
	"Filters - existing - JaasApiIntegrationFilter": "",
	"Filters - existing - RememberMeAuthenticationFilter": "",
	"Filters - existing - AnonymousAuthenticationFilter": "",
	"Filters - existing - ExceptionTranslationFilter": "",
	"Filters - existing - SessionManagementFilter": "",
	
	"methods": "SECTION",
	"Methods - MethodSecurityInterceptor": ""
}