{
	"RxJS": "SECTION",
	"RxJS - desc": "Reactive Extensions for JavaScript (RxJS) library.",
	
	"ObservablePattern": "SECTION",
	"ObservablePattern - Observable - features - declarative": "Observables are declarative, they present a blueprint for data stream but do not produce values unitl a subscriber subscribes to them.",
	"ObservablePattern - Observable - features - unicast": "Observables are unicast (each subscribed Observer owns an independent execution of the Observable).",
	"ObservablePattern - Observable - features - initial": "Observables do not have initial value. They start emitting values when the subscriber is listening.",
	"ObservablePattern - Observable - features - usage": "Observables are generally used when you want to produce data in a lazy and declarative way, such as HTTP requests, user input events, or other asynchronous datasources.",
	"ObservablePattern - Observer": "is a collection of callbacks that knows how to listen to values delivered by the Observable.",
	"ObservablePattern - Subscription": "represents the execution of an Observable, is primarily useful for cancelling the execution.",
	"ObservablePattern - Operators": "are pure functions that enable a functional programming style of dealing with collections with operations like map, filter, concat, reduce, etc.",
	"ObservablePattern - Schedulers": "are centralized dispatchers to control concurrency, allowing us to coordinate when computation happens on e.g. setTimeout or requestAnimationFrame or others.",

	"Subject": "SECTION",
	"Subject - Subject": "A Subject in RxJS is a special type of Observable that acts as both an observer and an observable. Think of it as a bridge that can both emit values (like a broadcaster) and subscribe to receive values (like a listener).",
	"Subject - Subject - features - imperative": "Observables are imperative, they can produce values independently of whether there are subscribers.",
	"Subject - Subject - features - multicast": "It is a multicast observable that maintains a list of observers and notifies all of them when a new value is emitted using the next() method.",
	"Subject - Subject - features - initial": "Subject do not have initial value. They start emitting values when the subscriber is listening.",
	"Subject - Subject - features - usage": "Observables are commoly used in scenarios where you wnat to multicast events or share data between multiple subscribers, such as intercomponent communication or event broadcasting.",
	"Subject - BehaviorSubject - features - initial": "It has an initial value and will immediately emit the initial value to any subscriber as soon as they subscribe, even if no values have been emitted yet using the next() method.",
	"Subject - BehaviorSubject - features - after": "After the initial value is emitted, it behaves like a regular Subject and notifies subscribers about new values emitted using next().",
	"Subject - BehaviorSubject - features - usage": "This is useful when you want to provide the last known value to new subscribers, such as the current state of an application or the latest data fetched from an API.",
	"Subject - ReplaySubject - features - initial": "The ReplaySubject is a subject that can buffer and replay a specific number of values to new subscribers. When you create a ReplaySubject, you can specify the buffer size, which determines how many previous values should be replayed to new subscribers.",
	"Subject - ReplaySubject - features - usage": "This is useful when you want to provide a history of values to new subscribers or when you need to cache values for later use.",
	"Subject - AsyncSubject - features - initial": "The AsyncSubject is a subject that only emits the last value when it completes.",
	"Subject - AsyncSubject - features - after": "It will not emit any values until the subjectâ€™s complete() method is called. When completed, it will emit the last value (if any) to subscribers.",
	"Subject - AsyncSubject - features - usage": "This is useful when you need to wait for an operation to complete before emitting a final value, such as waiting for an HTTP request to finish and emitting the response as a single value."
	
}