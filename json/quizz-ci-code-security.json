{
	"Security": "SECTION",
	"Security 0": "https://medium.com/@hassene/api-security-best-practices-acf0e3a0d469",
	"Security 6": "https://www.linkedin.com/posts/rajneesh-kumar-mishra-97a40966_api-jwt-webdevelopment-activity-7322856160066170881-1D9C?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 7": "https://www.linkedin.com/posts/zoranmilosevic_things-every-developer-should-know-json-activity-7312709177108238336-wxuR?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 8": "https://www.linkedin.com/posts/activity-7322480946769780736-zgaU/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 10": "https://www.linkedin.com/posts/bytebytego_systemdesign-coding-interviewtips-activity-7313058044521705473-b2Zj/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 11": "https://www.linkedin.com/posts/sina-riyahi_how-ssl-certificate-works-an-ssl-secure-activity-7311667232110010368-MQJ0/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 12": "https://www.linkedin.com/posts/sahnlam_oauth-20-flows-visualized-note-the-implicit-activity-7312686657302892545-swbe?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 14": "https://www.linkedin.com/posts/parikshit-wayal-1695b52a6_improved-php-script-activity-7320982316745482240-UYIC/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 15": "https://www.linkedin.com/posts/shantanu-shende-17800a324_developer-backend-pythondeveloper-activity-7318113943007158272-Xs4s/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 17": "https://www.linkedin.com/posts/activity-7322160102554169344-P8_F/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 18": "https://www.linkedin.com/posts/ninadurann_api-security-best-tips-every-api-exposed-activity-7314889735401803776-f8oN/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 19": "https://www.linkedin.com/posts/nikkisiapno_http-2-vs-http-3-whats-the-difference-activity-7307711303282802688-xgWK/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 23": "https://www.linkedin.com/posts/adityajaiswal7_the-role-and-importance-of-security-in-devops-activity-7325497136131821568-5kw0?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 24": "https://www.linkedin.com/posts/bavicnative_kubernetes-security-checklist-activity-7326093508656672768-TGbw?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 25": "https://www.linkedin.com/posts/activity-7326425683415523328-y81I/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 26": "https://www.linkedin.com/posts/devops-expert_how-to-build-a-devsecops-pipeline-activity-7325731161442263040-sfyA?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 27": "https://www.linkedin.com/posts/cyberedition_cybersecurity-activity-7325080247937236993-xxvV?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 28": "https://www.linkedin.com/posts/activity-7327094041978748928-x3UI/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 29": "https://www.linkedin.com/posts/brijpandeyji_when-ai-meets-security-the-blind-spot-we-activity-7327366614192971776-Yc6r?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 31": "https://www.linkedin.com/posts/ahmedalibutt_sslt-certificate-activity-7327960385246904340-xbhd/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 32": "https://www.linkedin.com/posts/feki-ayman_ssltls-certificate-management-in-devops-activity-7328701711118741505-crQL?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 33": "https://www.linkedin.com/posts/deepmarketer_devsecops-notes-for-beginners-ugcPost-7329355487492091904-9epm/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 34": "https://www.linkedin.com/posts/tauseeffayyaz_api-security-handbook-activity-7329167204174729216-zsXG?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 36": "https://www.linkedin.com/posts/cyberedition_cybersecurity-activity-7325080247937236993-xxvV?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 37": "https://www.linkedin.com/posts/activity-7326425683415523328-y81I/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 38": "https://www.linkedin.com/posts/muhamad-mamoun_secure-website-cicd-infra-activity-7329684704016658432-1Mtv/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 40": "https://www.linkedin.com/posts/zayan-ahmed-5b7556321_how-ssh-works-activity-7329505983200751616-sFud?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 41": "https://www.linkedin.com/posts/adityajaiswal7_ssl-tls-certificate-setup-and-management-activity-7327918546078892033-OuNV/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 42": "https://www.linkedin.com/posts/divyam2000_day-2-aws-activity-7331268230713368576-PxXc?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 43": "https://www.linkedin.com/posts/deepmarketer_devsecops-notes-for-beginners-ugcPost-7329355487492091904-9epm/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 50": "https://www.linkedin.com/posts/muneesmmw_%F0%9D%97%A6%F0%9D%97%A6%F0%9D%97%9F%F0%9D%97%A7%F0%9D%97%9F%F0%9D%97%A6-%F0%9D%97%A6%F0%9D%97%B2%F0%9D%98%81%F0%9D%98%82%F0%9D%97%BD-devops-activity-7334917378373206016-GZXm/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 51": "https://www.linkedin.com/posts/samer-mansouri_project-report-activity-7336469974774861824-A1EO?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Security 53": "",
	"Security 54": "",
	"Security 55": "",
	"Security 56": "",
	"Security 57": "",
	"Security 58": "",
	"Security 59": "",

	"UI": "SECTION",
	"UI - OWASP": "",
	"UI - OWASP - Top10": "",
	"UI - SensitiveInfo": "",
  "UI - Vulnerabilities - XSS": "Cross-Site Scripting (XSS).",
	"UI - Vulnerabilities - XSS - Encode": "Always encode data before outputting to HTML.",
	"UI - Vulnerabilities - XSS - Content-Security-Policy": ".",
	"UI - Vulnerabilities - XSS - HTTPSecurityHeaders - X-XSS-Protection": ".",
	"UI - Vulnerabilities - XSS - HTTPSecurityHeaders - X-Content-Type-Options": ".",
	"UI - Vulnerabilities - XSS - HTTPSecurityHeaders - X-Frame-Options": ".",
	"UI - Vulnerabilities - XSS - Sanitize": "Any form of user input (like search forms, comment sections, or feedback forms) must be treated as untrusted. Malicious users can exploit these to execute XSS attacks or SQL injections.",
	"UI - Vulnerabilities - XSS - Sanitize - Manual": ".",
	"UI - Vulnerabilities - XSS - Sanitize - Angular": ".",
	"UI - Vulnerabilities - XSS - Sanitize - Tools - DOMPurify": ".",
	"UI - Vulnerabilities - XSS - Escape": ".",
	"UI - Vulnerabilities - XSS - PKCE": "PKCE was originally designed to protect the authorization code flow in mobile apps, but its ability to prevent authorization code injection makes it useful for every type of OAuth client, even web apps that use client authentication.",
	"UI - Vulnerabilities - XSS - NoEval()": "Functions like eval(), setTimeout() with dynamic strings, and innerHTML are vulnerable to XSS attacks. They allow an attacker to inject arbitrary code into your site.",
  "UI - Vulnerabilities - CORS": "https://javascript.plainenglish.io/cors-the-friendly-gatekeeper-of-the-web-and-how-to-fix-it-650e33179d24",
  "UI - Vulnerabilities - CORS - CORSPolicies": "Configure your CORS policy to restrict allowed origins, HTTP methods, and headers.",
	"UI - Vulnerabilities - CSRF": "Cross-Site Request Forgery (CSRF) is a type of security attack on web applications. In a CSRF attack, the attacker tricks a legitimate user into submitting a request that they did not intend to..",
	"UI - Vulnerabilities - CSP": "Content Security Policy (CSP) Headers. Implementing a Content Security Policy (CSP) is a crucial step in securing your web application against various types of attacks, including Cross-Site Scripting (XSS).",
	"UI - Vulnerabilities - IDOR": "Insecure Direct Object References (IDOR) refer to a security weakness where an application provides direct access to objects based on user-supplied input..",
	"UI - SensitiveInfo - .env": "One of the key aspects of frontend application security is protecting sensitive information like API keys, database credentials, and other confidential data. Use env variables so they donâ€™t get leaked into the git repository. Especially when the repository is open source and public.",
	"UI - WebAuthenticationAPI": "Web Authentication API (WebAuthn) is a W3C and FIDO specification that allows registration and authentication of users using public key cryptography instead of a password.",
	"UI - Standards - NIS2": "https://digital-strategy.ec.europa.eu/en/policies/nis2-directive",

	"Transport": "SECTION",
  "Transport - HTTP - CSP": "The Content-Security-Policy header allows you to restrict which resources (such as JavaScript, CSS, Images, etc.) can be loaded, and the URLs that they can be loaded from..",
	"Transport - HTTP - SSLCertificates": "Ensure encrypted communication between users and servers.",
  "Transport - HTTP - UseHTTPS": "with SSL, TLS or mTLS.",
	"Transport - HTTP - UseHTTPS - SSL": ".",
	"Transport - HTTP - UseHTTPS - TLS": ".",
	"Transport - HTTP - UseHTTPS - mTLS": ".",
  "Transport - HTTP - UseHTTPS - HSTS": "The HTTP Strict-Transport-Security response header (often abbreviated as HSTS) informs browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be upgraded to HTTPS.",
	"Transport - HTTP - Configure": "",
  "Transport - HTTP - Configure - SpringBoot - programmatically": "@Override public void customize(ConfigurableServletWebServerFactory factory) { factory.setPort(8443); factory.setSsl(getSsl()); }",
  "Transport - HTTP - Configure - SpringBoot - declaratively": "in application.properties: server.ssl.enabled=true server.ssl.key-store-type=PKCS12 server.ssl.key-store=classpath:keystore.p12 server.ssl.key-store-password=yourpassword server.ssl.key-alias=youralias server.ssl.enabled-protocols=TLSv1.2,TLSv1.3",
  "Transport - WS-Security": "Web Services Security (WS-Security, WSS) is an extension to SOAP to apply security to Web services.",

	"Invokation": "SECTION",
	"Invokation - DDoS - RateLimiting": "Prevent brute-force attacks. Controlling the amount of traffic a server receives within a specified time frame. It's used to prevent overuse of resources, improve server reliability, and ensure fair usage among users. Rate limiting is common in API management to prevent abuse and to manage traffic effectively.",
	"Invokation - DDoS - RateLimiting - Algorithms": "In implementing rate limiting, it's crucial to choose an algorithm that aligns with the system's needs, balancing between fairness, efficiency, and resource utilization.",
	"Invokation - DDoS - RateLimiting - Algorithms - TokenBucket": "Description: Uses tokens to control traffic flow. Tokens are added to a bucket at a regular rate and requests consume tokens. If the bucket runs out of tokens, new requests are denied. Example: A bucket can hold 10 tokens and 1 token is added every 10 seconds. A request needs 1 token to pass. If there's a sudden burst of 15 requests, only 10 can go through, and subsequent requests must wait for new tokens.",
	"Invokation - DDoS - RateLimiting - Algorithms - LeakyBucket": "Description: Requests are added to a queue (bucket) and processed at a fixed rate to smooth out burst traffic. Example: If the bucket size is 10 and the rate is 1 request per second, and a burst of 20 requests comes in, the first 10 are queued and processed at 1 per second, while the rest are either queued (if the bucket can hold them) or discarded.",
	"Invokation - DDoS - RateLimiting - Algorithms - FixedWindowCounter": "Description: Divides time into fixed windows and counts the number of requests in each window. Example: If the limit is 100 requests per hour, and a user makes 100 requests in the first half-hour, they will be blocked for the remaining half-hour, even if the server is underutilized during that time.",
	"Invokation - DDoS - RateLimiting - Algorithms - SlidingWindowCounter": "Description: A hybrid of the fixed window and the sliding log, offering a balance between efficiency and precision. It combines the fixed window's simplicity and the sliding log's accuracy. Example: If the limit is 100 requests per hour, the server counts requests in the current window and a fraction of the requests from the previous window, based on the time elapsed.",
	"Invokation - DDoS - RateLimiting - Algorithms - SlidingWindowLog": "Description: Keeps a time-stamped log of requests. It checks whether adding a new request would exceed the rate limit, considering the time frame. Example: If the limit is 100 requests per hour, each incoming request is checked against the log of requests in the past hour. Older entries are discarded.",
	"Invokation - DDoS - RateLimiting - Headers - RFC 6585": "Return Proper Rate-Limit Headers (RFC 6585). Include these headers in responses to inform clients of their rate limit status.",
	"Invokation - DDoS - RateLimiting - Headers - x-ratelimit-limit": "The maximum number of requests allowed within the time window.",
	"Invokation - DDoS - RateLimiting - Headers - x-ratelimit-remaining": "The number of requests you can still make within the current time window.",
	"Invokation - DDoS - RateLimiting - Headers - x-ratelimit-reset": "The time (in seconds) until the rate limit resets. The behavior of RateLimit-Reset is compatible with the delta-seconds notation of Retry-After.",
	"Invokation - DDoS - RateLimiting - Headers - x-ratelimit-policy": "return the quota policy. The quota policy expression can be found in paragraph 2.1 of the IETF draft. The format is, for example, for 100 requests in 60 seconds:",
	"Invokation - DDoS - RateLimiting - Applications - NetworkTraffic": "To control data flow in networks.",
	"Invokation - DDoS - RateLimiting - Applications - WebServers": "To control traffic and prevent abuse.",
	"Invokation - DDoS - RateLimiting - Applications - ApplicationServers": "To prevent overload and ensure fair usage.",
	"Invokation - DDoS - RateLimiting - Applications - APIs": "To control traffic and prevent abuse.",
	"Invokation - DDoS - RateLimiting - Tools - APIGateway": ".",
	"Invokation - DDoS - RateLimiting - Tools - express-rate-limit": ".",
	"Invokation - DDoS - Throttling": "Throttling doesnâ€™t block requests but slows down the rate at which requests are processed.",
	"Invokation - DDoS - Throttling - Algorithms": "There are four common throttling algorithms: the fixed window algorithm, sliding window algorithm, leaky bucket algorithm, and token bucket algorithm.",
	"Invokation - DDoS - Throttling - Algorithms - FixedWindow": "The number of accesses within a specified period is added up. When it reaches the specified threshold, the throttling is triggered, and the number of accesses is cleared in the next period.",
	"Invokation - DDoS - Throttling - Algorithms - SlidingWindow": "The sliding window is an improved version of the fixed window, addressing the issue where the fixed window receives twice the threshold number of requests when the window is switched. In the sliding window algorithm, the start and end times of the window are dynamic, while the window size remains fixed. This algorithm effectively handles the window boundary problem, but its implementation is relatively complex due to the need to record the timestamp of each request.",
	"Invokation - DDoS - Throttling - Algorithms - LeakyBucketAlgorithm": "The leaky bucket throttling algorithm is a common traffic shaping and traffic policy algorithm, which helps to regulate the rate of data transmission and avoid network congestion.",
	"Invokation - DDoS - Throttling - Algorithms - TokenBucketAlgorithm": "The token bucket algorithm is an improved version of the leaky bucket algorithm. It limits the average rate of service calls while allowing certain burst calls.",
	"Invokation - CircuitBreaker": "",

	"IAM": "SECTION",

  "Processing": "SECTION",
	"Processing - Validation": "Validating request payloads is crucial for ensuring data integrity, security, and API reliability.",
	"Processing - Validation - Threats": ".",
	"Processing - Validation - Threats - InjectionAttacks": "Protect against injection attacks (e.g., SQLi, XSS).",
	"Processing - Validation - Threats - InjectionAttacks - SQLInjection": ".",
	"Processing - Validation - Threats - InjectionAttacks - XSS": ".",
	"Processing - Validation - Threats - JSON Threat Protection": "Minimizes the risk posed by content-level attacks by enabling you to specify limits on various JSON structures, such as arrays and strings.",
	"Processing - Validation - Threats - XML Threat Protection": "Applications processing XML requests are susceptible to attacks characterized by unusual inflation of elements, attributes, and nesting levels.",
	"Processing - Validation - Threats - MessageSize": ".",
	"Processing - Validation - Threats - Malformed": "Prevent malformed/invalid data from being processed.",
	"Processing - Validation - Threats - Compliance": "Ensure compliance with expected data formats (e.g., JSON schema).",
	"Processing - Validation - Layers": ".",
	"Processing - Validation - Layers - Client": "HTML Sanitization.",
	"Processing - Validation - Layers - Protocol": "GraphQL: Built-in type validation. gRPC: Uses Protocol Buffers (protobuf) for strict payload definitions.",
	"Processing - Validation - Layers - Schema": "Validate payloads against a predefined schema (e.g., JSON Schema, OpenAPI/Swagger).",
	"Processing - Validation - Layers - Controllers - BeanValidationAPI": "Controllers validated as Beans because the BeanValidationAPI",
	"Processing - Validation - Layers - Controllers - BeanValidationAPI - @Valid - JSR-303â€™": "@Valid @RequestBody UserRequest userRequest - method-level",
	"Processing - Validation - Layers - Controllers - BeanValidationAPI - @Validated - JSR-303": "@Valid @RequestBody UserRequest userRequest - member attributes, group validation",
	"Processing - Validation - Layers - Middleware": "Use libraries like express-validator (for Express.js) or similar in other frameworks.",
	"Processing - Validation - Layers - Code - TypeSafe": "Use languages/frameworks with compile-time validation (e.g., TypeScript, GraphQL).",
	"Processing - Validation - Layers - Code - Manual": "Validate manually in code",
	"Processing - Validation - Layers - Data - Hibernate - Autogenerate": "Add Hibernate Tools to your project > Set up Hibernate configuration > Use Hibernate Reverse Engineering (hibernate.reveng.xml) to map schema constraints to validations > Run Hibernate Code Generation",
	"Processing - Validation - Layers - Data - JPA - Autogenerate": "JPA Buddy is a powerful IntelliJ plugin that can auto-generate entities with validation annotations from your DB schema.",
	"Processing - Validation - Layers - Data - Hibernate - Columns - CustomValidators": "",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation": "hibernate-validator is the reference implementation of BeanValidationAPI",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Length": "@Length(min=, max=) check if the string length match the range",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Max": "@Max(value=) check if the value is less than or equals to max",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Min": "@Min(value=) check if the value is more than or equals to min",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @NotNull": "@NotNull check if the value is not null",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @NotEmpty": "@NotEmpty check if the string is not null nor empty. Check if the connection is not null nor empty",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Past": "@Past check if the date is in the past",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Future": "@Future check if the date is in the future",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Pattern": "@Pattern(regex='regexp', flag=) or @Patterns( {@Pattern(...)} ) check if the property match the regular expression given a match flag (see java.util.regex.Pattern )",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Range": "@Range(min=, max=) check if the value is between min and max (included)",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Size": "@Size(min=, max=) check if the element size is between min and max (included)",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @AssertFalse": "check that the method evaluates to false (useful for constraints expressed in code rather than annotations)",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @AssertTrue": "check that the method evaluates to true (useful for constraints expressed in code rather than annotations)",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Valid": "perform validation recursively on the associated object. If the object is a Collection or an array, the elements are validated recursively. If the object is a Map, the value elements are validated recursively.",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Email": "check whether the string is conform to the email address specification",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @CreditCardNumber": "@CreditCardNumber check whether the string is a well formated credit card number (derivative of the Luhn algorithm)",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @Digits": "@Digits check whether the property is a number having up to integerDigits integer digits and fractionalDigits fractonal digits",
	"Processing - Validation - Layers - Data - Hibernate - Columns - HibernateValidation - @EAN": "check whether the string is a properly formated EAN or UPC-A code",
	"Processing - Validation - Layers - Data - Hibernate - Columns - @Column": "The JPA @Column annotation can customize the way a field maps to the database.",
	"Processing - Validation - Layers - Data - Hibernate - Columns - @Column - unique": "whether the column represents a unique database key.",
	"Processing - Validation - Layers - Data - Hibernate - Columns - @Column - precision": "decimal precision for the column.",
	"Processing - Validation - Layers - Data - Hibernate - Columns - @Column - nullable": "whether the column can contain null values.",
	"Processing - Validation - Layers - Data - Hibernate - Columns - @Column - length": "how many characters the database column must support.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI": "Model validated as Beans because the BeanValidationAPI",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - JSR303 - 2009": "",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - JSR349 - 2013": "",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - JSR380 - 2017": "",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - spring-boot-starter-validation": "",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @NotNull": "@NotNull validates that the annotated property value isnâ€™t null.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @AssertTrue": "@AssertTrue validates that the annotated property value is true.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @Size": "@Size validates that the annotated property value has a size between the attributes min and max. We can apply it to String, Collection, Map, and array properties.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @Min": "@Min validates that the annotated property has a value no smaller than the value attribute.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @Max": "@Max validates that the annotated property has a value no larger than the value attribute.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @Email": "@Email validates that the annotated property is a valid email address.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @NotEmpty": "@NotEmpty validates that the property isnâ€™t null or empty. We can apply it to String, Collection, Map or Array values.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @NotBlank": "@NotBlank can be applied only to text values, and validates that the property isnâ€™t null or whitespace.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @Positive": "@Positive and @PositiveOrZero apply to numeric values, and validate that theyâ€™re strictly positive, or positive including 0.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @Negative": "@Negative and @NegativeOrZero apply to numeric values, and validate that theyâ€™re strictly negative, or negative including 0.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @Past": "@Past and @PastOrPresent validate that a date value is in the past, or the past including the present. We can apply it to date types, including those added in Java 8.",
	"Processing - Validation - Layers - Data - JPA - Columns - BeanValidationAPI - Config - @Future": "@Future and @FutureOrPresent validate that a date value is in the future, or in the future including the present.",
	"Processing - Validation - Layers - Data - PrepareStatements": "Use Prepared Statements (Parameterized Queries)",
	"Processing - Validation - Layers - Data - PrepareStatements - ORM": "Use ORMs that automatically parameterize queries:",
	"Processing - Validation - Layers - Data - StoredProcedures": "Use stored procedures",
	"Processing - Validation - Layers - Data - RegEx": "Implement regular expression filters for suspicious SQL patterns",
	"Processing - Validation - Layers - Data - Equivalence - NOT NULL": "@NotNull",
	"Processing - Validation - Layers - Data - Equivalence - VARCHAR(100)": "@Size(max = 100)",
	"Processing - Validation - Layers - Data - Equivalence - CHECK (age >= 18)": "@Min(18)",
	"Processing - Validation - Layers - Data - Equivalence - UNIQUE": "@UniqueConstraint (JPA)",
	"Processing - Validation - Layers - Data - Equivalence - DECIMAL(10,2)": "@Digits(integer=10, fraction=2)",
	"Processing - Validation - Layers - Data - Equivalence - EMAIL": "@Email (custom)",
	"Processing - Validation - GoodPractices - ValidateEarly": "Check payloads at the API gateway or middleware layer.",
	"Processing - Validation - GoodPractices - StandardizedErrors": "Use standardized error formats (e.g., RFC 7807).",
	"Processing - Validation - GoodPractices - SanitizeInputs": "Strip unsafe content (e.g., HTML tags) even after validation.",
	"Processing - Validation - GoodPractices - UseAllowlists": "Reject unexpected fields (e.g., with additionalProperties: false in JSON Schema).",
	"Processing - Validation - GoodPractices - CombineTechniques": "Use both runtime (schema) and compile-time (TypeScript) checks.",
	"Processing - Validation - GoodPractices - LeastPrivilegePrinciple": "Database users should have minimal required permissions.",
	"Processing - Validation - Tools - Express": "express-validator, joi, zod, ajv",
	"Processing - Validation - Tools - Flask": "marshmallow, pydantic",
	"Processing - Validation - Tools - Spring": "Bean Validation (@Valid), Hibernate Validator",
	"Processing - Validation - Tools - Rails": "Strong Parameters, ActiveModel Validations",
	"Processing - Validation - Tools - Go": "go-playground/validator",
	"Processing - SecretsManagement": "AWS Secrets Manager, Azure Key Vault, or HashiCorp Vault.",
	"Processing - SecretsManagement - Tools - AWSSecretsManager": "",
	"Processing - SecretsManagement - Tools - AzureKeyVault": ".",
	"Processing - SecretsManagement - Tools - HashiCorpVault": ".",

  "Middleware": "SECTION",
	"Middleware - ServiceMesh - mTLS": "Built-in mTLS for service-to-service communication.",
	"Middleware - ServiceMesh - ControlPolicies": "Fine-grained traffic control policies."

}

