{

	"Microservices": "SECTION",
	"Microservices - Monolithic": "Build an application with a monolithic architecture. For example: a single Java WAR file. a single directory hierarchy of Rails or NodeJS code",
	"Microservices - Principles - Microservice": "Define an architecture that structures the application as a set of loosely coupled, collaborating services.",
	"Microservices - Principles - Microservice - CAP": "According to CAP theorem, microservices sacrify consistency to improve availabity",
	"Microservices - Principles - Microservice - Priorities": "(0) Eventual Consistency (1) Decomposition + Storage (2) Service Discovery + Publishing + Commnication Style + Deployment (3) UI + Testing + Configuration + Observability + Security + Reliability +  ",
	"Microservices - Principles - Microservice - Priorities - (0) EventualConsistency": "(0) Eventual Consistency",
	"Microservices - Principles - Microservice - Priorities - (0) EventualConsistency - EventualConsistent": "3 approaches: (1) remove inconsistenct by design (event sourcing + CQRS), (2) address the inconsistency (saga), (3) accept the inconsistency",
	"Microservices - Principles - Microservice - Priorities - (1) Decomposition + Storage": "(1) Decomposition + Storage",
	"Microservices - Principles - Microservice - Priorities - (2) Service Discovery + Publishing + Commnication Style + Deployment": "(2) Service Discovery + Publishing + Commnication Style + Deployment",
	"Microservices - Principles - Microservice - Priorities - (3) UI + Testing + Configuration + Observability + Security + Reliability": "(3) UI + Testing + Configuration + Observability + Security + Reliability",
	"Microservices - Principles - IDEALS": "IDEALS is considered an equivalent of the SOLID principles from object oriented design in the world of microservices.",
	"Microservices - Principles - IDEALS - InterfaceSegregation": "Instead of a class interface with all possible methods clients might need, there should be separate interfaces catering to the specific needs of each type of client.",
	"Microservices - Principles - IDEALS - Deployability": "Deployability (is on you) acknowledges that in the microservice era, which is also the DevOps era, there are critical design decisions and technology choices developers need to make regarding packaging, deploying and running microservices. ",
	"Microservices - Principles - IDEALS - EventDriven": "Event-driven suggests that whenever possible we should model our services to be activated by an asynchronous message or event instead of a synchronous call. Availability over consistency reminds us that more often end users value the availability of the system over strong data consistency, and they’re okay with eventual consistency. ",
	"Microservices - Principles - IDEALS - AvailabilityOverConsistency": "",
	"Microservices - Principles - IDEALS - LooseCoupling": "Loose-coupling remains an important design concern in the case of microservices, with respect to afferent (incoming) and efferent (outgoing) coupling. Single responsibility is the idea that enables modeling microservices that are not too large or too slim because they contain the right amount of cohesive functionality.",
	"Microservices - Principles - IDEALS - SingleResponsibility": "The original Single Responsibility Principle (SRP) is about having cohesive functionality in an OO class.",

	"Client": "SECTION",
	"Client - Patterns": "",
	"Client - Pattern - ServerSide page fragment composition": "Each team developers a web application that generates the HTML fragment that implements the region of the page for their service. A UI team is responsible for developing the page templates that build pages by performing server-side aggregation (e.g. server-side include style mechanism) of the service-specific HTML fragments.",
	"Client - Pattern - ClientSide - UIComposition": "Each team develops a client-side UI component, such an AngularJS directive, that implements the region of the page/screen for their service. A UI team is responsible implementing the page skeletons that build pages/screens by composing multiple, service-specific UI components.",
	"Client - Configuration": "Externalize all application configuration including the database credentials and network location. On startup, a service reads the configuration from an external source, e.g. OS environment variables, etc.",
	"Client - Caching": "",

	"Interaction": "SECTION",
	"Interaction - Aggregation - Patterns - Backend4Frontend": "optimises communication between clients and services by defining a separate API gateway for each kind of client.",
	"Interaction - Communication - Patterns - RPC": "Use RPI for inter-service communication. The client uses a request/reply-based protocol to make requests to a service.",
	"Interaction - Communication - Patterns - Messaging": "Use asynchronous messaging for inter-service communication. Services communicating by exchanging messages over messaging channels.",
	"Interaction - Communication - Patterns - DomainSpecificProtocol": "Use a domain-specific protocol for inter-service communication.",
	"Interaction - Communications - Protocols - SOAP": "A heavyweight protocol that uses XML-based messaging, offering strict security and reliability for enterprise applications. ",
	"Interaction - Communications - Protocols - JAX-WS": "",
	"Interaction - Communications - Protocols - REST": "",
	"Interaction - Communications - Protocols - REST - Requirements - Richardson Maturity Model": "",
	"Interaction - Communications - Protocols - REST - Requirements - Richardson Maturity Model - Level0": "Level 0: Swamp of POX. Level 0 uses its implementing protocol (normally HTTP, but it doesn't have to be) like a transport protocol.",
	"Interaction - Communications - Protocols - REST - Requirements - Richardson Maturity Model - Level1": "Level 1: Resources. When your API can distinguish between different resources, it might be level 1. This level uses multiple URIs, where every URI is the entry point to a specific resource.",
	"Interaction - Communications - Protocols - REST - Requirements - Richardson Maturity Model - Level2": "Level 2: HTTP verbs. This level indicates that your API should use the protocol properties in order to deal with scalability and failures. Don't use a single POST method for all, but make use of GET when you are requesting resources, and use the DELETE method when you want to delete a resources. Also, use the response codes of your application protocol. Don't use 200 (OK) code when something went wrong for instance. ",
	"Interaction - Communications - Protocols - REST - Requirements - Richardson Maturity Model - Level3": "Level 3: Hypermedia controls Level 3, the highest level, uses HATEOAS to deal with discovering the possibilities of your API towards the clients.",
	"Interaction - Communications - Protocols - REST - Requirements - REST Constraints": "",
	"Interaction - Communications - Protocols - REST - Requirements - REST Constraints (6 from thesis)": "Uniform Interface, Stateless, Cacheable, Client-Server, Layered System, Code on Demand (optional)",
	"Interaction - Communications - Protocols - REST - Requirements - REST Constraint. 1. Uniform Interface": "*(1) Resource-Based (Individual resources are identified in requests using URIs as resource identifiers), (2) Manipulation of Resources Through Representations (When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource on the server, provided i has permission to do so). (3) Self-descriptive Messages (Each message includes enough information to describe how to process the message). (4) Hypermedia as the Engine of Application State (HATEOAS) (Clients deliver state via body contents, query-string parameters, request headers and the requested URI (the resource name). Services deliver state to clients via body content, response codes, and response headers. This is technically referred-to as hypermedia (or hyperlinks within hypertext).",
	"Interaction - Communications - Protocols - REST - Requirements - REST Constraint. 2. Stateless": "As REST is an acronym for REpresentational State Transfer, statelessness is key. Essentially, what this means is that the necessary state to handle the request is contained within the request itself, whether as part of the URI, query-string parameters, body, or headers. The URI uniquely identifies the resource and the body contains the state (or state change) of that resource. Then after the server does it's processing, the appropriate state, or the piece(s) of state that matter, are communicated back to the client via headers, status and response body.",
	"Interaction - Communications - Protocols - REST - Requirements - REST Constraint. 3. Cacheable": "As on the World Wide Web, clients can cache responses. Responses must therefore, implicitly or explicitly, define themselves as cacheable, or not, to prevent clients reusing stale or inappropriate data in response to further requests. Well-managed caching partially or completely eliminates some client–server interactions, further improving scalability and performance.",
	"Interaction - Communications - Protocols - REST - Requirements - REST Constraint. 4. Client-Server": "The uniform interface separates clients from servers. This separation of concerns means that, for example, clients are not concerned with data storage, which remains internal to each server, so that the portability of client code is improved. Servers are not concerned with the user interface or user state, so that servers can be simpler and more scalable. Servers and clients may also be replaced and developed independently, as long as the interface is not altered.",
	"Interaction - Communications - Protocols - REST - Requirements - REST Constraint. 5. Layered System": "A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Intermediary servers may improve system scalability by enabling load-balancing and by providing shared caches. Layers may also enforce security policies.",
	"Interaction - Communications - Protocols - REST - Requirements - REST Constraint. 6. Code on Demand (optional)": "Servers are able to temporarily extend or customize the functionality of a client by transferring logic to it that it can execute. Examples of this may include compiled components such as Java applets and client-side scripts such as JavaScript. Complying with these constraints, and thus conforming to the REST architectural style, will enable any kind of distributed hypermedia system to have desirable emergent properties, such as performance, scalability, simplicity, modifiability, visibility, portability and reliability. NOTE: The only optional constraint of REST architecture is code on demand. If a service violates any other constraint, it cannot strictly be referred to as RESTful.",
	"Interaction - Communications - Protocols - REST - Design - Steps": ".",
	"Interaction - Communications - Protocols - REST - Design - Steps - 1-ObjectModel": "(1) Identify Object Model. The very first step in designing a REST API based application is – identifying the objects which will be presented as resources.",
	"Interaction - Communications - Protocols - REST - Design - Steps - 2-ResourceURIs": "(2) Now when object model is ready, it’s time to decide the resource URIs. At this step, while designing the resource URIs – focus on the relationship between resources and its sub-resources. These resource URIs are endpoints for RESTful services. These URIs do not use any verb or operation. It’s very important to not include any verb in URIs. URIs should all be nouns only.",
	"Interaction - Communications - Protocols - REST - Design - Steps - 3-Representations": "(3) Determine Representations Now when resource URIs have been decided, let’s work on their representations. Mostly representations are defined in either XML or JSON format.",
	"Interaction - Communications - Protocols - REST - Design - Steps - 4-HTTPMethods": "(4) Assign HTTP Methods So our resource URIs and their representation are fixed now. Let’s decide the possible operations in application and map these operations on resource URIs. A user of network application can perform browse, create, update or delete operations. So let’s map them.",
	"Interaction - Communications - Protocols - REST - Design - Steps - 5-Other": "(5) You need to work on other aspects of the application as well: Logging, Security, Discovery etc.",
	"Interaction - Communications - Protocols - REST - Methods - REST vs HTTP": "There is nothing in the REST constraints that makes the usage of HTTP as a transfer protocol mandatory. It's perfectly possible to use other transfer protocols like SNMP, SMTP and others to use, and your API could still very well be a RESTful API In practice, most - if not all - RESTful APIs currently use HTTP as a transport layer, since the infrastructure, servers and client libraries for HTTP are widely available already",
	"Interaction - Communications - Protocols - REST - Methods - Idempotency": "It is a contract defined by the HTTP standard that developers must adhere to when implementing RESTful APIs over HTTP. An operation doesn’t automatically become idempotent or safe just because it is invoked using the GET method, if it isn’t implemented in an idempotent manner",
	"Interaction - Communications - Protocols - REST - Methods - Idempotent - safe": "Some idempotent operations have an additional, special property: they do not modify the state on the server side at all. Simply put, these methods are read-only and have absolutely zero side-effects. These types of operations are given a special name: safe or nullipotent methods. Safe HTTP method are GET and HEAD, which doesn't change the resource representation on the Server, but all other HTTP methods e.g. POST, PUT, or DELETE are non-safe.",
	"Interaction - Communications - Protocols - REST - Methods - Idempotent - methods": "In the context of REST APIs, when making multiple identical requests has the same effect as making a single request – then that REST API is called idempotent. If you follow REST principles in designing API, you will have automatically idempotent REST APIs for GET, PUT, DELETE, HEAD, OPTIONS and TRACE HTTP methods. Only POST APIs will not be idempotent. Idempotency in REST does not mean that consecutive calls to the same method and resource must return the same response, but rather that consecutive calls to the same method and resource MUST have the same intended effect on the server.",
	"Interaction - Communications - Protocols - REST - Methods - HTTP GET": "Use GET requests to retrieve resource representation/information only – and not to modify it in any way. As GET requests do not change the state of the resource, these are said to be safe methods. Additionally, GET APIs should be idempotent. Responses if item: 200 (OK), single user. 404 (Not Found), if ID not found or invalid. Responses if collection: 200 (OK), list of users. Use pagination, sorting and filtering to navigate big lists.",
	"Interaction - Communications - Protocols - REST - Methods - HTTP POST": "POST methods are used to create a new resource into the collection of resources. Responses to this method are not cacheable. POST is neither safe nor idempotent and invoking two identical POST requests will result in two different resources containing the same information (except resource ids). Responses if item: Avoid using POST on single resource. Responses if collection: 201 (Created), ‘Location’ header with link to /users/{id} containing new ID.",
	"Interaction - Communications - Protocols - REST - Methods - HTTP PUT": "Use PUT APIs primarily to update existing resource (if the resource does not exist then API may decide to create a new resource or not). If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable. Responses if item: 200 (OK) or 204 (No Content). Use 404 (Not Found), if ID not found or invalid.. Responses if collection: 404 (Not Found), unless you want to update every resource in the entire collection of resource.",
	"Interaction - Communications - Protocols - REST - Methods - HTTP DELETE": "As the name applies, DELETE APIs are used to delete resources (identified by the Request-URI). DELETE operations are idempotent. If you DELETE a resource, it’s removed from the collection of resource. Repeatedly calling DELETE API on that resource will not change the outcome – however calling DELETE on a resource a second time will return a 404 (NOT FOUND) since it was already removed. Some may argue that it makes DELETE method non-idempotent. It’s a matter of discussion and personal opinion. If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable. Responses if item: 200 (OK). 404 (Not Found), if ID not found or invalid. Responses if collection: 404 (Not Found), unless you want to delete the whole collection — use with caution.",
	"Interaction - Communications - Protocols - REST - Methods - HTTP PATCH": "HTTP PATCH requests are to make partial update on a resource. If you see PUT requests also modify a resource entity so to make more clear – PATCH method is the correct choice for partially updating an existing resource and PUT should only be used if you’re replacing a resource in its entirety. Support for PATCH in browsers, servers, and web application frameworks is not universal. PATCH method is not a replacement for the POST or PUT methods. It applies a delta (diff) rather than replacing the entire resource. Responses if item: 200 (OK) or 204 (No Content). Use 404 (Not Found), if ID not found or invalid. Responses if collection: 404 (Not Found), unless you want to modify the collection itself.",
	"Interaction - Communications - Protocols - REST - Methods - HTTP OPTIONS": "This method allows the client of the REST API to determine, which HTTP method ( GET, HEAD, POST, PUT, DELETE ) can be used for a resource identified by requested URI, without initiating a resource request by using any particular HTTP method. Response to this method are not cacheable.",
	"Interaction - Communications - Protocols - REST - Methods - HTTP HEAD": "Simply put, HEAD returns all of the HTTP headers, just like GET, but provides no body content. All of the same rules regarding content caching can be applied, regarding headers in the request/response.",
	"Interaction - Communications - Protocols - REST - Methods - HTTP POST vs HTTP PUT vs HTTP PATCH": "PUT is for creating or conmpletely updating a single resource when you know the URL (e.g. create update object). It is idempotent. POST is to create when you do not know the URL (e.g.adding item to a collection). No idempotent, PATCH is to update part of a resource when you know the URL. Idempotent",
	"Interaction - Communications - Protocols - REST - Caching": "The basic purpose of HTTP caching is to provide a mechanism for applications to scale better and perform faster.",
	"Interaction - Communications - Protocols - REST - Caching - scope": "HTTP caching involves the client, the proxy, and the server. In this post, we will discuss mainly the proxy, which sits between the client and server. Typically, reverse proxies are deployed close to the server, and forward proxies close to the client.",
	"Interaction - Communications - Protocols - REST - Caching - proxy": "A typical proxy caches idempotent requests. HTTP caching is applicable by default only to idempotent requests, only idempotent and nullipotent requests yield the same result when run multiple times. In the HTTP world, this fact means that GET requests can be cached but POST requests cannot.",
	"Interaction - Communications - Protocols - REST - Caching - idempotent calls": "A typical proxy caches idempotent requests. The proxy gets the request, examines it for cache headers, and sends it to the server. Then the proxy examines the response and, if it is cacheable, caches it with the URL as the key (along with some headers in certain cases) and the response as the value.  This scheme works well with GET requests, because for the same URL repeated invocation does not change the response. Intermediaries can make use of this idempotency to safely cache GET requests. But this is not the case with an idempotent POST request. The URL (and headers) cannot be used as the key because the response could be different – the same URL, but with a different body.",
	"Interaction - Communications - Protocols - REST - Caching - no idempotent calls (POST)": "Responses to POST method are not cacheable, UNLESS the response includes appropriate Cache-Control or Expires header fields.",
	"Interaction - Communications - Protocols - REST - Caching - headers": "HTTP response headers: Expires, Cache-Control, ETag, Last-Modified",
	"Interaction - Communications - Protocols - REST - Compression": "HTTP response headers: Accept-Encoding, Content-Encoding",
	"Interaction - Communications - Protocols - REST - Content Negotiation": "HTTP response headers: Content-Type, Accept",
	"Interaction - Communications - Protocols - REST - Versioning": "(1) Using URI: /api/v1/customer/{id}, (2) Using Custom Request Header: Accept-version: v1, (3) Using Accept header: Accept: application/vnd.example.v1+json",
	"Interaction - Communications - Protocols - JAX-RS": "",

	"Service - Publishing": "SECTION",
	"Service - Publishing - Features - Reliability": ".",
	"Service - Publishing - Features - Reliability - Retries": ".",
	"Service - Publishing - Features - Reliability - CircuitBreaker": "A service client should invoke a remote service via a proxy that functions in a similar fashion to an electrical circuit breaker. When the number of consecutive failures crosses a threshold, the circuit breaker trips, and for the duration of a timeout period all attempts to invoke the remote service will fail immediately. After the timeout expires the circuit breaker allows a limited number of test requests to pass through. If those requests succeed the circuit breaker resumes normal operation. Otherwise, if there is a failure the timeout period begins again.",
	"Service - Publishing - Features - Reliability - CircuitBreaker - Product - Hystrix": "",
	"Service - Publishing - Features - Reliability - CircuitBreaker - Product - Istio": "",
	"Service - Publishing - Features - Reliability - CircuitBreaker - Product - Resilience4j": "Resilience4j is a lightweight, easy-to-use library, which offers a powerful circuit breaker implementation inspired by Netflix Hystrix but designed with functional programming approach.",
	"Service - Publishing - Features - Reliability - CircuitBreaker - Product - Sentinel": "It is an open-source library that provides monitoring of services and controls the traffic. It can be used to implement circuit breaking, rate limiting. Sentinel can work in both Java and other languages.",
	"Service - Publishing - Features - Reliability - CircuitBreaker - Product - AmazonAppMesh": "Amazon App Mesh is a managed service mesh that allows you to monitor and control services running on AWS.",
	"Service - Publishing - Features - Reliability - Bulkhead": ".",
	"Service - Publishing - Products - APIGateway": "API gateway is the single entry point for all clients. API Gateway is primarily meant for external client-to-service communication.",
	"Service - Publishing - Products - APIGateway - Location": "An API Gateway acts as a gatekeeper for microservices.",
	"Service - Publishing - Products - APIGateway - Functions - traffic": "traffic manager at Layer 7 of OSI Model. The main purpose of an API gateway is to accept traffic from outside your network and distribute it internally.",
	"Service - Publishing - Products - APIGateway - Functions - traffic - SingleInteractionPoint": "In a microservices ecosystem, the number of services communicating with each other can quickly grow as new features are added, leading to complexity. By serving as the central point of communication, the API Gateway streamlines interactions. Instead of services communicating directly, they interface with the Gateway, which then manages communication with other services.",
	"Service - Publishing - Products - APIGateway - Functions - traffic - RateLimiting": "Rate Limiting & Throttling: Controls how many requests a client can make within a time frame to prevent abuse and overload.",
	"Service - Publishing - Products - APIGateway - Functions - traffic - LoadBalancing": "Load Balancing: Distributes incoming API requests across multiple backend services to ensure availability and performance.",
	"Service - Publishing - Products - APIGateway - Functions - traffic - RequestRouting": "Request Routing: Directs API calls to the appropriate backend services based on rules or conditions.",
	"Service - Publishing - Products - APIGateway - Functions - traffic - RequestRouting - proxy": "Some requests are simply proxied/routed to the appropriate service.",
	"Service - Publishing - Products - APIGateway - Functions - traffic - RequestRouting - broadcast": "Other requests by fanning out to multiple services.",
	"Service - Publishing - Products - APIGateway - Functions - traffic - ResultsAggregation": "The Gateway aggregates results from disparate services, providing a consolidated response to the client, thus improving efficiency.",
	"Service - Publishing - Products - APIGateway - Functions - security": "Security.",
	"Service - Publishing - Products - APIGateway - Functions - security - validation": "Request and Response validation: Validate the microservice requests and responses and ensure they conform to the expected format and structure. This helps prevent errors and ensure the proper functioning of the microservice.",
	"Service - Publishing - Products - APIGateway - Functions - security - DDoSProtection": "Mitigates Distributed Denial of Service (DDoS) attacks by blocking malicious traffic.",
	"Service - Publishing - Products - APIGateway - Functions - security - CircuitBreaker": "Circuit Breaker: Act as a circuit breaker to prevent a single failed microservice from bringing down the entire system.",
	"Service - Publishing - Products - APIGateway - Functions - security - SSL": "SSL/TLS Termination: Encrypts data in transit to ensure secure communication.",
	"Service - Publishing - Products - APIGateway - Functions - security - ErrorHandling": "Error Handling: Provide a consistent way to handle errors and generate error responses to clients even when backend services are unavailable or return unexpected results.",
	"Service - Publishing - Products - APIGateway - Functions - security - CORS": "Cross-Origin Resource Sharing (CORS) Management: Handling requests from other domains.",
	"Service - Publishing - Products - APIGateway - Functions - authentication": "API Gateway centralizes authentication and authorization, managing security protocols centrally and ensuring secure communication between clients and services. Supports OAuth, JWT, API keys, and other authentication methods to secure APIs..",
	"Service - Publishing - Products - APIGateway - Functions - protocol": "Protocol & Format Handling",
	"Service - Publishing - Products - APIGateway - Functions - protocol - ProtocolTranslation": "Protocol Translation: Supports REST, GraphQL, gRPC, WebSockets, and SOAP to accommodate different communication methods.",
	"Service - Publishing - Products - APIGateway - Functions - protocol - FormatHandling": "Request/Response Transformation: Modifies incoming and outgoing requests, such as converting XML to JSON.",
	"Service - Publishing - Products - APIGateway - Functions - audit": "",
	"Service - Publishing - Products - APIGateway - Functions - audit - logging": "Logging & Monitoring: Tracks API usage and performance with logging tools like AWS CloudWatch or Prometheus.",
	"Service - Publishing - Products - APIGateway - Functions - audit - metrics": "Analytics & Metrics: Provides insights into API usage patterns, error rates, and latency for better decision-making.",
	"Service - Publishing - Products - APIGateway - Functions - audit - metering": "API Metering and Billing: Tracking API usage for reporting and billing.",
	"Service - Publishing - Products - APIGateway - Functions - apiLifecycle": "Developer Experience & API Lifecycle Management",
	"Service - Publishing - Products - APIGateway - Functions - apiLifecycle - Versioning": "API Versioning: Allows multiple API versions to coexist, making updates easier.",
	"Service - Publishing - Products - APIGateway - Functions - apiLifecycle - Mock": "Mock Responses & Testing: Enables testing API behavior without backend implementation.",
	"Service - Publishing - Products - APIGateway - Functions - apiLifecycle - Documentation": "API Documentation & Developer Portals: Provides auto-generated documentation and interactive portals for developers.",
	"Service - Publishing - Products - APIGateway - Functions - integration": "Integration & Automation",
	"Service - Publishing - Products - APIGateway - Functions - integration - Transformation": "Request and Response Transformation: Modifying requests and responses for compatibility. It can translate between protocols. For example, if a client sends a request using HTTP/1.1, but the backend service expects requests in gRPC format, the API Gateway can translate the HTTP request into a gRPC request before forwarding it to the backend service. Likewise, when the backend service responds with data in gRPC format, the API Gateway can translate it back into HTTP format before sending it back to the client.",
	"Service - Publishing - Products - APIGateway - Functions - integration - Discovery": "Backend Service Discovery: Dynamically connects with backend services using service registries.",
	"Service - Publishing - Products - APIGateway - Functions - integration - Caching": "Caching: Stores frequent API responses to reduce latency and improve performance.",
	"Service - Publishing - Products - APIGateway - Functions - integration - EDA": "Webhooks & Event-Driven Integration: Supports event-based workflows for real-time API interactions.",
	"Service - Publishing - Products - APIGateway - Tools - AWS API Gateway": ".",
	"Service - Publishing - Products - APIGateway - Tools - Kong API Gateway": ".",
	"Service - Publishing - Products - APIGateway - Tools - NGINX API Gateway": ".",
	"Service - Publishing - Products - APIGateway - Tools - Apigee (Google Cloud)": ".",
	"Service - Publishing - Products - APIGateway - Tools - Azure API Management": ".",
	"Service - Publishing - Products - APIGateway - Tools - WSO2": ".",
	"Service - Publishing - Products - APIGateway - Tools - SpringCloudGateway": ".",
	"Service - Publishing - Comparison - APIGateway vs LoadBalancer vs ReverseProxy": "While load balancers, reverse proxies, and API Gateways share the goal of optimizing and managing web traffic, they serve distinct functions:",
	"Service - Publishing - Comparison - APIGateway vs LoadBalancer vs ReverseProxy - LoadBalancer": "Optimizes resource utilization by distributing traffic among servers. Used to handle heavy traffic and ensure even load distribution.",
	"Service - Publishing - Comparison - APIGateway vs LoadBalancer vs ReverseProxy - ReverseProxy": "Acts as an intermediary between clients and servers, providing security and control. Manages SSL encryption, serves static content, and controls access to internal servers.",
	"Service - Publishing - Comparison - APIGateway vs LoadBalancer vs ReverseProxy - APIGateway": "Manages interactions between clients and backend services in a microservices architecture. Provides functionalities like routing, aggregation, and security in addition to handling requests.",
	"Service - Publishing - Features - Audit - Documentation - Swagger": "",
	"Service - Publishing - Features - Audit - Documentation - Swagger - Codegen": "",
	"Service - Publishing - Features - Audit - Documentation - Swagger - Editor": "",
	"Service - Publishing - Features - Audit - Documentation - Swagger - UI": "",
	"Service - Publishing - Features - Audit - Testing": "Unit Testing, Integration Testing, Contract Testing, End-to-End Testing",
	"Service - Publishing - Features - Audit - Testing - End-to-End Testing": "End-to-End (E2E) testing ascertains that the overall system is accurately working as well as the network infrastructure (load balancers, firewall, and more) is correctly configured. E2E tests, however, need to be run at the finest coarse granularity possible to test the functionality of the entire system. In this, QA engineers verify the behavior of the fully-integrated process and make sure that the system collectively meets its business requirements, regardless of the Service Component Architecture in use. With the help of functional testing, developers can determine if an integrated system or app functions as stated in the requirements.",
	"Service - Publishing - Features - Audit - Testing - Contract Testing": "Contract testing is a sort of a black box that verifies the contract between an external service call and its API provider endpoint. There are two types of contract testing, including: Integration contract testing, Consumer-driven contract testing",
	"Service - Publishing - Features - Audit - Testing - Contract Testing - Integration contract testing": "In integration contract testing, each component needs to be called independently, and it must meet the contract agreement anticipated by a consuming service. The best way to deal with this is to carry out a test against the double. On a side note, it’s critical to run a separate set of tests periodically to confirm that there are no changes against your test doubles. However, a failure in these tests can slow down the deployment pipeline and disrupt the functionality of an IT infrastructure or distributed system. One best possible way to handle intermittent test failures is by updating your test doubles, and probably the code too so as to bring them back into high coherence and consistency with external services.",
	"Service - Publishing - Features - Audit - Testing - Contract Testing - Consumer-driven contract testing": "In consumer-driven contract testing, consumers will delineate the way in which they want to consume a service. The consumer contracts can be made in a mutually consented language and schema between the producer and consumer. The service providers will test a service against the replicas of the individual contracts, and then make changes to that particular service without impacting the nature of other services.",
	"Service - Publishing - Features - Audit - Testing - Integration Testing": "Integration testing takes place in the staging environment to integrate individual services after analyzing the functionality of communication pathways and interactions between them. Unlike monolithic or SOA, microservices architecture depends on the Inter-Process Communication (IPC) mechanism to function appropriately, which is why the interactions between services must be verified. Automated tests need to be written for mapping out the success and error cases through the integration with external services and data stores. Running gateway integration tests will defect interface errors, such as incorrect SSL handling and missing HTTP headers, at the protocol level. And the persistence integration test ensures that each component and protocol client must respond as an external dependency in case of timeouts and partial failures.",
	"Service - Publishing - Features - Audit - Testing - Unit Testing": "The scope of unit testing can be sociable or solitary concerning a service. The smaller the unit will be under test, the easier it is to determine the behavior of modules and probe the collaborators as well as interactions between objects and their dependencies. Since the cyclomatic complexity of the unit is inferior, Quality Analysis (QA) engineers can evaluate whether or not the units are isolated from their collaborators by using this testing strategy. Both the sociable and solitary unit testing styles are frequently used simultaneously in the same codebase to tackle different testing issues. The motive behind testing the domain layer is to emulate DML statements and certify that all collaborators use the real domain objects in correct sequence. During the unit testing, engineers can verify the logic used to generate map responses or other requests from external remote dependencies. As far as resources and service layer are concerned, they validate that each component correctly interacts with its collaborator, thereby monitoring the request/response cycle in a repeatable and consistent manner.",
	"Service - Publishing - Features - Audit - Observability": "Observability (logs, traces, metrics, events): Monitoring + Alerting/visualization + Distributed systems tracing infrastructure + Log aggregation/analytics: Log aggregation - Application metrics - Audit logging - Distributed tracing - Exception tracking - Health check API - Log deployments and changes",
	"Service - Publishing - Features - Audit - Observability - Log aggregation": "Use a centralized logging service that aggregates logs from each service instance. The users can search and analyze the logs. They can configure alerts that are triggered when certain messages appear in the logs.",
	"Service - Publishing - Features - Audit - Observability - Application metrics": "Instrument a service to gather statistics about individual operations. Aggregate metrics in centralized metrics service, which provides reporting and alerting. There are two models for aggregating metrics: push - the service pushes metrics to the metrics service pull - the metrics services pulls metrics from the service",
	"Service - Publishing - Features - Audit - Observability - Audit logging": "Record user activity in a database.",
	"Service - Publishing - Features - Audit - Observability - Distributed tracing": "Instrument services with code that: Assigns each external request a unique external request id. Passes the external request id to all services that are involved in handling the request. Includes the external request id in all log messages. Records information (e.g. start time, end time) about the requests and operations performed when handling a external request in a centralized service. This instrumentation might be part of the functionality provided by a Microservice Chassis framework.",
	"Service - Publishing - Features - Audit - Observability - Exception tracking": "Report all exceptions to a centralized exception tracking service that aggregates and tracks exceptions and notifies developers.",
	"Service - Publishing - Features - Audit - Observability - Health check API": "A service has an health check API endpoint (e.g. HTTP /health) that returns the health of the service. The API endpoint handler performs various checks, such as: the status of the connections to the infrastructure services used by the service instance, the status of the host, e.g. disk space, application specific logic A health check client - a monitoring service, service registry or load balancer - periodically invokes the endpoint to check the health of the service instance.",
	"Service - Publishing - Features - Audit - Observability - Log deployments and changes": "Log every deployment and every change to the (production) environment.",
	"Service - Publishing - Features - Audit - Observability - Tools - Prometheus": "Prometheus is an open-source toolkit for monitoring and alerting based on an embedded times-series database, a query DSL and various mechanics for scraping metrics data off endpoints.",
	"Service - Publishing - Features - Audit - Observability - Tools - Graphana": ".",
	"Service - Publishing - Features - Audit - Observability - Tools - ELKStack": ".",
	"Service - Publishing - Features - Audit - Observability - Tools - Jaeger": ".",
	"Service - Publishing - Features - Audit - Observability - Tools - Zipkin": ".",
	"Service - Publishing - Features - Audit - Observability - Tools - SpringCloudSleuth": "Spring Cloud Sleuth provides Spring Boot auto-configuration for distributed tracing. Spring Cloud Sleuth will not work with Spring Boot 3.x onward. The last major version of Spring Boot that Sleuth will support is 2.x.",

	"Service - Processing": "SECTION",
	"Service - Processing - Patterns": "Build your microservices using a microservice chassis framework, which handles cross-cutting concerns",
	"Service - Processing - Aggregation": "",
	"Service - Processing - Aggregation - MultiServicePerHost": "Run multiple instances of different services on a host (Physical or Virtual machine). There are various ways of deploying a service instance on a shared host including: Deploy each service instance as a JVM process. For example, a Tomcat or Jetty instances per service instance. Deploy multiple service instances in the same JVM. For example, as web applications or OSGI bundles.",
	"Service - Processing - Aggregation - ServicePerHost": "Deploy each single service instance on its own host",
	"Service - Processing - Aggregation - ServicePerVM": "Package the service as a virtual machine image and deploy each service instance as a separate VM",
	"Service - Processing - Aggregation - ServicePerContainer": "Package the service as a (Docker) container image and deploy each service instance as a container",

	"Middleware": "SECTION",
	"Middleware - ServiceMesh": "A service mesh is a configurable infrastructure layer for microservices that makes communication between service instances flexible, reliable, and fast. The mesh provides service discovery, load balancing, encryption, authentication and authorization, support for the circuit breaker pattern, and other capabilities.",
	"Middleware - ServiceMesh - Structure": "This layer is composed of containerized microservices.",
	"Middleware - ServiceMesh - Goal - intercommunication": "A service mesh's primary purpose is to manage internal service-to-service communication.",
	"Middleware - ServiceMesh - Goal - routing": "The main purpose of a service mesh is to route and manage traffic within your network.",
	"Middleware - ServiceMesh - Tools - Istio": "",
	"Middleware - Caching": "",
	"Middleware - Caching - Tools - Redis": "",
	"Middleware - Caching - Tools - Memcache": ""

}