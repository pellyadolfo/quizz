{
	"Java": "SECTION",
	"Java 0": "https://www.linkedin.com/posts/ashish-pratap-singh_java-developer-interview-coding-questions-activity-7322108220930428928-8TeX?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 1": "https://www.linkedin.com/posts/sakshiku945_oops-concepts-in-java-ugcPost-7321927763915862016-Z4w7/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 2": "https://www.linkedin.com/posts/sushjava_java-notes-activity-7319299308581736448-k72e?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 3": "https://www.linkedin.com/posts/arpit-singh-89a4221a8_java-important-interviews-questions-related-activity-7321028788316733440-2RnQ?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 4": "https://www.linkedin.com/posts/i-am-madhuk_java-questions-activity-7314852785139654656-iHri?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 5": "https://www.linkedin.com/posts/alexxubyte_systemdesign-coding-interviewtips-activity-7316849496330522624-WyZy?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 6": "https://www.linkedin.com/posts/satya619_the-mystery-of-the-frozen-workflow-deadlock-activity-7316301675852398594-wH4S?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 7": "https://www.linkedin.com/posts/tauseeffayyaz_softwareengineering-dsa-coding-activity-7311624113716977664-KM6K/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 8": "https://www.linkedin.com/posts/navdeep-singh-3aaa14161_everyone-hates-dynamic-programming-dp-activity-7312111362019577857-fAQd?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 9": "https://www.linkedin.com/posts/sushjava_java-softwaredevelopment-javaevolution-activity-7322381458596081665-uJKy?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 10": "https://www.linkedin.com/posts/abish-dev_master-maven-simplify-builds-with-pom-power-activity-7323618787331559424-3GNs?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 11": "https://www.linkedin.com/posts/shaheen-aziz-9153a7102_cleanarchitecture-softwarearchitecture-softwaredevelopment-activity-7315259693633830913-X11p?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 12": "https://www.linkedin.com/posts/shaik-vazeem_corejavainterviewquestionsanswers-activity-7323363048738500608--bLH?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 13": "https://www.linkedin.com/posts/yogesh-patil-9848871a7_javastreamapi-activity-7326088740358041601-BR-T?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 14": "https://www.linkedin.com/posts/pksingh90_the-most-used-spring-annotations-activity-7314892326785413120--AkG/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 15": "https://www.linkedin.com/posts/sushjava_100-java-programs-activity-7326349857604988929-MBl3?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 16": "https://www.linkedin.com/posts/ashish-pratap-singh_collection-framework-prep-guide-activity-7327178677132099584-v2fh?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 17": "https://www.linkedin.com/posts/sushjava_java-softwaredevelopment-javaevolution-activity-7322381458596081665-uJKy/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 18": "https://www.linkedin.com/posts/hmida-rojbani_java-jspecify-nullsafety-activity-7328733176929923072-9LZH/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 19": "https://www.linkedin.com/posts/maheshma_java-activity-7331129385766264835-xHow?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Java 20": "",
	"Java 21": "",
	"Java 22": "",
	"Java 23": "",
	"Java 24": "",

	"Features": "SECTION",
	"Features - Java1": "",
	"Features - Java2": "",
	"Features - Java3": "",
	"Features - Java4": "",
	"Features - Java5": "",
	"Features - Java6": "",
	"Features - Java7": "",
	"Features - Java8": "",
	"Features - Java9": "",
	"Features - Java9 - Modular": "Modular System – Jigsaw Project Let’s start with the big one – bringing modularity into the Java platform. A modular system provides capabilities similar to OSGi framework’s system. Modules have a concept of dependencies, can export a public API and keep implementation details hidden/private.",
	"Features - Java9 - HTTPClient": "A long-awaited replacement of the old HttpURLConnection. The new API is located under the java.net.http package. It should support both HTTP/2 protocol and WebSocket handshake, with performance that should be comparable with the Apache HttpClient, Netty and Jetty.",
	"Features - Java9 - JShell": "JShell Command Line Tool JShell is read–eval–print loop – REPL for short.",
	"Features - Java9 - JVM - JVMLogging": "This feature introduces a common logging system for all components of the JVM.",
	"Features - Java9 - JVM - AOTJITCompiler": "Introduced.",
	"Features - Java9 - lang - Try-With-Resources": "In Java 7, the try-with-resources syntax requires a fresh variable to be declared for each resource being managed by the statement. In Java 9 there is an additional refinement: if the resource is referenced by a final or effectively final variable, a try-with-resources statement can manage a resource without a new variable being declared:",
	"Features - Java9 - lang - DiamondOperator": "Now we can use diamond operator in conjunction with anonymous inner classes",
	"Features - Java9 - lang - Private": "Interface Private Method Interfaces in the upcoming JVM version can have private methods, which can be used to split lengthy default methods:",
	"Features - Java9 - lang - ProcessAPI": "The process API has been improved for controlling and managing operating-system processes.",
	"Features - Java9 - lang - JCMD": "new subcommands in jcmd command line utility.",
	"Features - Java9 - lang - ImageAPI": "The interface java.awt.image.MultiResolutionImage encapsulates a set of images with different resolutions into a single object. We can retrieve a resolution-specific image variant based on a given DPI metric and set of image transformations or retrieve all of the variants in the image.",
	"Features - Java9 - lang - VariableHandles": "The API resides under java.lang.invoke and consists of VarHandle and MethodHandles. It provides equivalents of java.util.concurrent.atomic and sun.misc.Unsafe operations upon object fields and array elements with similar performance. With Java 9 Modular system access to sun.misc.Unsafe will not be possible from application code.",
	"Features - Java9 - lang - Publish-Subscribe": "The class java.util.concurrent.Flow provides interfaces that support the Reactive Streams publish-subscribe framework. These interfaces support interoperability across a number of asynchronous systems running on JVMs. We can use utility class SubmissionPublisher to create custom components.",
	"Features - Java9 - lang - ImmutableSet": "java.util.Set.of() – creates an immutable set of a given elements. In Java 8 creating a Set of several elements would require several lines of code. Now we can do it as simple as: Set<String> strKeySet = Set.of('key', 'key2', 'key3');",
	"Features - Java9 - lang - OptionalToStream": "java.util.Optional.stream() gives us an easy way to you use the power of Streams on Optional elements:",
	"Features - Java10": "",
	"Features - Java10 - var": "We don’t provide the data type of message. Instead, we mark the message as a var, and the compiler infers the type of message from the type of the initializer present on the right-hand side.",
	"Features - Java10 - RootCertificates": "The cacerts keystore, which was initially empty so far, is intended to contain a set of root certificates that can be used to establish trust in the certificate chains used by various security protocols. As a result, critical security components such as TLS didn’t work by default under OpenJDK builds. With Java 10, Oracle has open-sourced the root certificates in Oracle’s Java SE Root CA program in order to make OpenJDK builds more attractive to developers and to reduce the differences between those builds and Oracle JDK builds.",
	"Features - Java10 - ReleaseVersioning": "Starting with Java 10, Oracle has moved to the time-based release of Java.",
	"Features - Java10 - lang - copyOf(Collection)": "java.util.List, java.util.Map and java.util.Set each got a new static method copyOf(Collection). It returns the unmodifiable copy of the given Collection.",
	"Features - Java10 - lang - toUnmodifiable": "java.util.stream.Collectors get additional methods to collect a Stream into unmodifiable List, Map or Set:",
	"Features - Java10 - lang - Optional.orElseThrow": "java.util.Optional, java.util.OptionalDouble, java.util.OptionalIntand java.util.OptionalLongeach got a new method orElseThrow()which doesn’t take any argument and throws NoSuchElementExceptionif no value is present:",
	"Features - Java10 - lang - ContainerAwareness": "JVMs are now aware of being run in a Docker container and will extract container-specific configuration instead of querying the operating system itself – it applies to data like the number of CPUs and total memory that have been allocated to the container. However, this support is only available for Linux-based platforms. This new support is enabled by default and can be disabled in the command line with the JVM option: -XX:-UseContainerSupport",
	"Features - Java10 - lang - javah": "Tool javah has been removed from Java 10 which generated C headers and source files which were required to implement native methods – now, javac -h can be used instead.",
	"Features - Java10 - lang - policytool": "policytool was the UI based tool for policy file creation and management. This has now been removed. The user can use simple text editor for performing this operation.",
	"Features - Java10 - lang - java -Xprofoption": "Removed java -Xprofoption. The option was used to profile the running program and send profiling data to standard output. The user should now use jmap tool instead.",
	"Features - Java10 - lang - java.security.acl": "Deprecated java.security.acl package has been marked forRemoval=true and is subject to removal in a future version of Java SE. It’s been replaced by java.security.Policy and related classes. Similarly, java.security.{Certificate,Identity,IdentityScope,Signer} APIs are marked forRemoval=true.",
	"Features - Java11": "",
	"Features - Java11 - LocalVariableLambda": "Local Variable Syntax for Lambda Parameters. One of the key features introduced in Java 10 was local variable type inference. It allowed the use of var as the type of the local variable instead of the actual type. The compiler inferred the type based on the value assigned to the variable. Java 11 addresses this by supporting the above syntax. This makes the usage of var uniform in both local variables and lambda parameters. (var s1, var s2) -> s1 + s2",
	"Features - Java11 - HTTPClient": "The new HTTP client from the java.net.http package was introduced in Java 9. It has now become a standard feature in Java 11. The new HTTP API improves overall performance and provides support for both HTTP/1.1 and HTTP/2:",
	"Features - Java11 - autocompilation": "we don’t need to compile the Java source files with javac explicitly anymore: we can directly run the file using the java command: $ java HelloWorld.java",
	"Features - Java11 - FlightRecorder": "Java Flight Recorder (JFR) is now open-source in Open JDK, whereas it used to be a commercial product in Oracle JDK. JFR is a profiling tool that we can use to gather diagnostics and profiling data from a running Java application.",
	"Features - Java11 - lang - Predicate.not()": "The Predicate.not() static method has been added to Java 11 in order to negate an existing Predicate.",
	"Features - Java11 - lang - OpenJDK": "Java 10 was the last free Oracle JDK release that we could use commercially without a license. Starting with Java 11, there’s no free long-term support (LTS) from Oracle. Thankfully, Oracle continues to provide Open JDK releases, which we can download and use without charge.",
	"Features - Java11 - lang - String.isBlank()": "",
	"Features - Java11 - lang - String.lines()": "",
	"Features - Java11 - lang - String.strip()": "",
	"Features - Java11 - lang - String.stripLeading()": "",
	"Features - Java11 - lang - String.stripTrailing()": "",
	"Features - Java11 - lang - String.repeat()": "",
	"Features - Java11 - lang - Files.readString": "",
	"Features - Java11 - lang - Files.writeString": "",
	"Features - Java11 - lang - Collection.toArray": "",
	"Features - Java11 - lang - class.isNestmateOf": "JVM access rules allow access to private members between nestmates; however, in previous Java versions, the reflection API denied the same access. Java 11 fixes this issue and provides means to query the new class file attributes using the reflection API",
	"Features - Java11 - lang - CONSTANT_Dynamic": "Dynamic Class-File Constants Java class-file format is extended to support a new constant-pool form named CONSTANT_Dynamic. Loading the new constant-pool will delegate creation to a bootstrap method, just as linking an invokedynamic call site delegates linkage to a bootstrap method. This feature enhances performance and targets language designers and compiler implementors.",
	"Features - Java11 - lang - Aarch64": "Improved Aarch64 Intrinsics Java 11 optimizes the existing string and array intrinsics on ARM64 or AArch64 processors. Additionally, new intrinsics are implemented for sin, cos, and log methods of java.lang.Math. We use an intrinsic function like any other; however, the intrinsic function gets handled in a special way by the compiler. It leverages CPU architecture-specific assembly code to boost performance.",
	"Features - Java11 - GC - Epsilon": "A new garbage collector called Epsilon is available for use in Java 11 as an experimental feature. It’s called a No-Op (no operations) because it allocates memory but does not actually collect any garbage. Thus, Epsilon is applicable for simulating out of memory errors.",
	"Features - Java11 - GC - ZGC": "Introduced a low latency garbage collector, ZGC, as an experimental feature with low pause times",
	"Features - Java12": "",
	"Features - Java12 - lang - SwitchExpressions": "Switch Expressions (JEP 361). First introduced.",
	"Features - Java12 - lang - String": "String Class New Methods Java 12 comes with two new methods in the String class. The first one – indent adjusts the indentation of each line based on the integer parameter. If the parameter is greater than zero, new spaces will be inserted at the beginning of each line. On the other hand, if the parameter is less than zero, it removes spaces from the begging of each line. If a given line does not contain sufficient white space, then all leading white space characters are removed.",
	"Features - Java12 - lang - File::mismatch": "File::mismatch Method Java 12 introduced a new mismatch method in the nio.file.Files utility class",
	"Features - Java12 - lang - TeeingCollector": "Teeing Collector A new teeing collector was introduced in Java 12 as an addition to the Collectors class",
	"Features - Java12 - lang - CompactNumberFormatting": "Compact Number Formatting Java 12 comes with a new number formatter – the CompactNumberFormat. It’s designed to represent a number in a shorter form, based on the patterns provided by a given locale.",
	"Features - Java12 - lang - Switch": "Switch Expressions (Preview) The most popular feature introduced in Java 12 is the Switch Expressions. As a demonstration, let’s compare the old and new switch statements. We’ll use them to distinguish working days from weekend days based on the DayOfWeek enum from the LocalDate instance.",
	"Features - Java12 - lang - instanceof": "Pattern Matching for instanceof (Preview) Another preview feature introduced in Java 12 is pattern matching for instanceof. In previous Java versions, when using, for example, if statements together with instanceof, we would have to explicitly typecast the object to access its features:",
	"Features - Java12 - lang - Microbenchmark": "Microbenchmark Suite Java 12 introduces a suite of around 100 microbenchmark tests to the JDK source code. These tests will allow for continuous performance testing on a JVM and will become useful for every developer wishing to work on the JVM itself or create a new microbenchmark.",
	"Features - Java12 - GC - Shenandoah": "Shenandoah: A Low-Pause-Time Garbage Collector Shenandoah is an experimental garbage collection (GC) algorithm, for now not included in the default Java 12 builds. It reduces the GC pause times by doing evacuation work simultaneously with the running Java threads. This means that with Shenandoah, pause times are not dependent on the heap’s size and should be consistent. Garbage collecting a 200 GB heap or a 2 GB heap should have a similar low pause behavior. Shenandoah will become part of mainline JDK builds since version 15.",
	"Features - Java12 - GC - CDS": "Default CDS Archives The Class Data Sharing (CDS) feature helps reduce the startup time and memory footprint between multiple Java Virtual Machines. It uses a built-time generated default class list that contains the selected core library classes.",
	"Features - Java13": "",
	"Features - Java13 - lang - SwitchExpressions": "adding a new yield statement",
	"Features - Java13 - lang - TextBlocks": "Text Blocks (JEP 355) The second preview feature is text blocks for multi-line Strings such as embedded JSON, XML, HTML, etc. Earlier, to embed JSON in our code, we would declare it as a String literal:",
	"Features - Java13 - lang - LegacySocketAPI": "Reimplement the Legacy Socket API (JEP 353) We have seen Socket (java.net.Socket and java.net.ServerSocket) APIs as an integral part of Java since its onset. However, they were never modernized in the last twenty years. Written in legacy Java and C, they were cumbersome and difficult to maintain.",
	"Features - Java13 - GC - CDS": "Dynamic CDS Archives (JEP 350) Class data sharing (CDS) has been a prominent feature of Java HotSpot VM for a while now. It allows class metadata to be shared across different JVMs to reduce startup time and memory footprint. JDK 10 extended this ability by adding application CDS (AppCDS) – to give developers the power to include application classes in the shared archive. JDK 12 further enhanced this feature to include CDS archives by default.",
	"Features - Java13 - GC - ZGC": "ZGC: Uncommit Unused Memory (JEP 351) The Z Garbage Collector was introduced in Java 11 as a low-latency garbage collection mechanism, such that GC pause times never exceeded 10 ms. However, unlike other HotSpot VM GCs such as G1 and Shenandoah, it was not equipped to return unused heap memory to the operating system. Java 13 added this capability to the ZGC. We now get a reduced memory footprint along with performance improvement.",
	"Features - Java14": "",
	"Features - Java14 - Records": "Records (JEP 359) Records were introduced to reduce repetitive boilerplate code in data model POJOs.",
	"Features - Java14 - NullPointerExceptions": "Helpful NullPointerExceptions (JEP 358) adding the capability to point out what exactly was null in a given line of code.",
	"Features - Java14 - lang - SwitchExpressions": "have been standardized so that they are part and parcel of the development kit.",
	"Features - Java14 - lang - TextBlocks": "Text Blocks (JEP 368) Text blocks continue their journey to getting a mainstream upgrade and are still available as preview features. In addition to the capabilities from JDK 13 to make multiline strings easier to use, in their second preview, text blocks now have two new escape sequences:",
	"Features - Java14 - lang - instanceof": "Pattern Matching for instanceof (JEP 305)  JDK 14 has introduced pattern matching for instanceof with the aim of eliminating boilerplate code and make the developer’s life a little bit easy.",
	"Features - Java14 - lang - ForeignMemoryAccessAPI": "Foreign Memory Access API (JEP 370). Introduced.",
	"Features - Java14 - lang - PackagingTool": "Packaging Tool (JEP 343) Traditionally, to deliver Java code, an application developer would simply send out a JAR file that the user was supposed to run inside their own JVM. However, users rather expected an installer that they’d double click to install the package on their native platforms, such as Windows or macOS. This JEP aims to do precisely that. Developers can use jlink to condense the JDK down to the minimum required modules, and then use this packaging tool to create a lightweight image that can be installed as an exe on Windows or a dmg on a macOS.",
	"Features - Java14 - lang - EventStreaming": "JFR Event Streaming (JEP 349) With this enhancement, JDK’s flight recorder data is now exposed so that it can be continuously monitored. This involves modifications to the package jdk.jfr.consumer so that users can now read or stream the recording data directly.",
	"Features - Java14 - GC - G1": "NUMA-Aware Memory Allocation for G1 (JEP 345) Non-uniform memory access (NUMA) was not implemented so far for the G1 garbage collector, unlike the Parallel collector. Looking at the performance improvement that it offers to run a single JVM across multiple sockets, this JEP was introduced to make the G1 collector NUMA-aware as well. At this point, there’s no plan to replicate the same to other HotSpot collectors.",
	"Features - Java14 - GC - ZGC": "ZGC on Windows (JEP 365) and macOS (JEP 364) – Experimental The Z Garbage Collector, a scalable, low-latency garbage collector, was first introduced in Java 11 as an experimental feature. But initially, the only supported platform was Linux/x64. After receiving positive feedback on ZGC for Linux, Java 14 has ported its support to Windows and macOS as well. Though still an experimental feature, it’s all set to become production-ready in the next JDK release.",
	"Features - Java14 - GC - CMS": "Concurrent Mark Sweep (CMS) Garbage Collector (JEP 363) – deprecated by Java 9, this GC has been succeeded by G1 as the default GC. Also, there are other more performant alternatives to use now, such as ZGC and Shenandoah, hence the removal",
	"Features - Java15": "",
	"Features - Java15 - Records": "Java 15 aims to refine.",
	"Features - Java15 - SealedClasses": "Sealed Classes (JEP 360). Part of Project Amber. Introduced.",
	"Features - Java15 - HiddenClasses": "Hidden Classes (JEP 371) A new feature being introduced in Java 15 is known as hidden classes. While most developers won’t find a direct benefit from them, anyone who works with dynamic bytecode or JVM languages will likely find them useful. The goal of hidden classes is to allow the runtime creation of classes that are not discoverable. This means they cannot be linked by other classes, nor can they be discovered via reflection. Classes such as these typically have a short lifecycle, and thus, hidden classes are designed to be efficient with both loading and unloading. Note that current versions of Java do allow for the creation of anonymous classes similar to hidden classes. However, they rely on the Unsafe API. Hidden classes have no such dependency.",
	"Features - Java15 - lang - PatternMatching": "Pattern Matching Type Checks (JEP 375) The pattern matching feature was previewed in Java 14, and Java 15 aims to continue its preview status with no new enhancements. As a review, the goal of this feature is to remove a lot of boilerplate code that typically comes with the instanceof operator",
	"Features - Java15 - lang - ForeignMemoryAccessAPI": "Incubation.",
	"Features - Java15 - GC - ZGC": "In Java 15, ZGC (JEP 377) will be no longer be experimental.",
	"Features - Java15 - GC - Shenandoah": "In Java 15, Shenandoah (JEP 379) will be no longer be experimental.",
	"Features - Java16": "",
	"Features - Java16 - Records": "incremental changes.",
	"Features - Java16 - SealedClasses": "Sealed Classes (JEP-397). ",
	"Features - Java16 - Proxy": "Invoke Default Methods From Proxy Instances (JDK-8159746) As an enhancement to the default method in Interfaces, with the release of Java 16, support has been added to java.lang.reflect.InvocationHandler invoke default methods of an interface via a dynamic proxy using reflection.",
	"Features - Java16 - lang - DayPeriod": "Day Period Support (JDK-8247781) A new addition to the DateTimeFormatter is the period-of-day symbol “B“, which provides an alternative to the am/pm format:",
	"Features - Java16 - lang - Stream.toList": "Add Stream.toList Method (JDK-8180352) The aim is to reduce the boilerplate with some commonly used Stream collectors, such as Collectors.toList and Collectors.toSet:",
	"Features - Java16 - lang - VectorAPI": "Vector API Incubator (JEP-338) The Vector API is in its initial incubation phase for Java 16. The idea of this API is to provide a means of vector computations that will ultimately be able to perform more optimally (on supporting CPU architectures) than the traditional scalar method of computations.",
	"Features - Java16 - lang - instanceof": "Pattern Matching for instanceof (JEP-394) Pattern matching for the instanceof keyword has been added as of Java 16.",
	"Features - Java17": "",
	"Features - Java17 - SealedClasses": "Sealed Classes (JEP 409) Sealed classes are part of Project Amber, and this JEP officially introduces a new feature to the language, although it was available in preview mode in the JDK versions 15 and 16. The feature restricts which other classes or interfaces may extend or implement a sealed component. Showing another improvement related to pattern matching combined with the JEP 406 will allow a more sophisticated and cleaner inspection of the type, cast and act code pattern.",
	"Features - Java17 - VectorAPI": "Vector API (Second Incubator) (JEP 414).",
	"Features - Java17 - JVM - AOTJITCompiler": "Remove.",
	"Features - Java17 - lang - StrictFP": "Restore Always-Strict Floating-Point Semantics (JEP 306) This JEP is mainly for scientific applications, and it makes floating-point operations consistently strict. The default floating-point operations are strict or strictfp, both of which guarantee the same results from the floating-point calculations on every platform. Before Java 1.2, strictfp behavior was the default one as well. However, because of hardware issues, the architects changed, and the keyword strictfp was necessary to re-enable such behavior. So, there is no need to use this keyword anymore. ",
	"Features - Java17 - lang - Random": "Enhanced Pseudo-Random Number Generators (JEP 356) Also related to more special use cases, JEP 356 provides new interfaces and implementations for Pseudo-Random Number Generators (PRNG). So, it’s easier to use different algorithms interchangeably, and it also offers better support for stream-based programming:",
	"Features - Java17 - lang - SwitchPatternMatching (JEP-441)": "Pattern Matching for Switch (Preview) (JEP 406).",
	"Features - Java17 - lang - macOSRendering": "New macOS Rendering Pipeline (JEP 382) This JEP implements a Java 2D internal rendering pipeline for macOS since Apple deprecated the OpenGL API (in macOS 10.14), used internally in Swing GUI. The new implementation uses the Apple Metal API, and apart from the internal engine, there were no changes to the existing APIs.",
	"Features - Java17 - lang - macOSAArch64Port": "macOS/AArch64 Port (JEP 391) Apple announced a long-term plan to transition its computer line from X64 to AArch64. This JEP ports the JDK to run on AArch64 in macOS platforms.",
	"Features - Java17 - lang - illegal": "Strongly Encapsulate JDK Internals (JEP 403) JEP 403 represents one more step toward strongly encapsulating JDK internals since it removes the flag –illegal-access. The platform will ignore the flag, and if the flag is present, the console will issue a message informing the discontinuation of the flag. This feature will prevent JDK users from accessing internal APIs, except for critical ones like sun.misc.Unsafe.",
	"Features - Java17 - lang - RMIActivation": "Remove RMI Activation (JEP 407).",
	"Features - Java17 - lang - ForeignFunctionMemoryAPI": "The Foreign Function and Memory API allow Java developers to access code from outside the JVM and manage memory out of the heap. The goal is to replace the JNI API and improve the security and performance compared to the old one. This API is another feature developed by Project Panama, and it has been evolved and predeceased by JEPs 393, 389, 383 and 370.",
	"Features - Java17 - lang - DeserializationFilters": "Context-Specific Deserialization Filters (JEP 415) JEP 290, first introduced in JDK 9, enabled us to validate incoming serialized data from untrusted sources, a common source of many security issues. That validation happens at the JVM level, giving more security and robustness. With JEP 415, applications can configure context-specific and dynamically selected deserialization filters defined at the JVM level. Each deserialization operation will invoke such filters.",
	"Features - Java18": "",
	"Features - Java18 - lang - SwitchPatternMatching (JEP-441)": "refined.",
	"Features - Java19": "",
	"Features - Java19 - VirtualThreads (JEP 444)": "Virtual Threads Introduced. Project Loom.",
	"Features - Java19 - RecordPatterns (JEP 440)": "Record Patterns Introduced",
	"Features - Java19 - lang - SwitchPatternMatching (JEP-441)": "refined.",
	"Features - Java20": "",
	"Features - Java20 - VirtualThreads (JEP 444)": "Refined.",
	"Features - Java20 - RecordPatterns (JEP 440)": "Refined.",
	"Features - Java20 - ScopedValues": "ScopedValues (JEP 429). Incubating. Similar to ThreadLocal.",
	"Features - Java20 - lang - SwitchPatternMatching (JEP-441)": "refined.",
	"Features - Java21": "",
	"Features - Java21 - VirtualThreads (JEP 444)": "Java 21 introduced some new changes.",
	"Features - Java21 - RecordPatterns (JEP 440)": "Refined.",
	"Features - Java21 - ScopedValues": "Introduced.",
	"Features - Java21 - EncapsulationAPI": "Key Encapsulation Mechanism API (JEP 452). Introduced. A new KEM API to enable applications to use KEM algorithms.",
	"Features - Java21 - lang - SwitchPatternMatching (JEP-441)": "improved.",
	"Features - Java21 - lang - StringLiteral": "String Literal (JEP 430) Java offers several mechanisms for composing strings with string literals and expressions. Some of these are String concatenation, StringBuilder class, String class format() method, and the MessageFormat class. Java 21 introduces string templates. These complement Java’s existing string literals and text blocks by coupling literal text with template expressions and template processors to produce the desired results.",
	"Features - Java21 - lang - SequencedCollections": "Sequenced Collections (JEP 431) Java 21 introduced three new interfaces to represent sequenced collections, sequenced sets, and sequenced maps.",
	"Features - Java22": "",
	"Features - Java22 - UnnamedVariablesAndPatterns (JEP 456)": "",
	"Features - Java22 - StatementsBeforeSuper (JEP 447)": "",
	"Features - Java22 - StringTemplates (JEP 459)": "",
	"Features - Java22 - ImplicitClassAndMain (JEP 463)": "Java finally supports writing a program without defining an explicit class or a main method with its standard template.",
	"Features - Java22 - ForeignFunctionandMemoryAPI (JEP 454)": "This API allows developers to invoke foreign functions, i.e., functions outside the JVM ecosystem, and access memory that is foreign to the JVM.",
	"Features - Java22 - ClassFileAPI (JEP 457)": "The Class File API standardizes the process of reading, parsing, and transforming Java .class files.",
	"Features - Java22 - StreamGatherers (JEP 461)": "Custom intermediate operations in the Streams API with Stream::gather(Gatherer).",
	"Features - Java22 - StructuredConcurrency (JEP 462)": "A pattern of coding style that aims to reduce the common pitfalls and drawbacks of concurrent programming.",
	"Features - Java22 - ScopedValues (JEP 464)": "Scoped values enable storing and sharing immutable data within and across threads. Scoped values introduce a new type, ScopedValue<>. We write the values once, and they remain immutable throughout their lifecycle.",
	"Features - Java22 - VectorAPI (JEP 460)": "",
	"Features - Java22 - MultiFileSourcePrograms (JEP 458)": "Java 11 introduced executing a single Java file without explicitly compiling it using the javac command. This was very efficient and quick. The downside is that when there are dependent Java source files, we cannot its advantage. Starting with Java 22, we can finally run multi-file Java programs",
	"Features - Java22 - RegionPinningG1 (JEP 423)": "With Java 22, the G1 Garbage Collector finally supports region pinning. This removes the need for Java threads to pause the G1 GC while using JNI.",
	"Features - Java23": "",
	"Features - Java23 - ScopedValues (JEP 441)": "Scoped Values introduce a new way to manage variable scope, allowing developers to define variables with a limited lifetime.",
	"Features - Java23 - StructuredConcurrency (JEP 428)": "Structured Concurrency simplifies concurrent programming by introducing a high-level API for writing concurrent code.",
	"Features - Java23 - FlexibleConstructorBodies (JEP 409)": "Flexible Constructor Bodies enhance the constructor syntax, enabling developers to write more expressive and concise code. This feature allows for improved code organization and reusability.",
	"Features - Java23 - ImplicitClassAndMain (JEP 405)": "Implicitly Declared Classes and Instance Methods streamline record and data class definitions, reducing boilerplate code. This feature simplifies the creation of classes and methods.",
	"Features - Java23 - ModuleImportDeclarations (JEP 440)": "Module Import Declarations improve module dependency management, making it easier to declare and manage module dependencies.",
	"Features - Java23 - MarkdownDocumentationComments (JEP 415)": "Markdown Documentation Comments enhance Javadoc functionality, allowing developers to write documentation comments using Markdown syntax.",
	"Features - Java23 - DefaultZGCCollector (JEP 436)": "The ZGC (Z Garbage Collector) becomes the default garbage collector in Java 23, providing improved performance and responsiveness.",
	"Features - Java23 - VectorAPI (JEP 426)": "The Vector API introduces a new way to perform vector operations, enabling developers to write optimized, hardware-accelerated code.",
	"Features - Java23 - StreamGatherers (JEP 424)": "Stream Gatherers enhance the Stream API, providing more efficient and flexible ways to collect and process data.",
	"Features - Java23 - ClassFileAPI (JEP 416)": "The Class-File API provides a programmatic interface for reading, writing, and manipulating class files.",
	"Features - Java23 - PrimitiveTypes (JEP 438)": "This feature extends pattern matching to support primitive types, enabling more expressive and concise code.",
	"Features - Java23 - JMS9.0 (JEP 438)": "JMS 9.0 updates the Java Management Service, providing improved monitoring, management, and troubleshooting capabilities.",
	"Features - Java24": "",
	"Features - Java24 - GenerationalShenandoah (JEP 404)": "",
	"Features - Java24 - CompactObjectHeaders (JEP 450)": "",
	"Features - Java24 - RestrictJNI (JEP 472)": "",
	"Features - Java24 - LateBarrierExpansionG1 (JEP 475)": "",
	"Features - Java24 - KeyDerivationFunctionAPI (JEP 478)": "",
	"Features - Java24 - Removex86Port (JEP 479)": "",
	"Features - Java24 - AoTClassLoading&Linking (JEP 483)": "",
	"Features - Java24 - ClassFileAPI (JEP 484)": "",
	"Features - Java24 - StreamGatherers (JEP 485)": "",
	"Features - Java24 - DisableSecurityManager (JEP 486)": "",
	"Features - Java24 - ScopedValues (JEP 487)": "",
	"Features - Java24 - ModuleImportDeclarations (JEP 494)": "",
	"Features - Java24 - StructuredConcurrency (JEP 499)": "",
	"Features - Java24 - ZGCRemoveNonGenerationalMode (JEP 490)": "",
	"Features - Java24 - FlexibleConstructorBodies (JEP 492)": "",
	"Features - Java24 - PrimitiveTypes (JEP 488)": "",
	"Features - Java24 - VectorAPI (JEP 489)": "",
	"Features - Java24 - SynchronizeVirtualThreads (JEP 491)": "",
	"Features - Java24 - LinkingRunTimeImages (JEP 493)": "",
	"Features - Java24 - QuantumResistantCryptography (JEP 497)": "",

	"OOP": "SECTION",
	"OOP - Encapsulation": "Encapsulation is a way to restrict the direct access to some components of an object, so users cannot access state values for all of the variables of a particular object. Encapsulation can be used to hide both data members and data functions or methods associated with an instantiated class or object.",
	"OOP - Inheritance": "",
	"OOP - Polymorphism": "",
	"OOP - Abstraction": "",

	"Types": "SECTION",
	"Types - Literals": "",
	"Types - Literals - Integer": "",
	"Types - Literals - FloatingPoint": "",
	"Types - Literals - Boolean": "",
	"Types - Literals - Character": "",
	"Types - Literals - String": "",
	"Types - Literals - Text": "",
	"Types - Literals - Escape": "",
	"Types - Literals - Null": "",
	"Types - Primitives": "",
	"Types - Primitives - Integral": "",
	"Types - Primitives - Integer": "",
	"Types - Primitives - FloatingPoint": "",
	"Types - Primitives - boolean": "",
	"Types - Interfaces": "",
	"Types - Interfaces - Functional": "Annonymous Inner Class -> Callback Hell -> Functional Interfaces + Default Methods -> Lambda Expressions -> Method References",
	"Types - Interfaces - Functional - Functional Interfaces": "A functional interface is an interface that contains only one abstract method.",
	"Types - Interfaces - Functional - Functional Interfaces - annotation": "@FunctionalInterface",
	"Types - Interfaces - Functional - Functional Interfaces - types by function": "Suppliers, Consumers, Predicates, Operators.",
	"Types - Interfaces - Functional - Functional Interfaces - Default Methods": "So it’d be really frustrating if we had lambdas in Java 8 but couldn’t use those with the standard collections library since backwards compatibility can’t be sacrificed. Due to the problem described above a new concept was introduced",
	"Types - Interfaces - Functional - Functional Interfaces - Default Methods ": "Virtual extension methods or defender methods.",
	"Types - Interfaces - Functional - Functional Interfaces - Default Methods - public (Java 8)": "implicit",
	"Types - Interfaces - Functional - Functional Interfaces - Default Methods - static (Java 8)": "allowed",
	"Types - Interfaces - Functional - Functional Interfaces - Default Methods - private (Java 9)": "allowed",
	"Types - Interfaces - Functional - Functional Interfaces - Default Methods - final": "forbidden",
	"Types - Interfaces - Functional - Functional Interfaces - Default Methods - synchronize": "forbidden",
	"Types - Interfaces - Functional - Method Reference": "A method reference to a static method. A method reference to an instance method of an object of a particular type. A method reference to an instance method of an existing object. A method reference to a constructor.",
	"Types - Interfaces - Functional - Method Reference - static method": "s -> Integer.parseInt(s) vs Integer::parseInt",
	"Types - Interfaces - Functional - Method Reference - instance method of an object of a particular type": "(String s) -> s.toUpperCase() vs String::toUpperCase",
	"Types - Interfaces - Functional - Method Reference - instance method of an existing object": "() -> books.size() vs books::size",
	"Types - Interfaces - Functional - Method Reference - constructor": "() -> new Foo() vs Foo::new",
	"Types - Classes - NestedClasses": "A nested class is a member of its enclosing class.",
	"Types - Classes - NestedClasses - StaticNestedClasses": "Nested classes that are declared static are called static nested classes.",
	"Types - Classes - NestedClasses - InnerClasses": "Non-static nested classes are called inner classes. Non-static nested classes (inner classes) have access to other members of the enclosing class, even if they are declared private.",
	"Types - Classes - LocalClasses": "Local classes are classes that are defined in a block, which is a group of zero or more statements between balanced braces. You typically find local classes defined in the body of a method.",
	"Types - Classes - AnonymousClasses": "They enable you to declare and instantiate a class at the same time. They are like local classes except that they do not have a name.",
	"Types - Generics": "",
	"Types - Generics - Class": "",
	"Types - Generics - Interface": "",
	"Types - Generics - Method": "",
	"Types - Generics - Bounded": "<T extends Comparable<T>>",
	"Types - Generics - Wildcards": "In generic code, the question mark (?), called the wildcard, represents an unknown type. The wildcard can be used in a variety of situations: as the type of a parameter, field, or local variable; sometimes as a return type (though it is better programming practice to be more specific). The wildcard is never used as a type argument for a generic method invocation, a generic class instance creation, or a supertype.",
	"Types - Generics - Wildcards - UpperBounded": "To declare an upper-bounded wildcard, use the wildcard character ('?'), followed by the extends keyword, followed by its upper bound. Note that, in this context, extends is used in a general sense to mean either 'extends' (as in classes) or 'implements' (as in interfaces).",
	"Types - Generics - Wildcards - UnBounded": "The unbounded wildcard type is specified using the wildcard character (?), for example, List<?>. This is called a list of unknown type.",
	"Types - Generics - Wildcards - LowerBounded": "A lower bounded wildcard is expressed using the wildcard character ('?'), following by the super keyword, followed by its lower bound: <? super A>.",
	"Types - Generics - Diamond Operator - Generic Instantiation (Java 7)": "Java 7 introduced the diamond operator ( <> ) in generic class instantiation contexts. List<String> list2 = new ArrayList<>(),",
	"Types - Generics - Diamond Operator - Generic Instantiation )Java 9)": "Java 9 enhanced the type inference algorithm to tell whether the inferred type is denotable when analyzing an anonymous class that supports the diamond operator. Iterator <String> iter = new Iterator <> () { }",
	"Types - Checking - Speculative Attribution (Java 8)": "In Java 8, the implementation of type-checking at compiler level was based on Speculative Attribution. In Speculative Attribution, the same tree can be type-checked against multiple targets at runtime. This is particularly used in target typing for lambda expressions, resolving diamond expressions for generics, etc.",
	"Types - Checking - Tiered Attribution (Java 9)": "As we saw in the previous example, there may be instances in which the compiler will have to perform type checking for multiple target types. This is a very important capability but can result in performance issues because of redundant steps done in the process. A JDK Enhancement Proposal (JEP 215) was proposed for type checking of poly expressions. The newly proposed way is known as Tiered Attribution. It focuses on improving performance by implementing a different way of type-checking that reduces redundant steps but gives the same results as current type-checking implementation.",
	"Types - Inference - Java 10": "In Java 10, this is how we could declare a local variable: var message = 'Hello, Java 10', We don’t provide the data type of message. Instead, we mark the message as a var, and the compiler infers the type of message from the type of the initializer present on the right-hand side.",
	"Types - Inference - keyword": "Another thing to note is that var is not a keyword – this ensures backward compatibility for programs using var say, as a function or variable name. var is a reserved type name, just like int.",
	"Types - Inference - overhead": "there is no runtime overhead in using var nor does it make Java a dynamically typed language. The type of the variable is still inferred at compile time and cannot be changed later.",
	"Types - Inference - object": "the inferred type of obj isn’t Object. var obj = new Object() {},",
	"Types - Inference - wrong - initializer": "var won’t work without the initializer: var n, // error:",
	"Types - Inference - wrong - null": "Nor would it work if initialized with null: var emptyList = null,",
	"Types - Inference - wrong - local": "Note that this feature is available only for local variables with the initializer. It cannot be used for member variables, method parameters, return types, etc. public var = 'hello', // error:",
	"Types - Inference - wrong - lambda": "Lambda expression needs explicit target type, and hence var cannot be used: var p = (String s) -> s.length() > 10, // error:",
	"Types - Inference - wrong - array": "Array needs explicit target type, and hence var cannot be used: var arr = { 1, 2, 3 }, // error",

	"Logic": "SECTION",
	"Logic - IOStreams - ByteStreams": "",
	"Logic - IOStreams - ByteStreams - FileInputStream": "",
	"Logic - IOStreams - ByteStreams - FileOutputStream": "",
	"Logic - IOStreams - CharacterStreams": "",
	"Logic - IOStreams - CharacterStreams - InputStreamReader": "",
	"Logic - IOStreams - CharacterStreams - OutputStreamWriter": "",
	"Logic - IOStreams - CharacterStreams - FileReader": "",
	"Logic - IOStreams - CharacterStreams - FileWriter": "",
	"Logic - IOStreams - CharacterStreams - BufferedInputStream": "",
	"Logic - IOStreams - CharacterStreams - BufferedOutputStream": "",
	"Logic - IOStreams - Scanner": "",
	"Logic - IOStreams - BufferedStreams - BufferedReader": "",
	"Logic - IOStreams - BufferedStreams - BufferedWriter": "",
	"Logic - IOStreams - DataStreams - DataInputStream": "",
	"Logic - IOStreams - DataStreams - DataOutputStream": "",
	"Logic - IOStreams - ObjectStreams - ObjectInputStream": "",
	"Logic - IOStreams - ObjectStreams - ObjectOutputStream": "",
	"Logic - IOStreams - ": "",
	"Logic - IOStreams - PrintStream": "",
	"Logic - IOStreams - PrintWriter": "",
	"Logic - Reflection": "",
	"Logic - Reflection - MethodHandle (Java 7)": "A method handle is a typed, directly executable reference to an underlying method, constructor, field, or similar low-level operation, with optional transformations of arguments or return values.",
	"Logic - Reflection - MethodHandle vs Reflection": "From a performance standpoint, the MethodHandles API can be much faster than the Reflection API since the access checks are made at creation time rather than at execution time.",
	"Logic - Reflection - VarHandle (Java 9)": "Generally, a variable handle is just a typed reference to a variable. The variable can be an array element, instance or static field of the class. The VarHandle class provides write and read access to variables under specific conditions. VarHandles are immutable and have no visible state. What’s more, they cannot be sub-classed.",
	"Logic - Reflection - VarHandle - goal": "The goal of VarHandle is to define a standard for invoking equivalents of java.util.concurrent.atomic and sun.misc.Unsafe operations on fields and array elements. Those operations are in majority atomic or ordered operations. For example, atomic field incrementation.",
	"Logic - Throwable": "",
	"Logic - Throwable - Exceptions": "An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions.",
	"Logic - Throwable - Exceptions - CheckedExceptions": "These types of exceptions need to be handled during the compile time of the program. These exceptions can be handled by the try-catch block or by using throws keyword otherwise the program will give a compilation error.",
	"Logic - Throwable - Exceptions - CheckedExceptions - Exception": "Checked exceptions are the subclass of the Exception class. These types of exceptions need to be handled during the compile time of the program. These exceptions can be handled by the try-catch block or by using throws keyword otherwise the program will give a compilation error.",
	"Logic - Throwable - Exceptions - CheckedExceptions - Handling": "",
	"Logic - Throwable - Exceptions - CheckedExceptions - Handling - Try": "",
	"Logic - Throwable - Exceptions - CheckedExceptions - Handling - Try - try-with-resources (Java 7)": "Java 7 introduced the try-with-resources statement, where resources will be closed automatically after the execution. It requires an additional variable for the resources to be assigned. But Java 9 manages the same with the final or effectively final variables. The effectively final variable is the variable or the parameter whose values will never be changed once it is initialized.",
	"Logic - Throwable - Exceptions - CheckedExceptions - Handling - Try - try-with-resources - requires additional variable (Java 7)": "InputStream inputStream = new FileInputStream('test.txt'), try (InputStream stream = inputStream) {} catch (IOException e) {}",
	"Logic - Throwable - Exceptions - CheckedExceptions - Handling - Try - try-with-resources - no requires additional variable (Java 9)": "InputStream inputStream = new FileInputStream('test.txt'), try (inputStream) {} catch (IOException e) {}",
	"Logic - Throwable - Exceptions - UncheckedExceptions": "Unchecked exceptions are checked at run time.",
	"Logic - Throwable - Exceptions - UncheckedExceptions - RuntimeException": "Derived from RuntimeException",
	"Logic - Throwable - Exceptions - UncheckedExceptions - Handling": "No handling is required",
	"Logic - Throwable - Errors": "Errors are not subject to the Catch or Specify Requirement. Errors are those exceptions indicated by Error and its subclasses.",

	"CICD - Execution": "SECTION",
	"CICD - Execution - ClassLoaders": "",
	"CICD - Execution - ClassLoaders - ClassLoader": "",
	"CICD - Execution - ClassLoaders - ClassLoader - loadClass": "",
	"CICD - Execution - ClassLoaders - ClassLoader - defineClass": "",
	"CICD - Execution - ClassLoaders - ClassLoader - findClass": "",
	"CICD - Execution - ClassLoaders - ClassLoader - getParent": "",
	"CICD - Execution - ClassLoaders - ClassLoader - getResource": "",
	"CICD - Execution - ClassLoaders - Types - BootstrapClassLoader": "Bootstrap class loader – The virtual machine’s built-in class loader, is represented as null. A bootstrap or primordial class loader is the parent of all the others; however, it doesn’t have a parent.",
	"CICD - Execution - ClassLoaders - Types - PlatformClassLoader": "Platform class loader – Loads the platform classes, which include the Java SE platform APIs, their implementation classes, and JDK-specific run-time classes. The platform class loader is the parent of the system class loader. The platform class loader is a child of the bootstrap class loader",
	"CICD - Execution - ClassLoaders - Types - SystemClassLoader": "System class loader – Also known as application class loader, loads classes on the application class path, module path, and JDK-specific tools. It’s also a child of the platform class loader.",
	"CICD - Execution - ClassLoaders - Types - ContextClassLoader": "The java.lang.Thread class has a method, getContextClassLoader(), that returns the ContextClassLoader for the particular thread. The ContextClassLoader is provided by the creator of the thread when loading resources and classes. As of Java SE 9, threads in the fork/join common pool always return the system class loader as their thread context class loader.",
	"CICD - Execution - ClassLoaders - DelegationMode": "Class loaders follow the delegation model, where on being requested to find a class or resource, a ClassLoader instance will delegate the search of the class or resource to the parent class loader.",
	"CICD - Execution - ClassLoaders - DelegationMode - UniqueClasses": "As a consequence of the delegation model, it’s easy to ensure unique classes, as we always try to delegate upwards. If the parent class loader isn’t able to find the class, only then will the current instance attempt to do so itself.",
	"CICD - Execution - ClassLoaders - Visibility": "In addition, child class loaders are visible to classes loaded by their parent class loaders. For instance, classes loaded by the system class loader have visibility into classes loaded by the platform and bootstrap class loaders, but not vice-versa.",
	"CICD - Execution - ClassLoaders - Custom": "The built-in class loader is sufficient for most cases where the files are already in the file system. However, in scenarios where we need to load classes out of the local hard drive or a network, we may need to make use of custom class loaders.",
	"CICD - Execution - Objects": "",
	"CICD - Execution - JShell": "",
	"CICD - Execution - JShell (Java 9)": "The Java Shell tool (JShell) is an interactive tool for learning the Java programming language and prototyping Java code. JShell is a Read-Evaluate-Print Loop (REPL), which evaluates declarations, statements, and expressions as they are entered and immediately shows the results. The tool is run from the command line.",

	"CICD - Audit": "SECTION",
	"CICD - Audit - Logging": ".",
	"CICD - Audit - Logging - Internal Logging (Java 9)": "The new Java 9 Platform Logging API allows applications and frameworks to route JDK internal logs to the desired logging framework (e.g. Log4j2, SLF4J etc). This is the similar to what SLF4J does via its bridges (an example here) but now it is built into JDK and is meant to redirect JDK internal logs to the desired logging destination.",
	"CICD - Audit - Logging - Internal Logging - System.LoggerFinder ": ".",
	"CICD - Audit - Logging - Internal Logging - System.Logger ": "."

}