{
	"Process": "SECTION",
	"Process.": "A Process is a program in execution. It has its own address space, a call stack, and link to any resources such as open files. A computer system normally has multiple processes running at a time. The operating system keeps track of all these processes and facilitates their execution by sharing the processing time of the CPU among them.",
	"Process - Java.lang.Process": "Java.lang.Process encapsulates the runtime information of a program in execution. Methods provided by the Process is used to perform input, output, waiting for the process o complete, checking exit status of the process and destroying process.",
	"Process - Process Builder": "This is an auxiliary class for the Process and is instantiated to manage a collection of process attributes.",
	"Process - Process Builder - Creation": "ProcessBuilder.start() and Runtime.getRuntime.exec() methods creates a native process and return an instance of a subclass of Process that can be used to control the process and obtain information about it. ProcessBuilder.start() is the most preferred way to create process.",
	"Process - Runtime": "Every Java program has an instance of the Runtime class, which encapsulates the runtime environment of the program. This class cannot be instantiated, but we can get a reference to the Runtime of the currently running program with the help of the static method called Runtime.getRuntime(). There are several methods defined in the Runtime class. These methods can be invoked to get the information about the runtime environment such as number of processors available to the JVM, about of memory available, loading native library, explicitly call garbage collector, and so forth.",
	"Process - ProcessHandler (Java 9)": "ProcessHandle identifies and provides control of native processes. Each individual process can be monitored for liveness, list its children, get information about the process or destroy it. By comparison, Process instances were started by the current process and additionally provide access to the process input, output, and error streams.",
	
	"Threads": "SECTION",
	"Threads - Main Thread": "Every process has at least one thread - called the main thread. The main thread can create additional threads within the process.",
	"Threads - Creation": "by implementing java.lang.Runnableinterface or by creating a Thread object. You must extend Thread only when you are looking to modify run() and other methods as well. If you are simply looking to modify only the run() method implementing Runnable is the best option (Runnable interface has only one abstract method i.e. run() ).",
	"Threads - Resources": "Threads within a process share the process’s resources including memory and open files. However, every thread has its own call stack. Since threads share the same address space of the process, creating new threads and communicating between them is more efficient.",
	"Threads - Multiplicity": "We can create multiple threads in java, even if we don’t create any Thread, one Thread at least  do exist i.e. main thread. Multiple threads run parallely in java.",
	"Threads - Thread Stack": "Yes, Threads have their own stack",
	"Threads - Thread Dumps - VisualVM": "VisualVM  is most popular way to generate Thread Dump",
	"Threads - Thread Dumps - jstack": "jstack is very easy way to generate Thread dump",
	"Threads - Predictability": "Thread behaviour is unpredictable because execution of Threads depends on Thread scheduler, thread scheduler may have different implementation on different platforms like windows, unix etc. Same threading program may produce different output in subsequent executions even on same platform. To achieve we are going to create 2 threads on same Runnable Object, create for loop in run() method and start  both threads. There is no surety that which threads will complete first,  both threads will enter anonymously in for loop.",
	"Threads - Weight": "Threads are lightweight process only if threads of same process are executing concurrently. But if threads of different processes are executing concurrently then threads are heavy weight process.",
	"Threads - Start. run() vs start() methods": "When you call start() method, main thread internally calls run() method to start newly created Thread, so run() method is ultimately called by newly created thread. When you call run() method main thread rather than starting run() method with newly thread it start run() method by itself.",
	"Threads - Restart. IllegalThreadStateException": "We cannot start Thread again, doing so will throw runtimeException java.lang.IllegalThreadStateException. The reason is once run() method is executed by Thread, it goes into dead state.",
	"Threads - Execution Order": "We can use join() methodto ensure all threads that started from main must end in order in which they started and also main should end in last.In other words waits for this thread to die. Calling join() method internally calls join(0),",
	"Threads - Communication": "Threads can communicate with each other by using wait(), notify() and notifyAll() methods.",
	"Threads - Communication. IllegalMonitorStateException": "wait(), notify() and notifyAll() methods are always called from Synchronized block only, and as soon as thread enters synchronized block it acquires object lock (by holding object monitor). If we call these methods without acquiring object lock i.e. from outside synchronize block then java.lang. IllegalMonitorStateException is thrown at runtime.",
	"Threads - Communication. InterruptedException": "Wait() method needs to enclosed in try-catch block, because it throws compile time exception i.e. InterruptedException.",
	"Threads - Thread Priority": "Thread Priority range is from 1 to 10. Where 1 is minimum priority and 10 is maximum priority. Thread with MAX_PRIORITY is likely to get more CPU as compared to low priority threads.",
	"Threads - Daemon. Priority": "Daemon threads are low priority threads which runs intermittently in background for doing garbage collection. Thread scheduler schedules these threads only when CPU is idle. These threads are created before user threads are created and die after all other user threads dies. Priority of daemon threads is always 1 (i.e. MIN_PRIORITY). JVM can exit when only daemon threads exist in system.",
	"Threads - Daemon. Visualization": "You may like to see how daemon threads work, for that you can use VisualVM or jStack.",
	"Threads - Daemon. Methods": "We can use isDaemon() method to check whether thread is daemon thread or not. We can use setDaemon(boolean on) method to make any user method a daemon thread. If setDaemon(boolean on) is called on thread after calling start() method than IllegalThreadStateException is thrown.",
	
	"Thread Objects": "SECTION",
	"Thread": "A thread is a thread of execution in a program..",
	"ThreadLocal": "ThreadLocal is a class which provides thread-local variables. Every thread has its own ThreadLocal value that makes ThreadLocal value threadsafe as well. ThreadLocal variables are thread safe. As every thread has its own ThreadLocal value and one thread can’t see other threads ThreadLocal value.",
	"ThreadLocal - OutOfMemoryError": "If one of the application classes stores a value in ThreadLocal variable and doesn’t remove it after the task at hand is completed, a copy of that Object will remain with the Thread (from the application server thread pool). Since lifespan of the pooled Thread surpasses that of the application, it will prevent the object and thus a ClassLoader being responsible for loading the application from being garbage collected. And we have created a leak, which has a chance to surface in a good old java.lang.OutOfMemoryError: PermGen space form.",
	"ThreadGroup": "When program starts JVM creates  a ThreadGroup named main. Unless specified, all  newly created threads become members of the main thread group. ThreadGroup is initialized with default priority of 10.",
	"ThreadPool": "ThreadPool is a pool of threads which reuses a fixed number of threads  to execute tasks. ThreadPool implementation internally uses LinkedBlockingQueue for adding and removing tasks. ThreadPool threadPool=new ThreadPool(2), Most of the executor implementations use thread pools to execute tasks. A thread pool is nothing but a bunch of worker threads that exist separately from the Runnable or Callable tasks and is managed by the executor.",
	"Runnable": "The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. The class must define a method of no arguments called run.",
	"Callable (Java 5)": "Java provides a Callable interface to define tasks that return a result. A Callable is similar to Runnable except that it can return a result and throw a checked exception. Callable interface has a single method call() which is meant to contain the code that is executed by a thread. Unlike Runnable, a Callable can throw a checked exception.",
	
	"Process vs Threads": "SECTION",
	"Process vs Threads - Hierarchy": "One process can have multiple Threads. Thread are subdivision of Process. One or more Threads runs in the context of process. Threads can execute any part of process. And same part of process can be executed by multiple Threads.",
	"Process vs Threads - Data Segment": "Processes have their own copy of the data segment of the parent process while Threads have direct access to the data segment of its process.",
	"Process vs Threads - Address Space": "Processes have their own address while Threads share the address space of the process that created it.",
	"Process vs Threads - Creation": "Process creation needs whole lot of stuff to be done, we might need to copy whole parent process, but Thread can be easily created. Thread are light weight process.",
	"Process vs Threads - Comunication": "Processes can easily communicate with child processes but interprocess communication is difficult. While, Threads can easily communicate with other threads of the same process using wait() and notify() methods.",
	"Process vs Threads - Thread Stack": "In process all threads share system resource like heap Memory etc. while Thread has its own stack.",
	"Process vs Threads - Changes": "Any change made to process does not affect child processes, but any change made to thread can affect the behavior of the other threads of the process.",
	
	"lifecycle": "SECTION",
	"Thread States": "New > Runnable > Running > Waiting/blocked/sleeping > Terminated (Dead)",
	"Thread States - New": "When instance of thread is created using new operator it is in new state, but the start() method has not been invoked on the thread yet, thread is not eligible to run yet.",
	"Thread States - Runnable": "When start() method is called on thread it enters runnable state",
	"Thread States - Running": "Entering run() method",
	"Thread States - Waiting/blocked/sleeping": "Thread is still alive, but currently not eligible to run. wait() to Waiting state, sleep() to Sleeping state",
	"Thread States - Waiting vs sleeping": "In waiting state it will wait for other threads to release object monitor/lock. In sleeping state it will wait for sleep time to get over. Should be called from synchronized block. wait() method belongs to java.lang.Object class but sleep() method belongs to java.lang.Thread class. wait() method is called on objects but sleep() method is called on Threads not objects.",
	"Thread States - Terminated (Dead)": "A thread is considered dead when its run() method completes.",
	"Thread States - suspend()/resume() deprecated": "Suspend() method is deadlock prone. Suspend() method puts thread from running to waiting state. And thread can go from waiting to runnable state only when resume() method is called on thread. It is deprecated method. Resume() method is only used with suspend() method that’s why it’s also deprecated method.",
	"Thread States - destroy() deprecated": " destroy() method is deadlock prone. If the target thread holds a lock on object when it is destroyed, no thread can lock this object (Deadlock formed are similar to deadlock formed when suspend() and resume() methods are used improperly). It results in deadlock formation. These deadlocksare generally called Frozen processes. Additionally you must know calling destroy() method on Threads throw runtimeException i.e. NoSuchMethodError. Destroy() method puts thread from running to dead state.",
	"Thread States - stop() deprecated": "Stopping a thread with Thread.stop() causes it to release all of the monitors that it has locked. If any of the objects previously protected by these monitors were in an inconsistent state, the damaged objects become visible to other threads, which might lead to unpredictable behavior.",
	"Thread States - How to Stop a Thread?": "(1) calling stop (deprecated), (2) calling interrupt plus catch InterruptionException, (3) put a flag to allow thread stop by itself",
	"Thread States - notify vs notifiyAll()": "notify()- Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is random and occurs at the discretion of the implementation. notifyAll()- Wakes up all threads that are waiting on this object's monitor. A thread waits on an object's monitor by calling one of the wait methods.",

	"safepoint": "SECTION",
	"Safepoint": "A safepoint is a range of execution where the state of the executing thread is well described. Safepoints are a common JVM implementation detail",
	"Safepoint - How": "At a safepoint the mutator thread is at a known and well defined point in it’s interaction with the heap. This means that all the references on the stack are mapped (at known locations) and the JVM can account for all of them. As long as the thread remains at a safepoint we can safely manipulate the heap + stack such that the thread’s view of the world remains consistent when it leaves the safepoint.",
	"Safepoint - When - Yes": "A Java thread is at a safepoint if it is blocked on a lock or synchronized block, waiting on a monitor, parked, or blocked on blocking IO. Essentially these all qualify as orderly de-scheduling events for the Java thread and as part of tidying up before put on hold the thread is brought to a safepoint. A Java thread is at a safepoint while executing JNI code. Before crossing the native call boundary the stack is left in a consistent state before handing off to the native code. This means that the thread can still run while at a safepoint.",
	"Safepoint - How - No": "A Java thread which is executing bytecode is NOT at a safepoint (or at least the JVM cannot assume that it is at a safepoint).",
	"Safepoint - flag": "Java threads poll a ‘safepoint flag’ (global or thread level) at ‘reasonable’ intervals and transition into a safepoint state (thread is blocked at a safepoint) when they observe a ‘Go to safepoint’ flag",
	"Thread-Local Handshakes (Java 10)": "Introduce a way to execute a callback on threads without performing a global VM safepoint. Make it both possible and cheap to stop individual threads and not just all threads or none. A handshake operation is a callback that is executed for each JavaThread while that thread is in a safepoint safe state. The callback is executed either by the thread itself or by the VM thread while keeping the thread in a blocked state.",
	"Thread-Local Handshakes vs Safepoint": "The big difference between safepointing and handshaking is that the per thread operation will be performed on all threads as soon as possible and they will continue to execute as soon as it’s own operation is completed. If a JavaThread is known to be running, then a handshake can be performed with that single JavaThread as well.",
	
	"Execution - Sync": "SECTION",
	"Execution - Sync - Execution - Executor (Java 5)": "A framework for creating and managing threads. Executors framework helps you with Thread Creation, Thread Management, Task submission and execution:",
	"Execution - Sync - Executor - Executor interfaces (Java 5)": "Java Concurrency API defines the following three executor interfaces that covers everything that is needed for creating and managing threads: Executor, ExecutorService, ScheduledExecutorService",
	"Execution - Sync - Executor - Executor interfaces - Executor": " A simple interface that contains a method called execute() to launch a task specified by a Runnable object. An object that executes submitted Runnable tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An Executor is normally used instead of explicitly creating threads. For example, rather than invoking new Thread(new(RunnableTask())).start() for each of a set of tasks, you might use: Executor executor = anExecutor, executor.execute(new RunnableTask1()),",
	"Execution - Sync - Executor - Executor interfaces - ExecutorService": "A sub-interface of Executor that adds functionality to manage the lifecycle of the tasks. It also provides a submit() method whose overloaded versions can accept a Runnable as well as a Callable object. ExecutorService provides two methods for shutting down an executor : shutdown() and shutdownNow()",
	"Execution - Sync - Executor - Executor interfaces - ExecutorService. How it works": "Tasks are submitted to a thread pool via an internal queue called the Blocking Queue. If there are more tasks than the number of active threads, they are inserted into the blocking queue for waiting until any thread becomes available. If the blocking queue is full than new tasks are rejected.",
	"Execution - Sync - Executor - Executor interfaces - ScheduledExecutorService": "A sub-interface of ExecutorService. It adds functionality to schedule the execution of the tasks. ScheduledExecutorService is used to execute a task either periodically or after a specified delay.",
	"Execution - Sync - Executor - ThreadPool - ThreadPoolExecutor (Java 6) - implements ExecutorService": "An ExecutorService that executes each submitted task using one of possibly several pooled threads, normally configured using Executors factory methods.",
	"Execution - Sync - Executor - ThreadPool - ScheduledThreadPoolExecutor (Java 7)": "A ThreadPoolExecutor that can additionally schedule commands to run after a given delay, or to execute periodically. This class is preferable to Timer when multiple worker threads are needed, or when the additional flexibility or capabilities of ThreadPoolExecutor (which this class extends) are required.",
	"Execution - Sync - Executor - Fork/Join - framework (Java 7)": "The fork/join framework is an implementation of the ExecutorService interface that helps you take advantage of multiple processors. It is designed for work that can be broken into smaller pieces recursively. As with any ExecutorService implementation, the fork/join framework distributes tasks to worker threads in a thread pool. The fork/join framework is distinct because it uses a work-stealing algorithm. Worker threads that run out of things to do can steal tasks from other threads that are still busy.",
	"Execution - Sync - Executor - Fork/Join - ForkJoinPool (Java 7)": "The center of the fork/join framework is the ForkJoinPool class, an extension of the AbstractExecutorService class. ForkJoinPool implements the core work-stealing algorithm and can execute ForkJoinTask processes.",
	"Execution - Sync - Executor - Fork/Join - ForkJoinTask": "ForkJoinTask is the base type for tasks executed inside ForkJoinPool. In practice, one of its two subclasses should be extended: the RecursiveAction for void tasks and the RecursiveTask<V> for tasks that return a value. They both have an abstract method compute() in which the task’s logic is defined.",
	"Execution - Sync - Practical Options - Runnable.run()": "new Runnable() { @Override public void run() { ... } }.run(), Does not create a thread",
	"Execution - Sync - Practical Options - Thread.start()": "new Thread( new Runnable() { @Override public void run() { ... } }).start(), Correct. Thread dies after completion",
	"Execution - Sync - Practical Options - Executor.execute(...) (simple)": "Executors.newSingleThreadExecutor().execute(new Runnable() { @Override  public void run() { ... } }), Correct. Executor object is running open after thread finished",
	"Execution - Sync - Practical Options - Executor.execute(...) (scheduled)": "Executors.newSingleThreadScheduledExecutor().execute(new Runnable() { @Override  public void run() { ... } }), Correct. Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically.",
	"Execution - Sync - Practical Options - Executor.execute(...) (static thread pool)": "Executors.newFixedThreadPool().execute(new Runnable() { @Override  public void run() { ... } }), Correct. Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue. At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. The threads in the pool will exist until it is explicitly shutdown",
	"Execution - Sync - Practical Options - Executor.execute(...) (dynamic thread pool)": "Executors.newCachedThreadPool().execute(new Runnable() { @Override  public void run() { ... } }), Correct. Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available. These pools will typically improve the performance of programs that execute many short-lived asynchronous tasks. Calls to execute will reuse previously constructed threads if available. If no existing thread is available, a new thread will be created and added to the pool. Threads that have not been used for sixty seconds are terminated and removed from the cache. Thus, a pool that remains idle for long enough will not consume any resources. Note that pools with similar properties but different details (for example, timeout parameters) may be created using ThreadPoolExecutor constructors.",
	"Execution - Sync - Practical Options - Executor.execute(...) (fork/join - work stealing)": "Executors.newWorkStealingThreadPool().execute(new Runnable() { @Override  public void run() { ... } }), Correct. will create and shut down threads dynamically to accommodate the required parallelism level. It also tries to reduce the contention on the task queue, so can be really good in heavily loaded environments. Also good when your tasks create more tasks for the executor, like recursive tasks.",
	"Execution - Sync - Spring - TaskExecutor": "Spring provides the TaskExecutor as an abstraction for dealing with executors.",
	"Execution - Sync - Spring - TaskExecutor - SimpleAsyncTaskExecutor": "This implementation does not reuse any threads, rather it starts up a new thread for each invocation. However, it does support a concurrency limit which will block any invocations that are over the limit until a slot has been freed up. If you're looking for true pooling, keep scrolling further down the page.",
	"Execution - Sync - Spring - TaskExecutor - SyncTaskExecutor": "This implementation doesn't execute invocations asynchronously. Instead, each invocation takes place in the calling thread. It is primarily used in situations where mutlithreading isn't necessary such as simple test cases.",
	"Execution - Sync - Spring - TaskExecutor - ConcurrentTaskExecutor": "This implementation is a wrapper for a Java 5 java.util.concurrent.Executor. There is an alternative, ThreadPoolTaskExecutor, that exposes the Executor configuration parameters as bean properties. It is rare to need to use the ConcurrentTaskExecutor but if the ThreadPoolTaskExecutor isn't robust enough for your needs, the ConcurrentTaskExecutor is an alternative.",
	"Execution - Sync - Spring - TaskExecutor - SimpleThreadPoolTaskExecutor": "This implementation is actually a subclass of Quartz's SimpleThreadPool which listens to Spring's lifecycle callbacks. This is typically used when you have a threadpool that may need to be shared by both Quartz and non-Quartz components.",
	"Execution - Sync - Spring - TaskExecutor - ThreadPoolTaskExecutor": "This implementation can only be used in a Java 5 environment but is also the most commonly used one in that environment. It exposes bean properties for configuring a java.util.concurrent.ThreadPoolExecutor and wraps it in a TaskExecutor. If you need something advanced such as a ScheduledThreadPoolExecutor, it is recommended that you use a ConcurrentTaskExecutor instead.",
	"Execution - Sync - Spring - TaskExecutor - TimerTaskExecutor": "This implementation uses a single TimerTask as its backing implementation. It's different from the SyncTaskExecutor in that the method invocations are executed in a separate thread, although they are synchronous in that thread.",
	"Execution - Sync - Spring - TaskExecutor - WorkManagerTaskExecutor": "CommonJ is a set of specifications jointly developed between BEA and IBM. These specifications are not Java EE standards, but are standard across BEA's and IBM's Application Server implementations.This implementation uses the CommonJ WorkManager as its backing implementation and is the central convenience class for setting up a CommonJ WorkManager reference in a Spring context. Similar to the SimpleThreadPoolTaskExecutor, this class implements the WorkManager interface and therefore can be used directly as a WorkManager as well.",

	"Execution - Async": "SECTION",
	"Execution - Async - Future (Java 5)": "The concept of Future is similar to Promise in other languages like Javascript. It represents the result of a computation that will be completed at a later point of time in future. You can cancel a future using Future.cancel() method. The future.get() method blocks and waits for the task to complete. Future<String> future = executorService.submit(callable),",
	"Execution - Async - FutureTask (Java 7)": "A cancellable asynchronous computation. This class provides a base implementation of Future, with methods to start and cancel a computation, query to see if the computation is complete, and retrieve the result of the computation. The result can only be retrieved when the computation has completed, the get methods will block if the computation has not yet completed. Once the computation has completed, the computation cannot be restarted or cancelled (unless the computation is invoked using runAndReset()). A FutureTask can be used to wrap a Callable or Runnable object. Because FutureTask implements Runnable, a FutureTask can be submitted to an Executor for execution.",
	"Execution - Async - CompletableFuture (Java 8)": "CompletableFuture is at the same time a building block and a framework with about 50 different methods for composing, combining, executing asynchronous computation steps and handling errors.",
	"Execution - Async - CompletableFuture - as a Simple Future": "The CompletableFuture class implements the Future interface, so you can use it as a Future implementation, but with additional completion logic.",
	"Execution - Async - CompletableFuture - with Encapsulated Computation Logic": "Static methods runAsync(Runnable runnable), runAsync(Runnable runnable, Executor executor), supplyAsync(Supplier<U> supplier) and supplyAsync(Supplier<U> supplier, Executor executor) allow us to create a CompletableFuture instance out of Runnable and Supplier functional types correspondingly. supplyAsync() by default uses ForkJoinPool.commonPool(), thread pool shared between all CompletableFutures, all parallel streams and all applications deployed on the same JVM. This hard-coded, unconfigurable thread pool is completely outside of our control, hard to monitor and scale. Therefore you should always specify your own Executor",
	"Execution - Async - CompletableFuture - Processing Results of Asynchronous Computations": "<b>thenApply</b> - thenApply(Function< ? super T,? extends U > fn), thenApplyAsync(Function< ? super T,? extends U > fn), thenApplyAsync(Function< ? super T,? extends U > fn, Executor executor), <br/><br/><b>thenAccept</b> - thenAccept(Consumer< ? super T > action), thenAcceptAsync(Consumer< ? super T > action), thenAcceptAsync(Consumer< ? super T > action, Executor executor), thenAcceptBoth(CompletionStage< ? extends U > other, BiConsumer< ? super T,? super U > action), thenAcceptBothAsync(CompletionStage< ? extends U > other, BiConsumer< ? super T,? super U > action), thenAcceptBothAsync(CompletionStage< ? extends U > other, BiConsumer< ? super T,? super U > action, Executor executor) <br/><br/><b>thenRun</b> - thenRun(Runnable action), thenRunAsync(Runnable action), thenRunAsync(Runnable action, Executor executor)",
	"Execution - Async - CompletableFuture - Combining Futures": "<b>thenCompose</b>, <b>thenCombine</b> Ability to combine CompletableFuture instances in a chain of computation steps.",
	"Execution - Async - CompletableFuture - Running Multiple Futures in Parallel": "CompletableFuture<Void> combinedFuture = CompletableFuture.allOf(future1, future2, future3)",
	"Execution - Async - CompletableFuture - Handling Errors": "handle()",
	"Execution - Async - CompletableFuture - Async Methods": "supplyAsync() + thenApplyAsync()",
	
	"lock": "SECTION",
	"Lock": "Every object has an intrinsic lock associated with it. By convention, a thread that needs exclusive and consistent access to an objects fields has to acquire the objects intrinsic lock before accessing them, and then release the intrinsic lock when it is done. A thread is said to own the intrinsic lock between the time it has acquired the lock and released the lock. As long as a thread owns an intrinsic lock, no other thread can acquire the same lock. The other thread will block when it attempts to acquire the lock. When a thread releases an intrinsic lock, a happens-before relationship is established between that action and any subsequent acquisition of the same lock.",
	"Lock - Liveness": "A concurrent application's ability to execute in a timely manner is known as its liveness. This section describes the most common kind of liveness problem, deadlock, and goes on to briefly describe two other liveness problems, starvation and livelock.",
	"Lock - Liveness - Race Condition": "A race condition occurs when two or more threads can access shared data and they try to change it at the same time.",
	"Lock - Liveness - Livelock": "A thread often acts in response to the action of another thread. If the other thread's action is also a response to the action of another thread, then livelock may result. As with deadlock, livelocked threads are unable to make further progress. However, the threads are not blocked — they are simply too busy responding to each other to resume work. This is comparable to two people attempting to pass each other in a corridor: Alphonse moves to his left to let Gaston pass, while Gaston moves to his right to let Alphonse pass. Seeing that they are still blocking each other, Alphone moves to his right, while Gaston moves to his left. They're still blocking each other, so...",
	"Lock - Liveness - Deadlock": "Deadlock is a situation where two threads are waiting for each other to release lock holded by them on resources.",
	"Lock - Liveness - Thread starvation": "When thread does not enough CPU for its execution Thread starvation happens.",
	"Lock - Liveness - Thread interference": "Threads communicate primarily by sharing access to fields and the objects reference fields refer to. This form of communication is extremely efficient, but makes two kinds of errors possible: thread interference and memory consistency errors. The tool needed to prevent these errors is synchronization.",
	"Lock - Intrinsic Lock": "An intrinsic lock (aka monitor lock) is an implicit internal entity associated with each instance of objects. The intrinsic lock enforces exclusive access to an object's state.",
	"Lock - Intrinsic Lock - Multiplicity": "Every object has an intrinsic lock associated with it.",
	"Lock - Intrinsic Lock - synchronized": "Synchronization is built around an internal entity known as the intrinsic lock or monitor lock (monitor). When a thread invokes a synchronized method, it automatically acquires the intrinsic lock for that method's object and releases it when the method returns. The lock release occurs even if the return was caused by an uncaught exception.",
	"Lock - Intrinsic Lock - synchronized - scope": "The Java programming language provides two basic synchronization idioms: synchronized methods and synchronized statements.",
	"Lock - Intrinsic Lock - synchronized - limitations": " Synchronized code relies on a simple kind of reentrant lock. This kind of lock is easy to use, but has many limitations.",
	"Lock - Lock Objects": "More sophisticated locking idioms are supported by the java.util.concurrent.locks package. Its most basic interface  is Lock. Lock objects work very much like the implicit locks used by synchronized code. As with implicit locks, only one thread can own a Lock object at a time. Lock objects also support a wait/notify mechanism, through their associated Condition objects.",
	"Lock - Lock Objects vs Implicit Lock": "Lock objects work very much like the implicit locks used by synchronized code. As with implicit locks, only one thread can own a Lock object at a time. Lock objects also support a wait/notify mechanism, through their associated Condition objects. The biggest advantage of Lock objects over implicit locks is their ability to back out of an attempt to acquire a lock. The tryLock method backs out if the lock is not available immediately or before a timeout expires (if specified). The lockInterruptibly method backs out if another thread sends an interrupt before the lock is acquired.",
	"Lock - Lock Objects - interface Lock#lock()": "Acquires the lock.",
	"Lock - Lock Objects - interface Lock#lockInterruptibly()": "Acquires the lock unless the current thread is interrupted.",
	"Lock - Lock Objects - interface Lock#newCondition()": "Returns a new Condition instance that is bound to this Lock instance.",
	"Lock - Lock Objects - interface Lock#tryLock()": "Acquires the lock only if it is free at the time of invocation.",
	"Lock - Lock Objects - interface Lock#tryLock(long time, TimeUnit unit)": "Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted.",
	"Lock - Lock Objects - interface Lock#unlock()": "Releases the lock.",
	"Lock - Lock Objects - ReadWriteLock": "ReadWriteLock consists of a pair of locks - one for read access and one for write access. The read lock may be held by multiple threads simultaneously as long as the write lock is not held by any thread. ReadWriteLock allows for an increased level of concurrency. It performs better compared to other locks in applications where there are fewer writes than reads.",
	"Lock - Lock Objects - Reentrant Synchronization": "Recall that a thread cannot acquire a lock owned by another thread. But a thread can acquire a lock that it already owns. Allowing a thread to acquire the same lock more than once enables reentrant synchronization. This describes a situation where synchronized code, directly or indirectly, invokes a method that also contains synchronized code, and both sets of code use the same lock. Without reentrant synchronization, synchronized code would have to take many additional precautions to avoid having a thread cause itself to block.",
	"Lock - Lock Objects - ReentrantReadWriteLock": "lock read/write separately, it is a synchronize++ ReentrantLock is a mutually exclusive lock with the same behavior as the intrinsic/implicit lock accessed via the synchronized keyword. A thread that currently owns the lock can acquire it more than once without any problem. The tryLock() method tries to acquire the lock without pausing the thread.",
	"Lock - Lock Objects - StampedLock (Java 8)": "3 modes for controlling read/write access: (1) Writing. Method writeLock() possibly blocks waiting for exclusive access, returning a stamp that can be used in method unlockWrite(long) to release the lock. (2) Method readLock() possibly blocks waiting for non-exclusive access, returning a stamp that can be used in method unlockRead(long) to release the lock. (3) Optimistic Reading. Method tryOptimisticRead() returns a non-zero stamp only if the lock is not currently held in write mode. ",
	"Lock - Atomic Access": "Using simple atomic variable access is more efficient than accessing these variables through synchronized code, but requires more care by the programmer to avoid memory consistency errors. Whether the extra effort is worthwhile depends on the size and complexity of the application.",
	"Lock - Volatile": "In Java, each thread has a separate memory space known as working memory, this holds the values of different variables used for performing operations. After performing an operation, thread copies the updated value of the variable to the main memory, and from there other threads can read the latest value. Simply put, the volatile keyword marks a variable to always go to main memory, for both reads and writes, in the case of multiple threads accessing it..",
	"Lock - Atomic Variables": "Java concurrency api defines several classes in java.util.concurrent.atomic package that support Atomic operations on single variables. Atomic classes internally use compare-and-swap instructions supported by modern CPUs to achieve synchronization. These instructions are generally much faster than locks.",
	"Lock - Concurrent Collections": "The java.util.concurrent package includes a number of additions to the Java Collections Framework. These are most easily categorized by the collection interfaces provided: BlockingQueue, ConcurrentMap, ConcurrentNavigableMap. All of these collections help avoid Memory Consistency Errors by defining a happens-before relationship between an operation that adds an object to the collection with subsequent operations that access or remove that object.",
	"Lock - Concurrent Collections - BlockingQueue": "A Queue that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.",
	"Lock - Concurrent Collections - ConcurrentMap": "ConcurrentMap is a subinterface of java.util.Map that defines useful atomic operations. These operations remove or replace a key-value pair only if the key is present, or add a key-value pair only if the key is absent. Making these operations atomic helps avoid synchronization. The standard general-purpose implementation of ConcurrentMap is ConcurrentHashMap, which is a concurrent analog of HashMap.",
	"Lock - Concurrent Collections - ConcurrentNavigableMap": "ConcurrentNavigableMap is a subinterface of ConcurrentMap that supports approximate matches. The standard general-purpose implementation of ConcurrentNavigableMap is ConcurrentSkipListMap, which is a concurrent analog of TreeMap."
}