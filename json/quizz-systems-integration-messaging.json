{			

	"Messaging - EDA": "SECTION",
	"Messaging - EDA - definition": "Components of the system not directly connected communicate asynchronously by events instead of direct function calls.",
	"Messaging - EDA - Components": ".",
	"Messaging - EDA - Components - Producers": "Event Producers: Components that emit events.",
	"Messaging - EDA - Components - Consumers": "Event Consumers: Components that respond to events.",
	"Messaging - EDA - Components - Channels": "Event Channel: The medium that transmits events from producers to consumers.",
	"Messaging - EDA - Components - Channels - Broker": "To handle large volumes of events in Node.js, consider using a message broker such as Redis, RabbitMQ, or Apache Kafka. These tools provide persistence, queuing, and reliability, making it easier to scale your event-driven system.",
	"Messaging - EDA - Components - Channels - Broker - Goal": "Decoupling 2 applications and allowing parallel asynchronous processing.",
	"Messaging - EDA - Components - Channels - Broker - Features - Model - push/pull": "",
	"Messaging - EDA - Components - Channels - Broker - Features - Multiplicity - Multiple vs Single Consumers": "",
	"Messaging - EDA - Components - Channels - Broker - Features - Multiplicity - Multiple vs Single Delivery": "",
	"Messaging - EDA - Components - Channels - Broker - Features - Reliability - Guaranteed": "This guarantee does come with a heavy performance price because the broker must securely persist the message in its message store prior to acknowledging the message to the producer.",
	"Messaging - EDA - Components - Channels - Broker - Features - Reliability - Dead Letter Queue": "",
	"Messaging - EDA - Components - Channels - Broker - Features - Persistence": "Messages are persisted for some (configurable) duration is no consumer available.",
	"Messaging - EDA - Components - Channels - Broker - Features - Persistence - Message Copies": "",
	"Messaging - EDA - Components - Channels - Broker - Features - Order": "",
	"Messaging - EDA - Components - Channels - Broker - QoS - QoS 0": "QoS 0: At most once delivery",
	"Messaging - EDA - Components - Channels - Broker - QoS - QoS 1": "QoS 1: At least once delivery",
	"Messaging - EDA - Components - Channels - Broker - QoS - QoS 2": "QoS 2: Exactly once delivery",
	"Messaging - EDA - Components - Channels - Broker - Types - Pull": "Messages are NOT pushed to receivers. Receivers have to poll the broker to receive messages.",
	"Messaging - EDA - Components - Channels - Broker - Types - Pull - EDA - Components - Channels - ": "Queues",
	"Messaging - EDA - Components - Channels - Broker - Types - Pull - Formats - JMS PTP": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Pull - Formats - AMQP": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Pull - Formats - ZeroMQ": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Pull - Formats - AWS SQS": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Pull - Formats - Custom": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Push": "Messages are pushed to subscribers as and when they are sent by publishers.",
	"Messaging - EDA - Components - Channels - Broker - Types - Push - EDA - Components - Channels - ": "Topics",
	"Messaging - EDA - Components - Channels - Broker - Types - Push - Formats - JMS Format": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Push - Formats - AMQP": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Push - Formats - MQTT": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Push - Formats - STOMP": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Push - Formats - WAMP": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Push - Formats - ZeroMQ": "",
	"Messaging - EDA - Components - Channels - Broker - Types - Push - Formats - Custom": "",
	"Messaging - EDA - Problems": "https://itnext.io/resolving-common-issues-in-event-driven-architecture-a3afe8f3ef7b",
	"Messaging - EDA - Problems - Event Loss": "",
	"Messaging - EDA - Problems - Event Duplication": "",
	"Messaging - EDA - Problems - Event Ordering Issues": "",
	"Messaging - EDA - Problems - Performance Issues": "",
	"Messaging - EDA - Problems - Fault Tolerance": "",
	"Messaging - Datasync": "",
	"Messaging - Datasync - Products": "",
	"Messaging - Datasync - Products - Firebase": "",
	"Messaging - Datasync - Products - RethinkDB": "",

	"Messaging - Formats": "SECTION",
	"Messaging - Formats - JMS": "",
	"Messaging - Formats - AMQP": "",
	"Messaging - Formats - MQTT": "",
	"Messaging - Formats - STOMP": "",
	"Messaging - Formats - STOMP - Brokers - RabbitMQ": "",
	"Messaging - Formats - STOMP - Brokers - ActiveMQ": "",
	"Messaging - Formats - WAMP": "",
	"Messaging - Formats - Channels (Pusher)": "",
	"Messaging - Formats - ZeroMQ": "",
	"Messaging - Formats - Custom": "",
	"Messaging - Formats - Protobuff": "",
	"Messaging - Formats - JSON": "",
	"Messaging - Formats - XML": "",

	"Messaging - Formats - eBusiness - EDI": "EDI (Electronic Data Interchange) A protocol standard for structured business data exchange between organizations with minimal human intervention. ",
	"Messaging - Formats - eBusiness - ebMS3": "",
	"Messaging - Formats - eBusiness - AS4": "",
	"Messaging - Formats - eBusiness - SBDH": "",
	"Messaging - Formats - eBusiness - XHE": "",

	"Messaging - Protocols": "SECTION",
	"Messaging - Protocols - MQTT": "A lightweight, publish-subscribe messaging protocol designed for unreliable networks with low bandwidth. ",
	"Messaging - Protocols - AMQP": "A robust, open-standard protocol for message-oriented middleware, ensuring reliable and scalable message queuing. ",
	"Messaging - Protocols - SSE": "SSE (Server-Sent Events) A simple HTTP-based technology that allows servers to push real-time updates to clients without continuous polling.  ",
	"Messaging - Protocols - ZeroMQ": "",
	"Messaging - Protocols - XMPP": "",
	"Messaging - Protocols - XMPP - Products - Jabber": "",
	"Messaging - Protocols - PointToPoint": "",
	"Messaging - Protocols - PointToPoint - RealTime - Sockets": "",
	"Messaging - Protocols - PointToPoint - RealTime - WebHooks": "Event-driven callbacks that notify external systems when specific events occurâ€”ideal for automation. ",
	"Messaging - Protocols - PointToPoint - RealTime - WebSockets": "A full-duplex protocol that enables bi-directional communication, keeping a persistent connection open between client and server.",
	"Messaging - Protocols - PointToPoint - RealTime - WebSockets - Products - Socket.io": "",
	"Messaging - Protocols - PointToPoint - RealTime - WebSockets - STOMP": "",
	"Messaging - Protocols - PointToPoint - RealTime - WebSockets - WAMP": "",
	"Messaging - Protocols - PointToPoint - RealTime - WebSockets - Channels (Pusher)": ""

}