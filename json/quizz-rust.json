{
	"DataTypes": "SECTION",
	"DataTypes - Primitives": "",
	"DataTypes - Custom Types": "",
	"DataTypes - Variables": "",
	"DataTypes - Types": "",
	"DataTypes - Conversion": "",
	"DataTypes - Expressions": "",
	"DataTypes - Unsafe Operations": "",
	"DataTypes - Generics": "",
	"DataTypes - Std Types": "",
	"DataTypes - Collections": "",

	"Logic": "SECTION",
	"Logic - Control Flow": "",
	"Logic - Traits": "",
	"Logic - Iterators": "",
	"Logic - Closures": "",
	"Logic - Error Handling": "",
	"Logic - Async": "",
	"Logic - Multithreading": "",
	"Logic - Resources": "",

	"CICD - Architecture": "SECTION",
	"CICD - Architecture - Workspaces": "",
	"CICD - Architecture - Patterns": "",
	"CICD - Architecture - OO": "",

	"CICD - Packaging": "SECTION",
	"CICD - Packaging - Functions": "",
	"CICD - Packaging - Package": "A package is a bundle of one or more crates that provides a set of functionality.",
	"CICD - Packaging - Package - Cargo": "Cargo is actually a package that contains the binary crate for the command-line tool you’ve been using to build your code. The Cargo package also contains a library crate that the binary crate depends on. Other projects can depend on the Cargo library crate to use the same logic the Cargo command-line tool uses.",
	"CICD - Packaging - Package - Cargo - Cargo.toml": "A package contains a Cargo.toml file that describes how to build those crates.",
	"CICD - Packaging - Crate": "A crate is the smallest amount of code that the Rust compiler considers at a time.",
	"CICD - Packaging - Crate - root": "The crate root is a source file that the Rust compiler starts from and makes up the root module of your crate usually src/lib.rs for a library crate or src/main.rs for a binary crate.",
	"CICD - Packaging - Crate - types": "A crate can come in one of two forms: a binary crate or a library crate. A package can contain as many binary crates as you like, but at most only one library crate. A package must contain at least one crate, whether that’s a library or binary crate..",
	"CICD - Packaging - Crate - types - binary": "Binary crates are programs you can compile to an executable that you can run, such as a command-line program or a server. Each must have a function called main that defines what happens when the executable runs. All the crates we’ve created so far have been binary crates.",
	"CICD - Packaging - Crate - types - library": "Library crates don’t have a main function, and they don’t compile to an executable. Instead, they define functionality intended to be shared with multiple projects. Most of the time when Rustaceans say “crate”, they mean library crate, and they use “crate” interchangeably with the general programming concept of a “library“.",
	"CICD - Packaging - Crate - Attributes": "",
	"CICD - Packaging - Modules": "Crates can contain modules, and the modules may be defined in other files that get compiled with the crate.",
	"CICD - Packaging - Modules - declare": "In the crate root file, you can declare new modules; say you declare a “garden” module with mod garden;. The compiler will look for the module’s code in these places 1. Inline, within curly brackets that replace the semicolon following mod garden 2. In the file src/garden.rs 3. In the file src/garden/mod.rs",
	"CICD - Packaging - Modules - refer": "Paths to code in modules: Once a module is part of your crate, you can refer to code in that module from anywhere else in that same crate, as long as the privacy rules allow, using the path to the code. For example, an Asparagus type in the garden vegetables module would be found at crate::garden::vegetables::Asparagus.",
	"CICD - Packaging - Submodules": "Crates can contain modules, and the modules may be defined in other files that get compiled with the crate.",
	"CICD - Packaging - Submodules - declare": "Declaring submodules: In any file other than the crate root, you can declare submodules. For example, you might declare mod vegetables; in src/garden.rs. The compiler will look for the submodule’s code within the directory named for the parent module in these places: 1. Inline, directly following mod vegetables, within curly brackets instead of the semicolon 2. In the file src/garden/vegetables.rs 3. In the file src/garden/vegetables/mod.rs",
	"CICD - Packaging - Macros": "",

	"CICD - Compilation": "SECTION",
	"CICD - Compilation - Crate": "When compiling a crate, the compiler first looks in the crate root file for code to compile.",

	"CICD - Execution": "SECTION",
	"CICD - Execution - Scopes": "",
	"CICD - Execution - Memory": "",
	"CICD - Execution - Memory - Ownership": "",
	"CICD - Execution - Memory - Ownership - References": "",
	"CICD - Execution - Memory - Ownership - Borrowing": "",
	"CICD - Execution - Memory - Ownership - Slice": "",
	"CICD - Execution - Memory - Pointers": "",
	"CICD - Testing": ""

}