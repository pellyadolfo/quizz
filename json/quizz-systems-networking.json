{


	"Networking": "SECTION",
	"Networking 0": "https://www.linkedin.com/posts/mozahid-husain_networkingfordevops-activity-7323904742819037184-B_9M/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 1": "https://www.linkedin.com/posts/saluvala-saichandu-s-6aa2b6358_networking-for-devops-activity-7323307374683881473-D4NO?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 2": "https://www.linkedin.com/posts/poonam-sabale_networkingfordevops-activity-7325377120912777217-Ph3A?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 3": "https://www.linkedin.com/posts/pulibanti-raja_networking-for-cloud-and-devops-activity-7325649369993490433-ubBk/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 4": "https://www.linkedin.com/posts/adityajaiswal7_devops-shack-networking-traffic-management-activity-7326191640216326145-XMAg?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 5": "https://www.linkedin.com/posts/sushilchaubey5893_networking-traffic-management-in-devops-activity-7326201791807676416-44ZE?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 6": "https://www.linkedin.com/posts/ahmedalibutt_networking-for-devops-activity-7324372161920413696-of4s?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 7": "https://www.linkedin.com/posts/nk-systemdesign-one_give-me-2-mins-and-ill-teach-you-how-dns-activity-7324036188573478912-1aPw?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 8": "https://www.linkedin.com/posts/praveentech_nginx-cheatsheet-devops-activity-7317456626959990784-Z7H0/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 9": "https://www.linkedin.com/posts/adityajaiswal7_nginx-3-real-world-project-devops-shack-activity-7323588520747421696-GiVF/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 20": "https://www.linkedin.com/posts/sri-om-sharan_computer-networking-activity-7328715409694633984-qW3y?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 21": "https://www.linkedin.com/posts/activity-7329438409465176064-0NAt/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 22": "https://www.linkedin.com/posts/feki-ayman_networking-traffic-management-in-devops-activity-7327565718609092608-1h9q?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 23": "",
	"Networking 24": "",
	"Networking 25": "",
	"Networking 26": "",
	"Networking 27": "",
	"Networking 28": "",
	"Networking 29": "",
	"Networking 30": "https://www.linkedin.com/posts/poonam-sabale_networkingfordevops-activity-7325377120912777217-Ph3A?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 31": "https://www.linkedin.com/posts/feki-ayman_networking-traffic-management-in-devops-activity-7327565718609092608-1h9q?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking 32": "https://www.linkedin.com/posts/ala-soltani_networking-traffic-management-in-devops-activity-7328065358156685313-UOma/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",

	"OSI - Layer7": "SECTION",
	"OSI - Layer7 - Protocols - HTTP": "",
	"OSI - Layer7 - Protocols - HTTP - keep-alive": "Keep Connections Alive: Enable HTTP keep-alive to avoid re-establishing connections for every request.",
	"OSI - Layer7 - Protocols - HTTP2": "HTTP/2 began as the SPDY protocol, developed primarily at Google",
	"OSI - Layer7 - Protocols - HTTP2 - Goal": "Reducing server latency",
	"OSI - Layer7 - Protocols - HTTP2 - Features - Binary": "binary framing layer. As opposed to HTTP/1.1, which keeps all requests and responses in plain text format, HTTP/2 uses the binary framing layer to encapsulate all messages in binary format, while still maintaining HTTP semantics, such as verbs, methods, and headers.",
	"OSI - Layer7 - Protocols - HTTP2 - Features - Headers - compression": "Small files load more quickly than large ones. To speed up web performance, both HTTP/1.1 and HTTP/2 compress HTTP messages to make them smaller. However, HTTP/2 uses a more advanced compression method called HPACK that eliminates redundant information in HTTP header packets. This eliminates a few bytes from every HTTP packet. Given the volume of HTTP packets involved in loading even a single webpage, those bytes add up quickly, resulting in faster loading.",
	"OSI - Layer7 - Protocols - HTTP2 - Features - Prioritization": "Stream prioritization not only solves the possible issue of requests competing for the same resource, but also allows developers to customize the relative weight of requests to better optimize application performance.",
	"OSI - Layer7 - Protocols - HTTP2 - Features - Multiplexing": "HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it. In contrast, HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource. HTTP/2 does this by splitting data into binary-code messages and numbering these messages so that the client knows which stream each binary message belongs to.",
	"OSI - Layer7 - Protocols - HTTP2 - Features - Push": "Server push: Typically, a server only serves content to a client device if the client asks for it. However, this approach is not always practical for modern webpages, which often involve several dozen separate resources that the client must request. HTTP/2 solves this problem by allowing a server to 'push' content to a client before the client asks for it. The server also sends a message letting the client know what pushed content to expect – like if Bob had sent Alice a Table of Contents of his novel before sending the whole thing.",
	"OSI - Layer7 - Protocols - HTTP3 - Transport": "Both HTTP/1.1 and HTTP/2 use TCP as their transport, whereas HTTP/3 is based on Google’s QUIC – a transport layer network protocol that implements user space congestion control over UDP (User Datagram Protocol).",

	"Networking - Layer4": "SECTION",
	"Networking - Layer4 - Protocols - TCPIP": "",
	"Networking - Layer4 - VPC": "",
	"Networking - Layer4 - VPN": "https://www.linkedin.com/posts/sandip-das-developer_this-is-how-%F0%9D%90%95%F0%9D%90%8F%F0%9D%90%8D-works-and-every-cloud-activity-7318836487989444612-M7IR/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking - Layer4 - VPN ": "https://www.linkedin.com/posts/activity-7318807987937030144-xpBu/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking - Layer4 - NetworkFirewalls - Layer4": "TCPIP - network firewalls look at data packets and their state.",
	"Networking - Layer4 - ForwardProxy": "Intermediary between client devices and the internet.",
	"Networking - Layer4 - ForwardProxy - Functions - AccessControl": "Organizations use Forward Proxies to control and monitor internet usage within their network. Proxies can filter out malicious content, restrict access to certain websites, and enforce usage policies.",
	"Networking - Layer4 - ForwardProxy - Functions - ContentFiltering": "",
	"Networking - Layer4 - ForwardProxy - Functions - Anonymity": "Forward Proxies provide a level of anonymity for clients by masking their IP addresses. This is particularly useful for users seeking to access the internet without revealing their identity.",
	"Networking - Layer4 - ReverseProxy": "Intermediary between the client and the backend services or servers.",
	"Networking - Layer4 - ReverseProxy - Layer": "Operate at the Application Layer,",
	"Networking - Layer4 - ReverseProxy - Functions": "A Reverse Proxy focuses more on network-level concerns like load balancing, security, and caching for a wider range of applications.",
	"Networking - Layer4 - ReverseProxy - Functions - TrafficManagement": "Forwards client requests to backend servers.",
	"Networking - Layer4 - ReverseProxy - Functions - Security": "Provides an additional layer of defense (hides the identities of backend servers).",
	"Networking - Layer4 - ReverseProxy - Functions - Security - SSL": "Handles SSL encryption and decryption, offloading that responsibility from backend servers.",
	"Networking - Layer4 - ReverseProxy - Functions - Caching": "Can cache content to reduce server load and improve performance.",
	"Networking - Layer4 - LoadBalancer": "A Load Balancer is a network distributor at Layer 4 or 7 of OSI Model.",
	"Networking - Layer4 - LoadBalancer 0": "https://www.linkedin.com/posts/umarjon-backendev-devops_how-to-use-nginx-as-a-load-balancer-nginx-activity-7322257505047265280-ZtMm/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking - Layer4 - LoadBalancer 1": "https://www.linkedin.com/posts/tauseeffayyaz_load-balancer-vs-reverse-proxy-vs-api-gateway-activity-7326861589570019328-Spef?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking - Layer4 - LoadBalancer 2": "https://www.linkedin.com/posts/nikkisiapno_load-balancer-vs-reverse-proxy-whats-the-activity-7325830043849412609-rOq-?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Networking - Layer4 - LoadBalancer 3": "",
	"Networking - Layer4 - LoadBalancer 4": "",
	"Networking - Layer4 - LoadBalancer 5": "",
	"Networking - Layer4 - LoadBalancer 6": "",
	"Networking - Layer4 - LoadBalancer - Types - Hardware": "Expensive but provide high performance.",
	"Networking - Layer4 - LoadBalancer - Types - Software": "Cost-effective and flexible (Nginx, HAProxy).",
	"Networking - Layer4 - LoadBalancer - Functions - TrafficDistribution": "Distributes requests across multiple servers.",
	"Networking - Layer4 - LoadBalancer - Functions - HighAvailability": "Prevents overload, ensures uptime, and reroutes traffic on failure.",
	"Networking - Layer4 - LoadBalancer - Functions - Scalability": "Optimizes routing for minimal latency and resource efficiency.",
	"Networking - Layer4 - LoadBalancer - Functions - Types - CLB": "Classic Load Balancer (CLB). CLB operates in Layer 4 and Layer 7.",
	"Networking - Layer4 - LoadBalancer - Functions - Types - ALB": "Application Load Balancer (ALB). ALB operates in Layer 7",
	"Networking - Layer4 - LoadBalancer - Functions - Types - NLB": "Network Load Balancer (NLB). NLB operates in Layer 4",
	"Networking - Layer4 - LoadBalancer - Functions - Types - GLB": "Gateway Load Balancer (GLB). NLB operates in Layer 3",
	"Networking - Layer4 - LoadBalancer - Algorithms": "Optimizing by servers capacity.",
	"Networking - Layer4 - LoadBalancer - Algorithms - RoundRobin": "Sequential manner. Applies to servers relatively equal. Simple but does not account for server load or capability",
	"Networking - Layer4 - LoadBalancer - Algorithms - RoundRobin - StickyRoundRobin": "Maintains session persistence. Apps that maintain user sessions. Improves user experience but can lead to uneven load distribution",
	"Networking - Layer4 - LoadBalancer - Algorithms - RoundRobin - WeightedRoundRobin": "Assigns a weight to each server based on its capacity or capability. Applies servers of varying capabilities but requires  monitoring and configuration of server weights",
	"Networking - Layer4 - LoadBalancer - Algorithms - Least": "",
	"Networking - Layer4 - LoadBalancer - Algorithms - Least- LeastConnections": "Directs to the server with the fewest active connections (e.g., database connections, file uploads). More efficient use of resources but requires real-time monitoring of active connections.",
	"Networking - Layer4 - LoadBalancer - Algorithms - Least- WeightedLeastConnections": "",
	"Networking - Layer4 - LoadBalancer - Algorithms - Least- LeastResponseTime": "Routes to server with lowest response time. Apps where response time is critical but requires constant monitoring.",
	"Networking - Layer4 - LoadBalancer - Algorithms - Least- LeastBandwith": "Routes to server with least network bandwidth at the moment. Useful when managing network usage is important to prevent congestion.",
	"Networking - Layer4 - LoadBalancer - Algorithms - Least- LeastPackets": "Prioritizes the server that has received the fewest packets, enhancing efficiency.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction": "A hash function determines which server should handle a request (e.g. client's IP address or session ID). Applies to scenarios where user data needs to be kept on the same server. Traditionally how the data is distributed to all these nodes was using a hash function.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Permanent": "",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Distributed": "Distributed hashing allows us to implement the hash table across multiple machines. A Distributed Hash Table(DHT) is a decentralized data store that allows us to store and retrieve data efficiently. The decentralized nature of the Distributed Hash Table allows all nodes to form the collective system without any centralized coordination.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Distributed - Properties - Decentralization": "All the nodes of the system collectively form the system without any central coordination.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Distributed - Properties - FaultTolerant": "The system is reliable(in some sense), with lots of nodes joining, leaving, and failing at all times.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Distributed - Properties - Scalable": "The system works efficiently with a large number of nodes.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Distributed - Limitations": "The scalability in the distributed hash table is static.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Consistent": "Consistent hashing is a technique that works independently of the number of servers. One of the main goals of consistent hashing is to reduce data redistribution. Consistent hashing is a popular technique used in distributed systems to address the challenge of efficiently distributing keys or data elements across multiple nodes in a network. Consistent hashing’s primary objective is to reduce the number of remapping operations necessary when adding or removing nodes from the network, which contributes to the stability and dependability of the system. ",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Consistent - How": "Consistent hashing presents a crucial solution to the challenges of distributing data across nodes in distributed systems. By utilizing a hash ring structure and deterministic mapping algorithms, consistent hashing ensures that data is evenly spread across nodes, promoting efficient load balancing and fault tolerance.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Consistent - Usage - Cassandra": "Apache Cassandra uses consistent hashing to distribute and replicate data efficiently across the cluster.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Consistent - Usage - CDN": "Content Delivery Networks(CDN) distribute contents evenly across the edge servers using consistent hashing.",
	"Networking - Layer4 - LoadBalancer - Algorithms - HashingFunction - Consistent - Usage - LoadBalancers": "Load Balancers use consistent hashing to distribute persistent connections across backend servers.",
	"Networking - Layer4 - LoadBalancer - Algorithms - ContentBased": "Distributes traffic based on the content being requested.",
	"Networking - Layer4 - LoadBalancer - Algorithms - Geographical": "Routes users to the nearest server, minimizing latency.",
	"Networking - Layer4 - LoadBalancer - Algorithms - Layer7": "Looks deeper into the request data, allowing for more intelligent routing.",
	"Networking - Layer4 - LoadBalancer - Algorithms - RequestBased": "Balances traffic according to the rate of incoming requests.",
	"Networking - Layer4 - LoadBalancer - Algorithms - DNS": "Uses DNS to distribute load among multiple servers, enhancing fault tolerance.",
	"Networking - Layer4 - LoadBalancer - Algorithms - Random": "It picks a server at random for each new request. Useful when you don't need to consider server load or differences in server capacity.",
	"Networking - Layer4 - LoadBalancer - UseCases": ".",
	"Networking - Layer4 - LoadBalancer - UseCases - HealthMonitoring": "It checks if services are alive. If one fails, it stops sending traffic there. This keeps users away from broken systems.",
	"Networking - Layer4 - LoadBalancer - UseCases - SSLTermination ": "It handles encryption at the edge. This offloads the heavy SSL work from your backend, making things faster.",
	"Networking - Layer4 - LoadBalancer - UseCases - SessionPersistence ": "It keeps users connected to the same server. Useful for logins, shopping carts, or anything that needs memory of past actions.",
	"Networking - Layer4 - LoadBalancer - UseCases - TrafficDistribution ": "It spreads requests across servers. This avoids overload and keeps response times low.",
	"Networking - Layer4 - LoadBalancer - UseCases - HighAvailability ": "If one server dies, traffic is rerouted. This keeps your app running even when parts fail.",
	"Networking - Layer4 - LoadBalancer - UseCases - Scalability": "It lets you add more servers as demand grows. No downtime needed — just plug and play.",
	"Networking - Layer4 - LoadBalancer - Tools - NGINX": "",
	"Networking - Layer4 - LoadBalancer - Tools - HAProxy": "",
	"Networking - Layer4 - LoadBalancer - Tools - AWS ELB": "",
	"Networking - Layer4 - LoadBalancer - Tools - Ribbon": "",
	"Networking - Layer4 - LoadBalancer - Tools - SpringCloudLoadBalancer": ""

}