{

	"TransactionCreation": "SECTION",
	"TransactionCreation - DefineInputs": "",
	"TransactionCreation - DefineInputs - UTXO": "In UTXO-based chains (Bitcoin, Kaspa), you specify which UTXOs to spend and new outputs to create.",
	"TransactionCreation - DefineInputs - Accounts": "In account-based chains (Ethereum, Solana), you define sender, recipient, and amount.",
	"TransactionCreation - SignTransaction": "",
	"TransactionCreation - SignTransaction - PrivateKey": "The sender signs the transaction with their private key (ECDSA/secp256k1 in most chains).",

	"TransactionPropagation": "SECTION",
	"TransactionPropagation - NodeGetTransaction": "",
	"TransactionPropagation - NodeGetTransaction - Ethereum": "In the Ethereum codebase, the part responsible for receiving new transactions from wallets is primarily handled by the Ethereum JSON-RPC API, specifically the eth_sendRawTransaction endpoint.",
	"TransactionPropagation - NodeGetTransaction - Ethereum - Geth": "The eth_sendRawTransaction method is implemented in: eth/api.go (look for SendRawTransaction).",
	"TransactionPropagation - NodeGetTransaction - Ethereum - Nethermind": "The equivalent logic is in: Nethermind/Nethermind.JsonRpc (look for EthSendRawTransaction).",
	"TransactionPropagation - NodeGetTransaction - Ethereum - Besu": "The transaction submission is handled in: Besu’s JSON-RPC API.",
	"TransactionPropagation - TransactionDecoding": "",
	"TransactionPropagation - TransactionDecoding - RLP": "The raw transaction (hex-encoded RLP) is decoded into a structured transaction object.",
	"TransactionPropagation - TransactionDecoding - RLP - Ethereum - Geth": "Code (Geth): core/types/transaction.go → DecodeRLP()",
	"TransactionPropagation - TransactionDecoding - RLP - Ethereum - Geth - Cheks": "Checks: Valid RLP encoding. Required fields (nonce, gas, signature) are present.",
	"TransactionPropagation - TransactionValidation": "",
	"TransactionPropagation - TransactionValidation - Process - SignatureValidity": "ECDSA recovery of sender address. Checks: Signature cryptographically valid. Sender address derived correctly.",
	"TransactionPropagation - TransactionValidation - Process - SignatureValidity - Ethereum - Geth": "Code (Geth): core/types/transaction_signing.go → Sender()",
	"TransactionPropagation - TransactionValidation - Process - NonceValidation": "The client checks if the transaction nonce matches the sender’s next expected nonce. Checks: Nonce isn’t too low (already used). Nonce isn’t too high (future gap).",
	"TransactionPropagation - TransactionValidation - Process - NonceValidation - Ethereum - Geth": "Code (Geth): core/txpool/validation.go → validateTx()",
	"TransactionPropagation - TransactionValidation - Process - GasLimits": "The client verifies the sender has enough ETH to cover: Transaction value (amount sent). Gas cost (gasLimit * gasPrice for legacy txs, maxFeePerGas * gasLimit for EIP-1559).",
	"TransactionPropagation - TransactionValidation - Process - GasLimits - Ethereum - Geth": "if balance := pool.currentState.GetBalance(from); balance.Cmp(tx.Cost()) < 0 { return ErrInsufficientFunds }",
	"TransactionPropagation - TransactionValidation - Process - IntrinsicGas": "The client calculates the minimum gas required for the transaction (based on payload size and opcodes). Transaction provides enough gas (tx.gasLimit >= intrinsicGas). Rejects oversized data (DoS protection).",
	"TransactionPropagation - TransactionValidation - Process - IntrinsicGas - Ethereum - Geth": "Code (Geth): core/state_processor.go → IntrinsicGas()",
	"TransactionPropagation - TransactionValidation - Ethereum": "",
	"TransactionPropagation - TransactionValidation - Ethereum - Geth - validateTx": "In Geth, this happens in: core/txpool/validation.go → validateTx()",
	"TransactionPropagation - TransactionCheckedMempoolRules": "The transaction is checked against mempool rules: Duplicate TX hash: Already in mempool? Replace-by-fee (RBF): Higher gas fee than existing TX with same nonce? Spam protection: Gas price too low? (Optional: local vs. remote TXs).",
	"TransactionPropagation - TransactionCheckedMempoolRules - Ethereum - Geth": "Code (Geth): core/txpool/txpool.go → addTx()",
	"TransactionPropagation - EVMPreCheck": "If the transaction interacts with a contract, the client runs a preliminary check: Does the to address contain code? Is the sender allowed to call the contract?",
	"TransactionPropagation - EVMPreCheck - Ethereum - Geth": "Code (Geth): core/state_processor.go → ApplyTransaction()",
	"TransactionPropagation - MempoolInsertion": "The transaction enters the mempool (pending transactions queue). If all checks pass, the transaction is added to Pending or Future Queue:",
	"TransactionPropagation - MempoolInsertion - Pending queue": "If nonce is next in sequence.",
	"TransactionPropagation - MempoolInsertion - Future queue": "If nonce has gaps (waiting for prior txs).",
	"TransactionPropagation - MempoolInsertion - Ethereum - Geth": "Geth’s TxPool prioritizes transactions by: Gas price (higher fee = higher priority). Nonce order (sequential execution per account).",
	"TransactionPropagation - MempoolInsertion - Ethereum - Geth - Codebase": "Code in: core/txpool/txpool.go → addTx()",
	"TransactionPropagation - BroadcastToNodes": "The transaction is sent to peer-to-peer (P2P) nodes via JSON-RPC or libp2p (in Ethereum/Solana). The transaction is gossiped to other nodes via the DevP2P network.",
	"TransactionPropagation - BroadcastToNodes - Protocol": "Ethereum’s eth/66 subprotocol (NewPooledTransactionHashes message).",
	"TransactionPropagation - BroadcastToNodes - Ethereum - Geth": "Code (Geth): eth/handler.go → BroadcastTxs().",

	"BlockProduction": "SECTION",
	"BlockProduction - BlockProposerPicksTransaction": "",
	"BlockProduction - BlockProposerPicksTransaction - Prioritization": "",
	"BlockProduction - BlockProposerPicksTransaction - Prioritization - GasPrice": "Gas Price Priority: Transactions are sorted by gasPrice (legacy) or maxPriorityFeePerGas (EIP-1559), with higher fees prioritized.",
	"BlockProduction - BlockProposerPicksTransaction - Prioritization - Nonce": "Nonce Ordering: Transactions from the same sender are ordered sequentially by nonce.",
	"BlockProduction - BlockProposerPicksTransaction - Miner": "",
	"BlockProduction - BlockProposerPicksTransaction - Validator": "",
	"BlockProduction - TransactionValidated": "Double-Checking Before Execution. Even if the transaction was validated when added to the mempool, it is rechecked to ensure: The sender’s nonce is still correct (no conflicting tx included earlier). The sender’s balance can still cover the gas cost. No double-spending or state conflicts.",
	"BlockProduction - TransactionValidated - Ethereum - Geth": "Code (Geth): core/state_processor.go → ApplyTransaction()",
	"BlockProduction - BlockConstruction": "The miner/validator creates a block template, selecting transactions from the pending mempool subset. The block’s total gas used must not exceed the block gas limit (e.g., 30M gas). Transactions are hashed and included in a Merkle Tree (Bitcoin) or state diff (Ethereum).",
	"BlockProduction - BlockConstruction - SmartContractExecution": "Each transaction is executed immediately (including smart contract calls) as part of assembling the block.",
	"BlockProduction - BlockConstruction - SmartContractExecution - BytecodeExecuted": "Smart Contract or Transfer If the to address is a contract, the EVM executes its bytecode. If it’s a simple transfer, the sender’s balance is debited and the recipient’s is credited.",
	"BlockProduction - BlockConstruction - SmartContractExecution - BytecodeExecuted - Ethereum - Geth": "Code (Geth): core/vm/evm.go → Call()",
	"BlockProduction - StateUpdate - Modifying": "Modifying the World State The transaction’s effects (balance changes, storage updates, etc.) are applied to the state trie. The sender’s nonce is incremented.",
	"BlockProduction - StateUpdate - Modifying - Ethereum - Geth": "Code (Geth): core/state_processor.go → ApplyTransaction()",
	"BlockProduction - StateUpdate - GasAccounting": "Fees and Refunds Base Fee (EIP-1559): Burned. Priority Fee: Paid to the miner/validator. Unused Gas: Refunded to the sender.",
	"BlockProduction - StateUpdate - GasAccounting - Ethereum - Geth": "Code (Geth): core/state_processor.go → ApplyTransaction()",
	"BlockProduction - StateUpdate - ReceiptGeneration": "A receipt is generated with: Status: 0x1 (success) or 0x0 (reverted). Gas Used: Actual gas consumed. Logs: Events emitted by smart contracts.",
	"BlockProduction - StateUpdate - ReceiptGeneration - Ethereum - Geth": "Code (Geth): core/state_processor.go → ApplyTransaction()",
	"BlockProduction - BlockFinalization": "Results are provisional until the block is finalized and propagated to the network.",
	"BlockProduction - BlockFinalization - Ethereum - Geth": "Code (Geth): miner/worker.go → commitTransactions().",
	"BlockProduction - BlockBroadcast": "The block (now including the transaction) is sealed and broadcast to the network. In PoS, the consensus client signs and propagates the block via the Engine API.",
	"BlockProduction - BlockBroadcast - Ethereum - Geth": "Code (Geth): miner/worker.go → commitNewWork()",

	"Confirmation": "SECTION",
	"Confirmation - BlockPropagation": "The block is broadcast via Ethereum's DevP2P protocol using messages like NewBlock or NewBlockHashes.",
	"Confirmation - BlockPropagation - Ethereum - Geth": "Code (Geth): eth/protocols/eth/handler.go → Handle processes incoming block announcements: handleNewBlockMsg",
	"Confirmation - BlockValidation": "Each node performs structural and consensus checks:",
	"Confirmation - BlockValidation - HeaderVerification": "Header Verification: Checks PoW/PoS signatures (pre/post-Merge). Validates block number, timestamp, gas limit, etc.",
	"Confirmation - BlockValidation - TransactionRoot": "Transaction Root: Ensures the Merkle root matches included transactions.",
	"Confirmation - BlockValidation - UncleBlocks": "Uncle Blocks (Pre-Merge): Validates uncle headers in PoW.",
	"Confirmation - BlockValidation - Ethereum - Geth": "Code (Geth): core/block_validator.go → ValidateBody() and ValidateState():",
	"Confirmation - TransactionReExecution": "EVM Replay: Each transaction in the block is re-executed by all nodes to ensure deterministic state changes. State Transition: The EVM processes smart contracts/transfers and updates the state trie.",
	"Confirmation - TransactionReExecution - Ethereum - Geth": "Code (Geth): core/state_processor.go → Process():",
	"Confirmation - StateRootVerification": "The node compares the proposed state root (in the block header) against its locally computed state root. If mismatched, the block is rejected (consensus failure).",
	"Confirmation - StateRootVerification - Ethereum - Geth": "Code (Geth): core/blockchain.go → validateState():",
	"Confirmation - BlockFinalization": "PoW (Pre-Merge): The block is added to the canonical chain if it has the most accumulated work. PoS (Post-Merge): The block is finalized after attestations from validators (via consensus client).",
	"Confirmation - BlockFinalization - Ethereum - Geth": "Code (Geth): core/blockchain.go → InsertChain():",
	"Confirmation - MempoolUpdate": "Transactions included in the block are removed from the mempool to prevent re-processing. Dependent transactions (e.g., same nonce) are evicted or repriced.",
	"Confirmation - MempoolUpdate - Ethereum - Geth": "Code (Geth): core/txpool/txpool.go → reset():",
	"Confirmation - EventsSubmission": "Nodes emit logs/events for: New block headers (ChainHeadEvent). Transaction receipts (TxReceipt). Smart contract logs (Log).",
	"Confirmation - EventsSubmission - Ethereum - Geth": "Code (Geth): core/blockchain.go → PostChainEvents():",
	"Confirmation - SyncPropagation": "Nodes serve the block to syncing peers via ETH protocol (e.g., GetBlockHeaders). Light clients fetch block headers via LES protocol.",
	"Confirmation - SyncPropagation - Ethereum - Geth": ""

}
