{
  "eUI": "SECTION",
  "eUI - Feb2010": "The eUI platform is a comprehensive suite of tools and services designed to streamline the development process of web applications. This platform provides a foundational starting point to accelerate the application development initiation phase.",

	"View": "",
  "View - Components": "",
  "View - Components - Layout": "",
  "View - Components - Layout - eui-page": "",
  "View - Components - Layout - eui-page-header": "",
  "View - Components - Layout - eui-page-columns": "",
  "View - Components - Layout - eui-page-columns resizable": "",
  "View - Components - Layout - eui-block-content": "",
  "View - Components - Layout - eui-block-document": "",
  "View - Components - Layout - eui-button-group": "",
  "View - Components - Layout - eui-card": "",
  "View - Components - Layout - eui-eui-dashboard-card": "",
  "View - Components - Layout - eui-chip": "",
  "View - Components - Layout - eui-chip-list": "",
  "View - Components - Layout - eui-dialog": "",
  "View - Components - Layout - eui-popover": "",
  "View - Components - Layout - eui-discussion-thread": "",
  "View - Components - Layout - eui-fieldset": "",
  "View - Components - Layout - eui-tabs": "",
  "View - Components - Layout - eui-table": "",
  "View - Components - Layout - eui-input-group": "",
  "View - Components - Layout - eui-chip-group": "",
  "View - Components - Layout - eui-overlay": "",
  "View - Components - Layout - eui-u-flex": "",
  "View - Components - Form": "",
  "View - Components - Form - eui-button": "",
  "View - Components - Form - eui-datepicker": "",
  "View - Components - Form - eui-autocomplete": "",
  "View - Components - Form - eui-date-range-selector": "",
  "View - Components - Form - eui-dashboard-button": "",
  "View - Components - Form - eui-disable-content": "",
  "View - Components - Form - eui-dropdown": "",
  "View - Components - Form - eui-feedback-message": "",
  "View - Components - Form - eui-file-upload": "",
  "View - Components - Form - eui-growl": "",
  "View - Components - Form - eui-icon-toggle": "",
  "View - Components - Form - eui-list": "",
  "View - Components - Form - eui-tree": "",
  "View - Components - Form - eui-slide-toggle": "",
  "View - Components - Form - eui-timepicker": "",
  "View - Components - Form - eui-input-number": "",
  "View - Components - Form - eui-input-checkbox": "",
  "View - Components - Form - eui-input-radio": "",
  "View - Components - Form - eui-input-text": "",
  "View - Components - Form - eui-select": "",
  "View - Components - Form - eui-textarea": "",
  "View - Components - Navigation": "",
  "View - Components - Navigation - eui-breadcrumb": "",
  "View - Components - Navigation - eui-sidebar-menu": "",
  "View - Components - Navigation - eui-paginator": "",
  "View - Components - Navigation - eui-wizard": "",
  "View - Components - Navigation - eui-dropdown-button": "",
  "View - Components - Navigation - eui-split-button": "",
  "View - Components - Navigation - eui-dropdown-tree": "",
  "View - Components - ReadOnly": "",
  "View - Components - ReadOnly - eui-badge": "",
  "View - Components - ReadOnly - eui-label": "",
  "View - Components - ReadOnly - eui-alert": "",
  "View - Components - ReadOnly - eui-icon": "",
  "View - Components - ReadOnly - eui-icon-svg": "",
  "View - Components - ReadOnly - eui-message-box": "",
  "View - Components - ReadOnly - eui-progress-bar": "",
  "View - Components - ReadOnly - eui-progress-circle": "",
  "View - Components - ReadOnly - eui-timebar": "",
  "View - Components - ReadOnly - eui-timeline": "",
	"View - Components - Behaviour": "",
  "View - Components - Behaviour - eui-tooltip": "",
  "View - Components - Behaviour - eui-max-length": "",
  "View - Components - Behaviour - eui-has-permission": "",
  "View - Components - Behaviour - eui-resizable": "",
  "View - Components - Behaviour - eu-truncate": "",
  "View - Externals": "",
  "View - Externals - eui-editor": "EuiEditorModule",
  "View - Externals - eui-apex-chart": "EuiChartsModule",
  "View - Externals - ngx-extended-pdf-viewer": "ngx-extended-pdf-viewer is a third party library that provides an embeddable PDF viewer that strongly resembles the PDF viewer of your browser.",
  "View - Accesibility": "",

	"Logic - Services - CoreServices": "CoreModule is responsible for preparing tokens and initializing base services of CoreModule. It has forRoot and forChild methods in order to import the module with providers. If you want to use eUI Core Services you need to call forRoot method at AppModule level. eUI CLI generated apps has it out of the box. forChild is standing there for lazy load features of eUI Core Services.",
  "Logic - Services - CoreServices - forRoot": "Calling EuiCoreModule.forRoot at AppModule and providing EUI_CONFIG_TOKEN with appConfig and environment variables will initialize your CoreModule. In the eUI generated app there is CoreModule which calls CoreModule(eUI's)'s forRoot. forRoot is responsible for preparing tokens like CONFIG_TOKEN, GLOBAL_CONFIG_TOKEN, HTTP_ERROR_HANDLER_CONFIG_TOKEN, and initializing services like LogService and StoreService.",
  "Logic - Services - CoreServices - forChild": "Calling EuiCoreModule.forChild with your custom module name which is defined in your modules configuration. You can check the Lazy load translation modules as an example of lazy load core features. forChild is responsible for preparing tokens like MODULE_NAME_TOKEN, MODULE_CONFIG_TOKEN, and initializing LogService for lazy load module, and triggering AddAppLoadedConfigModulesAction for the eUI's store services in order to react to the new configuration.",
  "Logic - Services - CoreServices - @eui/core": "",
  "Logic - Services - CoreServices - ApiQueueService": "ApiQueueService is a TypeScript service designed for managing and processing a queue of API requests in web applications. This service facilitates controlled execution of HTTP requests, allowing for orderly processing, error handling, and management of multiple requests. It includes methods for adding, processing, and removing requests from the queue, with options for sequential or bulk processing.",
  "Logic - Services - CoreServices - UserService": "",
  "Logic - Services - CoreServices - EuiLoaderService": "EuiLoaderService is an Angular service for dynamically loading external dependencies (JavaScript or CSS) into the DOM and managing their statuses. It supports loading dependencies with prerequisites, retry and timeout policies for failed loads, and emits status changes of dependencies.",
  "Logic - Services - CoreServices - EuiBreadcrumbService": "The eUI breadcrumb component has been revamped for eUI 10, moving away from the Application shell to a standalone component. The previous breadcrumbs service, which used Angular's Router injected services to parse route metadata, is no longer available. The EuiBreadcrumbService is a singleton service designed to generate breadcrumb data dynamically based on your application's routing structure and needs.",
  "Logic - Services - CoreServices - I18nService": "The eUI incorporates a modular approach for translation functionality, leveraging ngx-translate for dynamic content localization. The system is designed to support lazy loading, ensuring resource-efficient management of translation modules.",
  "Logic - Services - CoreServices - EuiPermissionService": "There are significant differences between client and Server-side applications about security and permissions topics. Server-side security for REST-based applications is Source (end-point) oriented. Client-side security is related to the user journey and business logic. There isn't %100 percentage security for Client-side web applications in terms of preventing you to call REST API or access hidden content. You have to still protect your sources even If It is hidden or blocked at the view layer.",
  "Logic - Services - CoreServices - LocaleService": "LocaleService is an Angular service responsible for managing locale states and configurations. It provides functionalities for updating the application's state based on these locales. The service is a key part of internationalization in the application, handling tasks such as language changes and locale data management.",
  "Logic - Services - CoreServices - LogService": "The CoreModule provides a LogService for logging different type of messages. The service has been developed in accordance with the best practices and terminology imposed by different logging services, like Log4j, log4javascript, typescript-logging, ionic-logging-service, etc.",
	"Logic - Services - ErrorHandling - ErrorHandler": "The CoreModule handles the Error in the Angular application at 2 levels: Javascript exceptions, Http Response errors.",
	"Logic - Services - ErrorHandling - ErrorHandler - JavascriptExceptions": "The Javascript exceptions thrown by the application at run-time are being caught by the CoreModule ErrorHandler. Currently, the handler only forwards the error to the LogService to log the error.",
	"Logic - Services - ErrorHandling - ErrorHandler - HttpResponseErrors": "The CoreModule has an Http Error Handler interceptor that will catch the Http Response from all the Http request whose status is not 200. The interceptor is in charge of either: redirects to an error page., executes a callback function. For example, it notifies the user of the error, does nothing.",

	"Data - DataFetching - HttpClientModule - HttpClient - Interceptor": "In eUI, a suite of HTTP interceptors is provided to alleviate the development workload associated with eUI applications. ",
  "Data - DataFetching - HttpClientModule - HttpClient - Interceptor - CachePreventionInterceptor": "This interceptor instructs intermediary proxies to avoid serving a cached version of a resource. It ensures that each server in the chain verifies the resource's validity. The mechanism employed by this interceptor involves modifying the HTTP headers to set Cache-Control to No-cache.",
  "Data - DataFetching - HttpClientModule - HttpClient - Interceptor - CorsSecurityInterceptor": "Sets the withCredentials options on the Ajax Request to send the JSESSIONID cookie to another domain. That is necessary when EU Login protects the other domain. Using this JSESSIONID cookie, an already authenticated user can be used to call the service.",
  "Data - DataFetching - HttpClientModule - HttpClient - Interceptor - CsrfPreventionInterceptor": "Adds a specific HTTP header to each Ajax request. That is the X-Requested-With: XMLHttpRequest. This ensures that the request is set by a piece of JavaScript code in the application. It is only possible to add request headers using JavaScript. Using normal HTML elements like iframe, img, ... therefore cannot trigger correct service requests and are blocked. This prevents dynamically-loaded content from forging a request in the name of the currently logged-in user (XSS attack). Be aware that this assumes that cross-site scripting (XSS) is already put in place, which is the default setting in Angular applications.",
  "Data - DataFetching - HttpClientModule - HttpClient - Interceptor - AddLangParamInterceptor": "This interceptor is used to add the current user language as a parameter to your request if needed. Of course, this has nothing to do with the Translation Service that we utilize. It's a standalone interceptor to provide flexibility for some API calls that need a language key to be passed.",
  "Data - DataFetching - HttpClientModule - HttpClient - Interceptor - EuLoginSessionTimeoutHandlingInterceptor": "Checks all Ajax HTTP responses for the specific EU Login HTTP response that is sent when the authentication session has become invalid. When the authentication session is invalid, we need to re-authenticate. The browser refreshes the current URL and lets the EU Login client redirect to the official EU Login page.",
  "Data - DataFetching - HttpClientModule - HttpClient - Interceptor - HttpErrorHandlerInterceptor": "In order to handle Http errors using the httpErrorHandler parameter, the HttpErrorHandlerInterceptor must be added to your project.",
  "Data - DataPersistence": "EUI storage services augment the Web Storage API, enabling local storage of key/value pairs",
  "Data - DataPersistence - Targets - InBrowser - sessionStorage": ".",
  "Data - DataPersistence - Targets - InBrowser - localStorage": ".",
  "Data - DataPersistence - Targets - InBrowser - IndexedDB": ".",
  "Data - DataPersistence - Targets - InState - Libraries - WebSQL": "",
  "Data - DataPersistence - Targets - InState - Libraries - SQLite": "",
  "Data - DataPersistence - Targets - InState - Libraries - localforage": "",
  "Data - DataPersistence - Targets - InState - Libraries - IonicStorage": "",
  "Data - DataPersistence - Targets - External - BackendAPI": "",
  "Data - DataPersistence - Services - Sync - StorageService": "StorageService functions as an abstract superclass, necessitating the provision of a concrete implementation within the CoreModule of your application.",
  "Data - DataPersistence - Services - Sync - StorageService - LocalStorageService": ".",
  "Data - DataPersistence - Services - Sync - StorageService - SessionStorageService": ".",
  "Data - DataPersistence - Services - Async - AsyncStorageService": "You can extend all our storage services. If your implementation is generic enough, please contact us and we will be happy to add it as part of the eUI base.",
  "Data - DataPersistence - Services - Async - AsyncStorageService - LocalForageService": "LocalForageService is using localforage to save key/value pairs locally, using different data stores (IndexedBD, Web SQL and/or localStorage).",
  "Data - DataPersistence - Services - Async - AsyncStorageService - IonicStorageService": "IonicStorageService is using Ionic Storage to save key/value pairs locally, using different data stores (SQLite, IndexedBD, Web SQL and/or localStorage).",
  "Data - DataPersistence - Custom": "",

	"CICD - Execution": "SECTION",
  "CICD - Execution - AppStarterService": "App Starter Service is a responsible to initialize eUI Core services, and your custom services before the application starts.",
  "CICD - Execution - Config - EuiConfig": "EuiConfig which is the model of EUI_CONFIG_TOKEN, keeps two main configurations for your app: EuiAppConfig & EuiEnvConfig EuiAppConfig is keeping your global & modules configurations, handlers etc. EuiEnvConfig is keeping the environment specific information like : how to load dynamic json config, environment specific handler config, and custom attributes.",
  "CICD - Execution - Config - EuiConfig - EuiAppConfig": ".",
  "CICD - Execution - Config - EuiConfig - EuiEnvConfig ": "."
	
}