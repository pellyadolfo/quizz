{

	"Jahia": "SECTION",
	"Jahia ": "",
	"Jahia - Actors": "",
	"Jahia - Actors - Developers": "Developers can create different types of objects, ranging from content definitions to macros used by Jahia to customize the experience for site visitors. Developers can create the following types of objects: Definitions, Rules, Actions, Templates, Scripts, Macros",
	"Jahia - Actors - Editors": "Editors log into the system and create sites, pages and other content types that are specified by developers. Editors use Jahia's Page Composer or jContent to submit content and build sites. Later, rules and actions perform logic on content. Templates, scripts and macros output the resulting HTML.",
	"Jahia - Actors - Visitors": "Visitors surf anonymously or log into the system, browse the site, and interact with any dynamic object types that editors and developers have made available to them. For example, a dynamic object could be a forum or comment list. The content that visitors contribute is called User Generated Content (UGC). Jahia uses templates, scripts and macros to render the pages for visitors. If visitors have permissions, they enter and modify content in content definitions, and rules and actions are executed on content.",

	"JahiaUI": "SECTION",
	"JahiaUI - Rendering": "Jahia views are constructed as Java Server Pages (JSP) scripts that render the node's content.",
	"JahiaUI - Rendering - Engines": "Possible to use other scripting languages covered by the JSR283 standard, such as Velocity, Freemarker, and Groovy.",
	"JahiaUI - Rendering - Engines - Engines - JSX": "React, aka ReactJS, is the Javascript framework that is used to build UI components.",
	"JahiaUI - Rendering - Engines - Engines - JSX - Moonstone": "The design system, called Moonstone provides common UI elements that can be reused in multiple places in the UI, as well as in multiple modules",
	"JahiaUI - Rendering - Engines - Velocity": "",
	"JahiaUI - Rendering - Engines - Freemarker": "",
	"JahiaUI - Rendering - Engines - Groovy": "",
	"JahiaUI - Rendering - Engines - JSP": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - JSTL - default": "By default, scripts provided by Jahia are written as JSPs leveraging Jahia and JSP Standard Tag Library (JSTL) TagLibs.",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - JSTL - Core": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - JSTL - Functions": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - JSTL - FMT": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:nodeType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:node": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:icon": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:sort": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:nodeVersion": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:link": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:nodeProperty": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:sql": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:xpath": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:jqom": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:nodePropertyRenderer": "The jcr:nodePropertyRenderer tag is used to perform an operation on a property before displaying it.",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:propertyInitializers": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:filter": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:label": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:isNodeType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:propertyTypeName": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getChildrenOfType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getDescendantNodes": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getNodes": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getParentOfType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:findDisplayableNode": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:findDisplayableNodeInSite": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getParentsOfType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getPropertiesAsStringFromNodeNAmeOfThatType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getUserMembership": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:hasChildrenOfType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:hasPermission": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:humanReadableFileLength": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getMeAndParentsOfType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:hasOrderableChildNodes": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getConstraints": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:escapeIlegalJcrChars": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:userFullName": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:labelInNodeType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getSystemSitePath": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getContributeTypesDisplay": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getContributeTypes": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:isAllowedChildNodeType": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:isLockedAndCannotBeEdited": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:findAllowedNodesForPermission": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getFirstAllowedNodeForPermission": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:isDisplayable": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:getKeywords": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - jcr - jcr:needPublication": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - query": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - search": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - functions": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - utility": "",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:param": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:module": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:include": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:gwtJahiaModule": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:layoutManagerArea": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:option": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:addResources": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:addWrapper": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:initPager": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:removePager": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:list": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:area": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:addCacheDependency": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:tokenizedForm": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:captcha": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - template - template:url": ".",
	"JahiaUI - Rendering - Engines - JSP - Taglibs - Jahia - UIComponentsLib": "",
	"JahiaUI - Rendering - Templates - Components - View": "A view determines how a content item will be rendered in HTML. A node is rendered based on its assigned View(s). If, for example, a default view is defined for jnt:news, it will be generated in /jnt_news/html/news.jsp.",
	"JahiaUI - Rendering - Templates - Components - View - Node": "each nodetype may be associated with one or several views. Different views can have different purposes:",
	"JahiaUI - Rendering - Templates - Components - View - Node - structure": "In this path, /jnt_news corresponds to the rendering folder, /html to the output format, and news.jsp to the content type default view script filename.",
	"JahiaUI - Rendering - Templates - Components - View - Node - default": "The default view is called '[type].jsp'. E.g.  jnt:news has the default view news.jsp.",
	"JahiaUI - Rendering - Templates - Components - View - Node - other": "Additional views are named using the convention: “[type].[key].jsp”, where [key] corresponds to the name given to the alternative view. If, for example,  a details view is created for jnt:news, it is named: news.details.jsp.",
	"JahiaUI - Rendering - Templates - Components - View - Properties": "",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode": "In order to display the properties of a node, a reference is used. Jahia exposes this reference in the view scope with the currentNode variable.",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode - EL": "${currentNode.properties.propertyName.format} or ${currentNode.properties['propertyName'].format}",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode - formats": "Note the following list of available output formats for displaying properties within a View.",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode - formats - Text": "${currentNode.properties.textProperty.string}",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode - formats - Integer": "${currentNode.properties.integerProperty.long}",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode - formats - Decimal": "${currentNode.properties.decimalProperty.double}",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode - formats - Boolean": "${currentNode.properties.booleanProperty.boolean}",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode - formats - Date": "${currentNode.properties.dateProperty.time}",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode - formats - WeakReference": "${currentNode.properties.referencePropertyName.node}",
	"JahiaUI - Rendering - Templates - Components - View - Properties - currentNode - formats - ChoiceList": "Properties loaded directly from Choicelist Properties remain raw values.",
	"JahiaUI - Rendering - Templates - Components - View - Mixin": "Mixins can have views",
	"JahiaUI - Rendering - Templates - Components - View - Storage": "Views are stored in Jahia modules, under the path src/main/resources.",
	"JahiaUI - Rendering - Templates - Components - View - Sources": "Views are dynamic and can display content from various sources.",
	"JahiaUI - Rendering - Templates - Components - View - Nesting": "Views include other views to optimize code reusability.",
	"JahiaUI - Rendering - Templates - Components - View - Multiple": "Several views can be attached to the same content type.",
	"JahiaUI - Rendering - Templates - Components - View - Dynamic": "Dynamic content is aggregated along with the HTML on the server-side, and fetches data from the database.",
	"JahiaUI - Rendering - Templates - Components - View - Dynamic - EL": "Content can be displayed in a View by using the Java Expression Language (EL).",
	"JahiaUI - Rendering - Templates - Components - View - Dynamic - JSTL": "JSTL, or Java Standard Tag Library is used to call functions of any sort, including conditional structures, String and Date manipulation. They can also be used to call one of the many APIs exposed by Jahia, such as the query API or the search API.",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets": ".",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle": ".",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle - Create": ".",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle - Create - Template": "Template: a template is a blueprint that will be used when creating or displaying a page to visitors. The page will then inherit certain properties defined at the template level (layout, page structure, menus, additional static or dynamic content…). Thus templates guide and fasten the editorial team work. There can be simple templates just defining where the header, the footer and the menu will appear in the page then leave a central place for the page-specific content, while other templates can come with a more complex page structure with multiple columns, and predefined items. A page created in Jahia is always based on a template. ",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle - Create - Template - PageTemplate": "Page template: Templates that can be applied when manually creating a new page.",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle - Create - Template - ContentTemplate": "Content template: Content Templates is a Jahia specific and powerful feature. It ensure that a templates can be applied to any content type. For instance, a blog article may have a content template so that a blog post can be rendered as a complete HTML page without having to manually create that page. As long as a content template has been defined for the blog content-type, the editors don’t have to think about the site map, all the blog posts will be accessible by default in full page with this template. The blog article in this case is reffered as the “main resource”.",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle - Create - Template - Types": "",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle - Create - Template - Types - JSP": "",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle - Create - Template - Types - JSX": "",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle - Deploy": "Deploying a template set means that you make the template set available for creating new web sites.",
	"JahiaUI - Rendering - Templates - Layouts - TemplateSets - Lifecycle - Deploy ": "The template set could have been created on a separate Jahia instance dedicated to development, or it could have been downloaded from a public or private module store.",
	"JahiaUI - Rendering - Templates - Layouts - Area": "Area: an area is a subpart of a page that has been specified by developers at the template level with a given name. The purpose of an area is to hold content, in other words it’s a placeholder. An area can not be moved, its position in the page is fixed and defined once for all at the template level. An area can be editable or not, it depends how the developers have defined its behavior. For instance the area that contains the menu is generaly not editable, as it is supposed to display automaticaly the navigation menu of the current site. Also there can be areas that are filled automaticaly with content: for instance a News or Press releases list, will display all the news or press releases existing in the web site, thanks to a query. In that case an editor will not be able to edit the list directly, but if he adds a new News item or a Press release item, this particular content will show-up in the list automaticaly baseed on the settings defined for the site. On the other hand in the central part of a page, there can be multiple areas configured to receive content manually inputed by the editors. For each area a specific setup may have be defined to apply a certain layout or allow any type of content or only some specific type of content. Also the number of items displayed in a area can be limited, or not, at the template level.",
	"JahiaUI - Rendering - Templates - Layouts - Forms": "Forms is an enterprise add-on application that works with jContent and jExperience to allow users to create and publish forms, include forms in pages and content, and view, analyze and map the resulting data.",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Data": "Form data is stored in the Jahia content repository or jCustomer, the Jahia customer data platform.",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Features": "Forms are easy to embed in your site and applications. They offer:\n\n    Out-of-the-box fields and conditional display\n    Multistep form flows\n    Multilingual support\n    Validation rules, help text, and error messages\n    Progressive profiling\n    CSS styling\n    Prefill, user tracking, and progress bars\n",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Areas": "Functionality is split in 3 key areas and users must be given the appropriate role or permission to access: FormBuilder, FormComponents, FormResults",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Areas - FormBuilder": "Form Builder interface and monitoring software",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Areas - FormComponents": "Form components for adding the forms to a page or application",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Areas - FormResults": "Form results to view and analyze or map fields to jExperience profiles",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Roles": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Roles - FormEditor": "May create and execute forms and workflows",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Roles - FormManager": "May create, publish, and manage configurations, and view results",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Roles - FormResultsAnalyst": "May view the results of forms",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Roles - FormResultsAdmin": "May delete results of all forms",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Roles - FormReviewer": "May review form definitions and publish",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Permissions": "Forms also includes edit and view results permissions that you can apply to individual forms.",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Permissions - CanEditForm": "May edit the form",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Permissions - CanViewResults": "May view form results for the form",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Fields - ImageCheckbox": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Fields - FieldSets": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Fields - RichText": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Fields - Numeric": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Fields - FileUpload": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Fields - Validation": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Fields - Remembering": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - MultiColumn": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - MultiStep": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - MultiLingual": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Submit": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Submit - Settings": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Submit - ReCaptcha": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Submit - Choose": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Submit - ToJCR": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Submit - ToElastic": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Create - Confirmation": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Import": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Export": "",
	"JahiaUI - Rendering - Templates - Layouts - Forms - Lifecycle - Preview": "",
	"JahiaUI - Rendering - Templates - Layouts - Page": "Page: a page is an entity accessible through a unique url (a web address) that can display various ressources like texts, images, forms, links, etc., with a layout that defines the visual output of all those content items.",
	"JahiaUI - Rendering - Templates - Layouts - Page - PageComposer": "Page Composer helps you to organize and layout your content on sites with easy-to-use components and plug-ins. Built-in real-time preview makes it easy to see how each change affects your pages as they are developed.",
	"JahiaUI - Rendering - Templates - Layouts - Page - PageBuilder": "Included into jContent is Page Builder. Page Builder is the new visual editing interface to manage your sites and pages, similar to Page Composer but faster and more streamligned. For more information, see Overview of Page Builder. Page Builder has been introduced with Jahia 8.2.",
	"JahiaUI - Rendering - Templates - Layouts - Page - PageModels": "When creating new pages for a site, you may want to reuse an already existing arrangement of lists and content on each page. You can select the Set this page as Page Model option on a page to make the page available as a Page Model for users to choose when creating a new page. The new page will contain all the content from the Page Model. A page model can be used like a refined page-template",
	"JahiaUI - Rendering - Templates - Layouts - Page - PageModels - Create": "To use a page model, first create a page with the content that you want to include in the page model. To create a page model:\n\n    Open the page in Content Editor by right-clicking the page and selecting Edit. \n    In Content Editor, select Options>Set this page as Page Model. Enter the following information:\n        Page Model name\n        Enter a name. The name displays in the list of templates that are available when you create a new page.\n        Check this to copy all sub pages (optional)\n        Select this option to create subpages when a new page is created from the page model.",
	"JahiaUI - Rendering - Templates - Layouts - Page - PageModels - Remove": "To delete a page model, open the page or the page model in Page Composer and clear the Set this page as Page Model option.\nNote: Be careful with Delete- Option on Page Models option. If you delete the page model in jContent>Additonal>Page models this will also mark the original page as deleted. When you delete a page which is marked as page model, the page model is not available any more. However, pages you previously created based on the page model are preserved.",
	"JahiaUI - Authoring": "Jahia offers two primary paths to creating and publishing content.",
	"JahiaUI - Authoring - Types - PageBased": "In-context editing (also called Page-Based authoring) Traditional authoring and publishing focuses on building and developing pages for each digital channel, rather than creating modular content items that can be reused across multiple channels. Page authoring relies on Page Composer or Page Builder to create content and apply layout on those content. Page Composer and Page Builder are built for users who want to work with prebuilt templates and themes or who are creating standalone pages and sites.",
	"JahiaUI - Authoring - Types - FolderBased": "Content reuse across several pages, websites or applications can be much more efficient when content is simply organized in folders (by date, by topic, by target…), and not directly created inside pages. Jahia allows to create any type of content and store them into folders, this content being included later on in the different pages where it should appear. Another benefit of inputting content this way is the ability to easily put in place automated retrieving and sorting. If you have a content folder, it is easy from a page or an application, using a reference, to select this folder and specify that you wan’t to display all items included in it. Doing so, if another editor add some content in the selected folder, it will show up everywhere it has been referenced, without any human intervention. If your Jahia platform is used by dozens of collaborators and is used to manage multiple websites, using folder-based approach is certainly something to consider. Finaly content items in content folders can be called through API and distributed, reused or repurposed at will.",
	"JahiaUI - Authoring - Tools - DeveloperTools": "",
	"JahiaUI - Authoring - Tools - DeveloperTools - Studio": "",
	"JahiaUI - Authoring - Modes": "",
	"JahiaUI - Authoring - Modes - Headless": "",
	"JahiaUI - Authoring - Modes - Edit": "",
	"JahiaUI - Authoring - Modes - Preview": "",
	"JahiaUI - Authoring - Modes - Live": "",
	"JahiaUI - Publishing": "",
	"JahiaUI - Publishing - jContent": "jContent provides a single interface for editors to create and organize pages, content and files. jContent is the central place for managing all of your content, it’s your first stop for uploading, modifying, repurposing, and publishing content that you plan to use across your various pages and channels.",
	"JahiaUI - Publishing - jContent - Extending - AddingActions": "",
	"JahiaUI - Publishing - Links - VanityURLs": "",
	"JahiaUI - Publishing - Links - LinkChecker": "The link checker is a powerful administration tool that allows site administrators to check an entire Jahia site for \"dead\" or broken external links. An external link is a link pointing to pages outside the platform, therefore outside of Jahia’s control. You open the link checker from jContent>Additional>Link checker.\n\nTypically, an external link is prone to become \"broken\": the author may have mistyped the link (e.g. goggle.com instead of google.com) or the target page may simply disappear, change name or location after some time.\n\nThe link checker will browse all Jahia pages for external links submitted by authors, including content entered through the rich text editor. Then it will display a report that will help the site administrator to fix broken links. The tool will scan all pages in the selected mode, for all languages.\n\nTo launch the scan, just click on the \"Start checking\" button, then on the \"Display progress\" button to view the results. The page will refresh automatically every 5 seconds. The \"Clean stored results\" button will clear older results before launching a new scan.",
	"JahiaUI - Publishing - Translating - GlobalLink": "Translations.com is a world-leading translation company that provides professional services including website translation. Translation is performed manually by a group of professionals proficient in different languages. GlobalLink is Translations.com system for managing multilingual content.\n\nAs a content editor, you submit translations requests in Jahia to GlobalLink. Requests are received and translated by Translations.com and returned to Jahia. After receiving content, you review it and publish it to make it available to your site visitors. This topic shows you how to create a GlobalLink translation request from Page Composer or jContent and view the status of your requests before publishing.",
	"JahiaUI - Publishing - Search": "Allows you to search occurrences of a term in your site and replace it with the desired one.",
	"JahiaUI - Publishing - Search - Classifying": "The classification tools listed below are built in Jahia.",
	"JahiaUI - Publishing - Search - Classifying - Tools": "",
	"JahiaUI - Publishing - Search - Classifying - Tools - TagManager": "The Tag Manager gives you an overview of all tags on the site and allows for counts and renaming. You access the Tag manager from jContent>Additional>Tag manager",
	"JahiaUI - Publishing - Search - Classifying - Tools - TagManager - Tags": "A simple and straightforward way to classify any content. A tag is a label that you use to describe your content and make it searchable.",
	"JahiaUI - Publishing - Search - Classifying - Tools - TagManager - Tags - Lifecycle - Add": "You can add tags to pages, content, and images.",
	"JahiaUI - Publishing - Search - Classifying - Tools - TagManager - Tags - Lifecycle - Autotagging": "Autotagging enables you to leverage Amazon Rekognition services to automatically tag images when you upload them to your sites.",
	"JahiaUI - Publishing - Search - Classifying - Tools - TagManager - Tags - Lifecycle - Autotagging - Images": "Autotagging is a service provided by Amazon Rekognition that uses machine learning to identify objects in your images. Jahia then applies the tags to your images. Depending on how your site has been configured, images are automatically tagged when you add them to your site. Alternatively, you apply autotagging to individual images. \nBefore using autotagging feature, you need to ask a developer or system administrator to install and configure the module. For more information, see Installing and configuring Autotagging.\n\nWhen autotagging is configured to tag all new images, the number of tags added to your image displays when you upload, as shown here in jContent>Media.",
	"JahiaUI - Publishing - Search - Classifying - Tools - TagManager - Tags - Lifecycle - Rename": "From the tag list, you can rename a tag.",
	"JahiaUI - Publishing - Search - Classifying - Tools - TagManager - Tags - Lifecycle - Delete": "You can delete tags that you no longer require.",
	"JahiaUI - Publishing - Search - Classifying - Tools - CategoryManager": "The Category Manager and hierarchies give you additional flexibility for representing a classification structure. Categories are created or edited in Category Manager.",
	"JahiaUI - Publishing - Search - Classifying - Tools - CategoryManager - Categories": "Categories are taxonomy terms or concepts that classify content. Categories are assigned to contents using the Categorized option when editing content.",
	"JahiaUI - Publishing - Search - Classifying - Tools - CategoryManager - Categories - Tree": "Categories are organized in a tree, a category can have subcategories.",
	"JahiaUI - Publishing - Search - Classifying - Tools - CategoryManager - Categories - Shared": "The categories are shared by all the sites of the platform, and by default visible by all the contributors. It is possible to hide categories from users or groups",
	"JahiaUI - Publishing - Search - Classifying - Tools - CategoryManager - Categories - Lifecycle - Create": "To create a category, simply open the contextual menu of an existing category, click New category and fill the form in Content Editor:\n\n    Title\n    This is the \"functional\" name of your category, the one you will see in the different screens of Jahia. You can provide a different title per language.\n    System name\n    This is the technical name of your category, it is the same for all language. Despite being technical, it is advised to make it meaningful, and to avoid spaces (replace them by dashes '-' and special characters). \n",
	"JahiaUI - Publishing - Search - Classifying - Tools - CategoryManager - Categories - Lifecycle - Edit": "To edit a category, open Content Editor:\n\n    Via its contextual menu\n    By clicking on the icon displayed when hovering on a category\n\nYou can then change its title in the different languages.",
	"JahiaUI - Publishing - Search - Classifying - Tools - CategoryManager - Categories - Lifecycle - Restrict": "If you want a category to be only visible by a group of users, you edit the category and in the Live roles tab:\n\n    Remove the reader role to “Guest user” and “users”\n    Give the reader role to your group, using “Add new groups”\n    Save\n\nThis way, only the members of your group will be able to use the category when editing their contents.",
	"JahiaUI - Publishing - Search - Classifying - Tools - Keywords": "Usually applied at the page level or for content that can be displayed as a full page. Historically used for SEO.",
	"JahiaUI - Publishing - Search - Classifying - Tools - Interests": "Used for customer segmentation, scoring, and personalization. Interests are provided by jExperience.",
	"JahiaUI - Publishing - Search - Classifying - Tools - Custom": "You can also create a custom property and use it classify your content. Before creating a new property, consider the use cases and criteria described on this page to define it in the best possible way.",
	"JahiaUI - Publishing - Search - JCRSearch": ".",
	"JahiaUI - Publishing - Search - ElasticSearchProvider": ".",
	"JahiaUI - Publishing - Search - AugmentedSearch": "Augmented Search is a new and improved enterprise extension for Jahia to help you provide your website visitors with a modern search experience.",
	"JahiaUI - Publishing - Search - AugmentedSearch - 7.3+": "Available with Jahia 7.3.x and Jahia 8, the Augmented Search module replaces the ElasticSearchProvider.",
	"JahiaUI - Publishing - Search - AugmentedSearch - ES": "Built on Elasticsearch 7.x, Augmented Search  is designed to help you drive more conversions with a first class search experience for your visitors\n\n    Instant search\n    Dynamic faceting (term, range)\n    Fuzzy matching\n    Filtering\n    Sorting\n",
	"JahiaUI - Publishing - Search - AugmentedSearch - UI": "Before using Augment Search UI, you must install and configure Augmented Search. The Augmented Search UI module must be enabled on your site for you to be able to use it. For more information on enabling the module, see Installing a module tutorial. Once enabled, you will find the Augmented Search component in your component list. For information on how to install, configure, and develop Augmented Search, see the developer section starting with Augmented Search overview and architecture.",
	"JahiaUI - Publishing - Publication": "The Site Settings - Publication module offers an easier way of publishing large sites or sections of site.",
	"JahiaUI - Publishing - Publication - Status": "You can use the previous screen  “Show last publication status” to see the results of the previously started publications",
	"JahiaUI - Publishing - Publication - Status - Successful": "Publication was successful",
	"JahiaUI - Publishing - Publication - Status - Nothing": "Nothing to publish",
	"JahiaUI - Publishing - Publication - Status - NotExecuted": "Publication was not executed",
	"JahiaUI - Publishing - Publication - Notification": "If the email notifications are set on the server, then the user who started a publication using the Site setting publication module will receive an email notifying him on the status of the publication",
	"JahiaUI - Publishing - Publication - Scheduling": "As a content contributor, you can plan the publication date of content. You specify the date and time that you want to publish in the Publication dashboard.\n\nScheduled publication separates validation from publication. Content contributors can trigger the publication of their content once it has been validated by a reviewer.",
	"JahiaUI - Publishing - Publication - Workflow": "These publication requests follow publication workflows.",
	"JahiaUI - Publishing - Publication - Workflow - jBPM": "Jahia integrates the jBPM 6 workflow engine. The engine provides support for advanced workflow integrations through the definition of workflows, using the standardized Business Process Model and Notation (BPMN) 2.0 specification. Jahia's UI is integrated with the workflow screens allowing end-users who never have to leave the UI to perform workflow operations (unless integrators wish to, of course). It is also compatible with any jBPM compatible GUI workflow definition tools, such as the web-based JBPM Designer or the Eclipse plugin. Note that these additional components must be installed and deployed by the integrator as they are not part of the Jahia core.",
	"JahiaUI - Publishing - Publication - Workflow - Request": "",
	"JahiaUI - Publishing - Publication - Workflow - Review": "reviewer validates the publication or reject it.",
	"JahiaUI - Publishing - Publication - Workflow - Validate": "The available actions on the workflow are available in the bottom right of the screen. In the above example, the user can publish the content or reject the publication, by clicking Publish or Reject publication.",
	"JahiaUI - Publishing - Reports": "Contents reports are reports that you can generate to monitor and troubleshoot your content.",
	"JahiaUI - Publishing - Reports - Lifecycle": "You generate content reports in jContent>Additional.",
	"JahiaUI - Publishing - Reports - Lifecycle - Generate": "You generate content reports in jContent>Additional.",
	"JahiaUI - Publishing - Reports - Types - ContentStatus": "Find out who created and modified content, view content references, content marked for deletion and content in work in progress or workflow status",
	"JahiaUI - Publishing - Reports - Types - ContentStatus - ByAuthor": "Shows the pages and content created or modified by a certain user during a specific date range.",
	"JahiaUI - Publishing - Reports - Types - ContentStatus - ByDate": "Shows the pages and content created or modified by a certain user during a specific date range.",
	"JahiaUI - Publishing - Reports - Types - ContentStatus - References": "Lists the content references on a site. When you run the report, you specify the site in which references occur against the site in which references originate.",
	"JahiaUI - Publishing - Reports - Types - ContentStatus - WorkInProgress": "Lists content that is marked as work in progress. You can show pages only or all content types that are marked as work in progress and run the report against your entire site or under a branch of it.\n\nThe report shows the name, content type, status and path to the content. The following example shows pages that are marked as work in progress.",
	"JahiaUI - Publishing - Reports - Types - ContentStatus - Workflows": "Lists content currently in a workflow process. The report shows the content type and path, as well as when the workflow started.",
	"JahiaUI - Publishing - Reports - Types - ContentStatus - MarkedForDeletion": "Lists content that is marked for deletion. Content marked for deletion is still in the system and can be undeleted. Learn more about content deletion in Jahia. You can show pages or all content types that are marked for deletion and run the report against your entire site or under a branch of it.",
	"JahiaUI - Publishing - Reports - Types - Language": "Show content with missing titles or untranslated content.",
	"JahiaUI - Publishing - Reports - Types - Language - PagesWithoutTitle": "Lists the pages that do not have a title in one of the site languages. A page without a title cannot be published in that language. In the following example, pages only have titles in the English version of the site.",
	"JahiaUI - Publishing - Reports - Types - Language - UntranslatedContent": "Lists the pages and content which have not been translated into the language that you specify. You can limit results to a subsection of the site.",
	"JahiaUI - Publishing - Reports - Types - Metadata": "Show pages without keywords or descriptions",
	"JahiaUI - Publishing - Reports - Types - Metadata - PagesWithoutKeywords": "Lists pages in your site that do not contain keywords. You can click a link in the Page Path column to navigate to a specific page.",
	"JahiaUI - Publishing - Reports - Types - Metadata - PagesWithoutDescription": "Lists the pages which do not have a description in one of the site languages. You can click a link in the Page Path column to navigate to a specific page. In the following report, translations are missing in the German (de) version of the site. ",
	"JahiaUI - Publishing - Reports - Types - System": "Find out what content that is locked, has custom cache settings, ACL inheritance overrides and also generate a site overview report",
	"JahiaUI - Publishing - Reports - Types - System - LockedContent": "Lists content which is currently locked. You can sort locked content by type, author, and by the user who locked the content. You can click the link in the Path column to open the page with locked content.",
	"JahiaUI - Publishing - Reports - Types - System - CustomCacheContent": "Lists content that has custom cache expiration enabled. This report is more administrators.",
	"JahiaUI - Publishing - Reports - Types - System - ACLInheritanceBreak": "Lists content where Access Control List (ACL) inheritance has been overridden.  This report is more administrators.\n\nACL is overridden by editing a content item and selecting Edit roles>Break all inheritance.",
	"JahiaUI - Publishing - Reports - Types - System - SiteOverview": "Provides the number of pages in a site, modules enabled on the site, and site users created.",

	"JahiaComm": "SECTION",
	"JahiaComm - Components - GWT": "Historically, Jahia’s UI was built using the GWT toolkit, but it is now being phased out.",
	"JahiaComm - Components - GraphQL": "GraphQL, is the communication layer between the client and server applications. Jahia’s functionality is available through the GraphQL API, making it easy for developers to offer similar functionality to the built-in ones when building their solutions.",

	"JahiaServer": "SECTION",
	"JahiaServer - BusinessLogic - Workflows": "Jahia integrates the jBPM 6 workflow engine. The engine provides support for advanced workflow integrations through the definition of workflows, using the standardized Business Process Model and Notation (BPMN) 2.0 specification. Jahia's UI is integrated with the workflow screens allowing end-users who never have to leave the UI to perform workflow operations (unless integrators wish to, of course). It is also compatible with any jBPM compatible GUI workflow definition tools, such as the web-based JBPM Designer or the Eclipse plugin. Note that these additional components must be installed and deployed by the integrator as they are not part of the Jahia core.",
	"JahiaServer - BusinessLogic - Rules": "Often, as content is modified, integrators need to perform a specific action when an event occurs. With Jahia, it is possible to write event listeners in Java classes or in JSP files, or even Groovy scripts. Another simpler format is also available based on JBoss Drools.",
	"JahiaServer - BusinessLogic - Spring - deprecated": "",
	"JahiaServer - BusinessLogic - Spring - deprecated - motivation ": "Spring and OSGi can’t really work well together. When building a project using Spring framework, you use one Spring Context. Inside a Spring Context, there is only one classLoader available, meaning that only one version of a class can be loaded. This simple limitation is impossible to overcome and has strong consequences: The platform would always come with its own context, that you'd need to reuse; and if the platform vendor embeds some library, developers building modules/plugins will need to use the same version of that library. This would quickly become very hard to live with, especially during migrations\n\nIt is also possible to use several Spring Contexts within the same application, but then you'll face another issue: you won't be able to easily share objects/data between these contexts. So, if you need to reuse a service layer across different parts of your application, you won't be able to. ",

	"JahiaStorage": "SECTION",
	"JahiaStorage - RepositoryExplorer": "",
	"JahiaStorage - JCR": "",
	"JahiaStorage - JCR - ContentType": "A specific structure composed of multiple fields that will hold actual content. You declare a new content type in a single line.",
	"JahiaStorage - JCR - ContentType - ContentTypeDefinition": "A content type definition is a declaration that defines the structure (made of simple properties or child objects) of a content type.",
	"JahiaStorage - JCR - ContentType - ContentTypeDefinition - .cnd": "A content type definition is stored in a CND file. A content type definition is defined in a .cnd definition file that is typically named definitions.cnd. CND stands for Compact Namespace and Node Type Definition and is an Apache Jackrabbit standard.",
	"JahiaStorage - JCR - ContentType - Namespace": "A definition is identified by a namespace and a name [namespace:name]. The namespace ensures that your content definition does not conflict with other content definitions. Your namespace must be unique.\n\nThe namespace syntax consists of a prefix and URI pair. < ns = 'http://namespace.com/ns' >",
	"JahiaStorage - JCR - ContentType - Namespace - Default": "While Jahia provides by default some basic and advanced content-types",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < j >": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < nt >": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < nt > - base": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt >": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - content": "All content types should inherit from this content definition to be compatible with Jahia.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - contentList": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - area": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - absoluteArea": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - childNodeDefinition": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - templatesFolder": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - pageTemplate": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - template": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - page": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - virtualsite": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Layout - workspaceSwitch": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - contentFolder": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - editableFie": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - systemRoot": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - folder": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - file": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - fileUpload": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - post": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - query": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - user": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Form - group": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Navigation - componentLink": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Navigation - externalLink": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Navigation - externalLinkImageReference": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Navigation - nodeLink": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Navigation - imageReferenceLink": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Navigation - navMenu": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - ReadOnly - text": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - ReadOnly - bigText": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - ReadOnly - navMenuText": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - ReadOnly - topic": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - ReadOnly - imageReference": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - ReadOnly - imageReferenceDisplay": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Behaviour - manageRoles": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Behaviour - simpleWorkflow": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Behaviour - propertyDefinition": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Behaviour - mixinNodeType": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Behaviour - primaryNodeType": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Behaviour - nodeType": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Behaviour - nodeLinkImageReference": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < jnt > - Behaviour - translation": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Components - < fcnt >": "",
	"JahiaStorage - JCR - ContentType - Namespace - Update": "If you think that a content-type if too limited (one or several fields or options are missing) or too complex (some fields are of no use), you can always go back to your development team and ask for an update.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom": "You declare a new content type in a single line. A definition is identified by a namespace and a name [namespace:name], as shown in the following example.\n\n[cnt:mainContent]",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - declare - []": "Note that you use square brackets ([ ]) to declare new content types.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property": "A property is a data field. Properties are defined for each nodeType in its definition declaration. Properties can be compared to fields in a database.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Structure": "property_name (type, selector [options])",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Type": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Type - string": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Type - boolean": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Type - date": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Type - double": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Type - long": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Type - weakreference": "reference to a node in the JCR, date, double, long",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Selector": "interface that displays to authors for the property. Property can support different selectors.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Selector - string": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Selector - string - textarea": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Selector - string - richtext": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Selector - string - choicelist": "not compatible with decimal values.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Selector - string - color": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Selector - date": "",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Selector - date - datetimepicker": "Single line field and a calendar for selecting the date and time.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Selector - date - datepicker": "Single line field and a calendar for selecting the date.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords": "myfield (type) keyword.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - multiple": "Allows the property to hold multiple values. This keyword is available for strings, longs, doubles and weakreferences",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - internationalized": "Defines an international property. This means that the property can have a different value for each language.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - i18n": "internationalized.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - hidden": "Hides the property from the Jahia editing interface. This value can only be updated or read programmatically.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - protected": "Prevents users from updating the property through the Jahia editing interface. The property displays as read-only in the interface. This value can only be updated programmatically.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - autocreated": "Forces the creation of the property with either a default or a blank value, if no default value is provided in the definition. A property does not exist until it has been created.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - orderable": "Allows content editors to manually order the child nodes of the current node. It is applied at the content type level, rather than on the property.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - primary": "Makes the property a label for the node when browsing the JCR.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - mandatory": "Makes the property mandatory.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - Indexing - indexed=no": "Content is not indexed.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - Indexing - nofulltext": "Content is indexed, but ignored when a full text search is performed.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - Indexing - boost=2.0": "Assigns a larger weight to the property in the indexes. You can specify a value from 1 to 5 where 5 indicates the highest weight.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - Indexing - analyzer=keyword": "Indexes content word-by-word instead of the entire field as an entity.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - Keywords - Indexing - facetable": "Allows faceted search.",
	"JahiaStorage - JCR - ContentType - Namespace - Custom - Property - ChildNode": "Definition files also support child node properties. The following table and example show how to specify child nodes for a property.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < mix >": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < mix > - title": "Allows automatic synchronization of the System name field with the Title field jmix:mainResource Used to declare content types that can be displayed in full page for the visitors. It is used by: The latest sitemap module, to list content items that can be displayed in full page in the sitemap (and not just jnt:page) The latest vanity URLs module (site-settings-seo), to display vanity URLs options jExperience, to display the interests field and page analytics Augmented Search to determine the indexedMainResourceTypes",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix >": "Mixins are abstract data types",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Structure": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Structure - properties": "Mixins provide a set of properties. A mixin can also define no property at all and can only serve as a flag to be applied on specific content types.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Structure - child": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Key": ".",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Key - editorialContent": "Makes the content available in the jContent interface (it also enables content versioning).",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Key - droppableContent": "Component categories inherit from this mixin (see Category mixins for more information).",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Key - list": "Defines a list component. It provides built-in list mechanisms to the component..",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Key - mainResource": ".",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category": "To make a content type available to editors, you apply a category mixin. Category mixins allow you to group your content definitions in different categories. Jahia provides different categories out-of-the-box and also allows you to create your own.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category - basicContent": "Displays the content type in Content:Basic category.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category - multimediaContent": "Displays the content type in Content:Multimedia category.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category - structuredContent": "Displays the content type in Content:Structured category.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category - formContent": ".",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category - socialContent": ".",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category - layoutComponentContent": ".",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category - listContent": "Displays the content type in the Lists category.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category - siteComponent": "Displays the content type in the Site Components category.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Category - queryContent": "Displays the content type in the Form Components category.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Other": ".",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Other - hiddenNode": "The node will not appear in Jahia managers.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Other - studioOnly": "Flags a component for use only in Studio.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Other - cache": "Allows the editor to manually configure the cache for the generated fragment.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Other - bindedComponent": "Defines a bound component, which is a component designed to interact with other components.",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Other - link": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Other - list": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Other - navMenuItem": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < jmix > - Types - Other - nodeReference": "",
	"JahiaStorage - JCR - ContentType - Namespace - Default - Mixins - < fcmix >": "",
	"JahiaStorage - JCR - ContentItem": "Content-item: a generic term to designate a piece of content, whatever its type. Sometimes we will talk about more specific items like a Press Release item, which is a piece of content of the content-type 'Press Release'.",
	"JahiaStorage - JCR - ContentItem - Types": "",
	"JahiaStorage - JCR - ContentItem - Types - ContentReference": "Content-reference: a content reference is not a content in itself, it’s a method to point to a content that is not local (not a child of the page) and display it in the page. While working with Jahia CMS editors will use references, for instance, to point at an image and display this image in the page, or select a content that already exist somewhere on their platform and therefore display it in the page without duplicating the content. The major benefit of using references is that when the source content is updated and published, the changes will impact all the places where this content is referenced. To, summerize, at the heart a reference is an alias.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Definitions": "Content definitions define the type of objects that are edited in the system as well as their structure. These may range from simple properties to complex sub-tree structures.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Rules": "Rules define what to execute (similar to actions) when a certain condition is met. For example, a rule can listen for modifications on content objects, such as a page creation, and trigger execution of code.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Actions": "Actions are similar to method calls, except that they are usually called from an AJAX or HTTP POST request. Developers can use existing actions, such as createUser or startWorkflow, or define their own custom actions. You can use actions to perform almost any task in the Jahia back-end from a remote request.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Templates": "Templates define the page and content layouts that users use to create pages or display content elements, such as a news entry. You define templates in Jahia Studio. Templates can be packaged in template sets and deployed to any web site, or moved from staging to production environments. Template sets can even contain default content, which is useful to create powerful site factory scenarios.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Templates - PageTemplates": "Page templates define the layout of a page and are the default template type. Editors specify the template to use when they create a new page. Building structured templates targeted to a specific site vertical helps site administrators to ensure that sites have a coherent structure and look, and makes it easy to make changes later on. Page templates (and content templates) may also inherit from a parent template. For example, you can have a base template with a free structure, and then inherit from it to build templates that have more rigid structures.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Templates - ContentTemplates": "Content templates are used when a URL requests a content object other than a page type. A content template enhances a content type by adding navigation, headers, footers, or other page elements around the rendered content object. In a content template, you associate the template with a list of types for which it should be used in Jahia Studio. You can use content templates with master and detail views, where the master list of objects display on a page, and the detail view is a single content object rendered using a content template. For example, assume you have news articles in your definitions and want to display a single news article in an HTML page. You could create a home page that lists the last ten news articles, with links to a news article detail view for each article and the details and subobjects attached to it. The home page would be rendered using the page template and the news article detail would be rendered using a content template associated with the news article type.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Templates - JahiaStudio": "Templates are defined inside the content repository and you edit them in Jahia Studio. A template is a set of nodes that define the layout of a page and enables users with low scripting or HTML experience to edit or update existing templates. Note that Studio is a development tool that contains advanced features and code editing capabilities. It is not recommended to give non-technical users access to Studio without training. Advanced users with strong JCR skills could export a template as XML, edit it, and import it back into Jahia.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Scripts": "Scripts render a specific content object type. The default script type is JSP, and Jahia supports any Java Scripting API (www.jcp.org/en/jsr/detail?id=223) compatible script language (for example Velocity, Freemarker, or even PHP). Multiple scripts may be provided for a single node type. These are called views in Jahia.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Macros": "Macros modify the final output of a Jahia page. Macros execute even if a page is retrieved from the HTML cache and can be used to quickly customize page output. There are some performance considerations as macros are constantly executed; they must always execute quickly.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Macros - default": "Jahia offers a few default macros such as: Constants stored in a node property display, Form token generation to prevent multiple submissions of the same form, Display of the current user name.",
	"JahiaStorage - JCR - ContentItem - Types - Objects - Filters": "Macros replace a marker in a page with content specified by the macro. Instead, you may want to filter the output and perform transformations in real time. You can do so with filters. For example, you can use a filter to transform all email addresses detected on a page and replace them with obfuscated versions that avoid detection by spam web spiders. Jahia provides filters out of the box, but you may of course add your own. Here is a non-exhaustive list:Static asset filter (injects JavaScript and CSS in the HTML page header), Metrics logging filter (gathers statistics on object views), User agent dispatcher (for mobile rendering), HTML cache, Email obfuscator, And a lot more… As you can see, some filters are quite powerful, while others may be very specific to a certain usage. Filters are an important part of the internal processing of Jahia.",
	"JahiaStorage - JCR - ContentItem - Status - Default - Published": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - NeverPublished": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - Unpublished": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - Modified": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - ReadOnly": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - Locked": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - WorkInProgress": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - Warning": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - MarkedForDeletion": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - UnsavedChanges": ".",
	"JahiaStorage - JCR - ContentItem - Status - Default - NotVisibleInCurrentLanguage": ".",
	"JahiaStorage - JCR - ContentItem - Status - PageBuilder - NotTranslated": ".",
	"JahiaStorage - JCR - ContentItem - Status - PageBuilder - HasVisibilityConditions": ".",
	"JahiaStorage - JCR - ContentItem - Status - PageBuilder - HasPermissions": ".",
	"JahiaStorage - JCR - ContentItem - Status - ContenEditor - SharedInAllLanguages": ".",
	"JahiaStorage - JCR - ContentItem - Status - ContenEditor - ReadOnly": ".",
	"JahiaStorage - JCR - ContentItem - Status - ContenEditor - Mandatory": ".",
	"JahiaStorage - JCR - Indexes": "Jackrabbit uses the same technology as Elasticsearch in order to provide high performance and scalability on data: Lucene indexes stored locally to optimize read latency and perform CPU-intensive queries without overloading the database.",
	"JahiaStorage - JCR - Indexes - Local": "Jackrabbit indexes are stored locally with each Jahia instance.",
	"JahiaStorage - JCR - Indexes - Shared": "While storing indexes locally is the best option for high performance and the overall architecture scalability, it comes at a cost when scaling the architecture and adding new Jahia nodes. The newly added server needs to generate its own copy of the indexes before it can respond to HTTP requests that perform queries (explicit or implicit).",
	"JahiaStorage - JCR - Indexes - Shared - Copy": "Add the new server and let Jahia generate its indexes. It can take between 2 minutes and an hour depending on the size of the content of the platform.",
	"JahiaStorage - JCR - Indexes - Shared - Autoscaling": "For auto-scaling environments, it is important to copy indexes across instances (or data volume, depending on the technology) in order to ensure a fast startup of newly summoned nodes.",
	"JahiaStorage - JCR - QueryLanguages": "",
	"JahiaStorage - JCR - QueryLanguages - SQL-2": "Similar to the standard SQL database language so easy to use for developers. The queries are parsed and transformed into Java Query Object Model queries and then executed as such. As this is part of JCR v2, it is relatively new and therefore there are some issues with its implementation, notably on join performance. For most simple queries it will do fine, but for more complex ones it is recommended to use XPath until this language implementation matures.",
	"JahiaStorage - JCR - QueryLanguages - JQOM": "A Java object representation of a JCR v2 query. You can build these using Jahia's query tag libraries, or to build them directly from Java code. SQL-2 and JQOM queries are quite similar, except that JQOM avoids the parsing stage and are a bit faster. In practice, it is quite seldom that JQOM is used, but it might be interesting in some cases.",
	"JahiaStorage - JCR - QueryLanguages - XPath": "Although it has been marked as deprecated in JCR v2, it is still available in Apache Jackrabbit and is by far the most optimized query language. It is not as easy to use as SQL-2, but is useful for building very fast queries. It is often worth the extra effort of designing the query. There are some tricks to know how to search for multi-language content, as it is not handled transparently, in the case of the other two implementations. Jahia uses it internally for speed in the cases where SQL-2 performance is not fast enough.",
	"JahiaStorage - JCR - QueryLanguages - Other": "Jahia also comes built-in with modules that use queries to provide their functionality. An example of this includes the 'last news retrieval' feature in the news module. Also available is a generic 'query' module that will ask for the query when added to a content page. This makes it easy for editors to be able to build custom queries at content creation time, without requiring any assistance from the integrators (of course this module should not be made available if this possibility is to be restricted).",
	"JahiaStorage - JCR - Import": "You can use Jahia's import/export feature to migrate content in between Jahia sites or even installations. It uses the JSR-170 (or JCR) XML format as a basis for content export, along with other specific files such as file hierarchies for binary data export. All these different files are compressed in a ZIP file that may be used by the import sub-system. This makes it possible to export a complete Jahia installation, a set of sites, a single site or even a sub-section of a site using the same import/export technology. Using this feature, users can migrate content between sites, or even between sections of sites, or also use it to export content to non-Jahia systems or import from non-Jahia systems. The same system is also used for migrations from previous versions of Jahia to the newest available version.",
	"JahiaStorage - JCR - Export": ".",
	"JahiaStorage - Datasources": "",
	"JahiaStorage - Datasources - External": "",
	"JahiaStorage - Datasources - External - EDP": "The External Data Provider module provides an API that integrates external systems as content providers like the JCR by implementing an External Data Source. The data source implementation just needs to manage the connection to the external system and the data retrieval. The External Data Provider does all the mapping work to make the external content appear in the JCR tree.",
	"JahiaStorage - Datasources - External - EDP ": "Jahia External Data Providers enable you to integrate external systems as content providers in the Java Content Repository (JCR) managed by Jahia. All external data providers must at a minimum provide access to content (\"read\" external data provider) and optionally allow for searching, or writing and updating content. External Data Providers can provide enhanceable content, which means that the raw content they provide can be extended by Jahia content, for example, the ability to add comments to an object provided by an External Data Provider. To be accessible, external content is mapped as nodes inside Jahia so that the server can manipulate them as regular nodes (perform edit, copy, paste, or reference). The external provider module must also provide a CND definition file for each content object type that is mapped into the JCR back-end.",
	"JahiaStorage - Datasources - External - EDP - ExternalDataSource": "The main point for defining a new provider is to implement the ExternalDataSource interface provided by the external-provider module (org.jahia.modules.external.ExternalDataSource).",
	"JahiaStorage - Datasources - External - EDP - ExternalData": "The External Data Source is responsible for mapping its data content into the ExternalData object. ExternalData provides access to the properties of your content. Those properties must be converted to one of two types: String or Binary. Strings can be internationalized or not, as they are declared in the cnd file.",

	"CI - Code": "SECTION",
	"CI - Code - Nodes": "",
	"CI - Code - Cluster": "",
	"CI - Code - Architecture": "",
	"CI - Code - Architecture - SingleServer": "This example shows how you can run Jahia on a single server. This setup would be suitable for a development environment. In this case, the application server is responsible for browsing, contribution, and processing. The database stores metadata and data and the additional optional database stores binary data on the file system.",
	"CI - Code - Architecture - Clustered": "This example shows how you can run Jahia in a clustered environment. A clustered environment provides high availability and load-balancing for both browsing and contribution environments. In the example, the web server load-balances the traffic between the browsing servers and contribution servers. You can scale out horizontally and add as many servers as you want to the cluster.\n\nOnly one server can be designated as a processing server. In the example, the processing server is on a node that is also serving as a contribution node.",

	"CI - Packaging": "SECTION",
	"CI - Packaging ": "",
	"CI - Packaging - Project": "You can create multiple projects, or virtual sites, within a single Jahia server. Note that we use site and project interchangeably although they have slightly different meanings. A site has its own set of pages, content, files, and more. A project is a global term, as you can use Jahia to create and manage content used in applications, which are not technically sites as they do not contain pages.",
	"CI - Packaging - Project - Parts": "Each site or project can have its own: Domain, SiteMap, Groups, Settings",
	"CI - Packaging - Project - Parts - Domain": "You can choose to manage one site on www.domain-a.com and another site on www.domain-b.com, while still hosting both on the same Jahia server",
	"CI - Packaging - Project - Parts - SiteMap": "Along with its own structure",
	"CI - Packaging - Project - Parts - Groups": "For example, you can have two separate Authors groups with different members for site A and B",
	"CI - Packaging - Project - Parts - Settings": "",
	"CI - Packaging - Project - Shared": "However, each site shares the following with the other sites: ",
	"CI - Packaging - Project - Shared - DatabaseAndAPI": "This makes it possible to access content objects available in other virtual sites. This means that identical content can be easily reused across multiple sites (for example, news items that are the same for several departments with separate sites), although security issues may arise with shared platforms (for example, the sites of two separate companies are hosted on the same server).",
	"CI - Packaging - Project - Shared - SetsOfTemplates": "For the sites that share the same set of templates.",
	"CI - Packaging - Project - Shared - Modules": "",
	"CI - Packaging - Project - Shared - CategoryTree": "",
	"CI - Packaging - Project - Shared - Users": "LDAP or Jahia users. It is not possible for two separate users, for example John, to have the same ID between two sites. LDAP groups, like LDAP users, are also common to all sites.",
	"CI - Packaging - Project - Lifecycle - Create": "",
	"CI - Packaging - Project - Lifecycle - Import": "You import a .zip file from a previous export to your local hard drive from the Site Management page.",
	"CI - Packaging - Project - Lifecycle - Import - UI": "Administration>Server>Projects",
	"CI - Packaging - Project - Lifecycle - Import - digital-factory-data/imports": "You import a .zip file from a previous export by copying it to the digital-factory-data/imports folder.",
	"CI - Packaging - Project - Lifecycle - Import - digital-factory-data/prepackagedSites": "A prepackaged project is a site that contains ready-made pages and content, for example the Digitall demo site provided by Jahia. Prepackaged projects are useful if you frequently need to import a site or create new sites from an existing one.\n\nThe list of prepackaged projects can be populated by copying an export file of the site in the digital-factory-data/prepackagedSites folder, or programmatically using modules (see the Digitall example).",
	"CI - Packaging - Project - Lifecycle - Export": "",
	"CI - Packaging - Project - Lifecycle - Edit": "",
	"CI - Packaging - Project - Lifecycle - Delete": "",
	"CI - Packaging - Site": "Site: a site is a collection of pages organized in a hierachical manner. A site is accessible through an url or a domain-name. For instance jahia.com or academy.jahia.com are sites. Each page inside those sites will be accessible through a unique url formed with jahia.com or academy.jahia.com as radicals followed by the name of the page or their access path.",
	"CI - Packaging - Site - Virtual": "Creating a new virtual site is useful when you need to manage multiple projects, for example, a public website, one or more extranets, and several department intranets. Virtual sites allow for better role assignment and can use different views (sitemap, themes, and search results) or URLs and domains for different sites, while keeping the ability to share content, users or mash-ups.",
	"CI - Packaging - Modules": "Modules are an important part of Jahia and can be considered Jahia's plug-in infrastructure.",
	"CI - Packaging - Modules - Definition": "Modules are extensions to Jahia, which are packaged as JAR files and can be deployed on a server.",
	"CI - Packaging - Modules - Definition - Include": "A module can contain different kinds of resources: JSPs, definitions in CND files, CSS and images, resource bundles, XML or ZIP import files, rules definitions, libraries, Spring files etc.",
	"CI - Packaging - Modules - Types - Java": "",
	"CI - Packaging - Modules - Types - Java - OSGi": "OSGi, on the backend, makes it possible to develop modular applications that can even be updated at runtime",
	"CI - Packaging - Modules - Types - Java - OSGi - bundles": "In OSGi, modules are called bundles. Bundles are specialized JARs that include extra MANIFEST.MF entries that declare the dependencies between modules, and versioning and package information made available to other modules.",
	"CI - Packaging - Modules - Types - Java - OSGi - bundles - convert": "You can convert most existing JARs to an OSGi bundle with little work (automatic transformation tools are also available). In OSGi runtime, only packages that are exported are available and visible to other bundles, only if the using bundles also import them. This approach provides fine-grained control of accessible Java packages (as well as associated versions) between bundles.",
	"CI - Packaging - Modules - Types - Java - Patterns": "Through OSGi, Jahia supports many integration patterns that allow developers to code any kind of custom logic. Here are some examples: Jobs, Filters, Actions, GraphQL extensions, Choicelist initialiers",
	"CI - Packaging - Modules - Types - JavaScript": "A JavaScript module is a way to build websites with Jahia.",
	"CI - Packaging - Modules - Types - JavaScript - 8.2+": "8.2+ only",
	"CI - Packaging - Modules - Types - JavaScript - Purpose": "It allows you to package up page templates, content views, settings, labels, and more and deploy them on a Jahia DXP.",
	"CI - Packaging - Modules - Types - JavaScript - Scope": "JavaScript modules require no knowledge of Java and do not require any Java code. Developers with frontend or server-side JavaScript experience can quickly start building Jahia JavaScript modules.",
	"CI - Packaging - Modules - Types - JavaScript - Structure": "It has the structure of a common Node.js/npm project and uses JSX/React.",
	"CI - Packaging - Modules - Types - Interoperability": "Thanks to GraalVM, it is entirely possible for JavaScript code to access Java libraries and services directly without needing to go through layers such as HTTP requests. Java objects may be exposed by the server to make them available to JavaScript/JSX code.",
	"CI - Packaging - Modules - Default": "The default module contains common content definitions, rendering templates, resource bundles, and static assets. The module is deployed by default and is used as the basis for many modules.",
	"CI - Packaging - Modules - Default - Components": "The module includes a set of features and components, providing base Jahia template functionality:",
	"CI - Packaging - Modules - Default - Components - HideTemplates": "Allows removing a particular template from the drop-down list of available templates.",
	"CI - Packaging - Modules - Default - Components - NavigationMenu": "Supports building navigation menus manually and in automatic mode.",
	"CI - Packaging - Modules - Default - Components - Lists": "Supports managing lists in Jahia.",

	"CD - Deploying": "SECTION",
	"CI - Deploying - Modules - Java": "",
	"CI - Deploying - Modules - Java - OSGI": "",
	"CI - Deploying - Modules - Java - URLs - PAX-URL": "Jahia uses PAX-URL to handle URLs to OSGi bundles.",
	"CI - Deploying - Modules - Java - Tools - RestAPI": "Jahia provides a REST API for module management, as well as corresponding command line scripts in the Jahia installation folder (in a default installation they are located in the <jahia-install-dir>/tools folder). Examples of usage of such scripts are listed below.",
	"CI - Deploying - Modules - Java - Tools - RestAPI - Permissions": "Starting with Jahia 8.2.0.0, you can fine-tune permissions to individual module-manager REST endpoints via Jahia security-filter",
	"CI - Deploying - Modules - Java - Tools - RestAPI - Permissions - Grants": "The following grants can be used with the security-filter.",
	"CI - Deploying - Modules - Java - Tools - RestAPI - installBundle": "Installs the specified file as a module and starts it after the installation. if last parameter (true) is omitted, the module is just installed, but not started automatically. ./installBundle.sh article-2.0.2.jar true",
	"CI - Deploying - Modules - Java - Tools - RestAPI - installBundle - multiple": "Installs the specified files as modules and starts them after the installation. if last parameter (--start) is omitted, the modules are just installed, but not started automatically.",
	"CI - Deploying - Modules - Java - Tools - RestAPI - startBundle": "Starts the article module version 2.0.2. The org.jahia.modules/article/2.0.2 is a full module key in this case, which is composed like <groupId>/<artifactId>/<version> string. The start/stop/ uninstall commands can operate on a full module key as well as on a short one, like article/2.0.2 or event article, if the corresponding bundle can be resolved by that key unambiguously, for example if there is only one bundle with symbolic name article installed on your Jahia instance. The shorter form will be:\n\n./startBundle.sh article",
	"CI - Deploying - Modules - Java - Tools - RestAPI - stopBundle": "./stopBundle.sh org.jahia.modules/article/2.0.2\n\nOr in a shorter form:\n\n./stopBundle.sh article\n\nThis command stops the target article module.",
	"CI - Deploying - Modules - Java - Tools - RestAPI - uninstallBundle": "./uninstallBundle.sh org.jahia.modules/article/2.0.2\n\nAnd the shorter form:\n\n./uninstallBundle.sh article\n\nUninstalls the target article module from your Jahia instance.\nThe start/stop/uninstall commands also take an optional second parameter to specify <target>, which is the group of cluster nodes targeted by the operation, or local to perform the operation on a cluster node individually using standard, non-clustered module deployment.",
	"CI - Deploying - Modules - Java - Tools - RestAPI - getLocalBundleInfo": "",
	"CI - Deploying - Modules - Java - Tools - RestAPI - getBundleInfo": "Get cluster wide bundle info",
	"CI - Deploying - Modules - Java - Tools - RestAPI - refreshBundle": "",
	"CI - Deploying - Modules - Java - Tools - RestAPI - updateBundle": "",
	"CI - Deploying - Modules - Java - Tools - ProvisioningAPI - addMavenRepository": "Add a Maven repository to allow modules to be installed from that repository. The repository will be available when using mvn:// URL.",
	"CI - Deploying - Modules - Java - Tools - ProvisioningAPI - installBundle": "This command installs a module, also called an OSGI bundle, by providing a PAX-url.",
	"CI - Deploying - Modules - Java - Tools - ProvisioningAPI - enable": "You can enable a module on a specific site.",
	"CI - Deploying - Modules - Java - Tools - ProvisioningAPI - include": "All packages based on jahia-packages-parent from 8.0.3.0 have an associated provisioning script that is generated when building. You can install a package by just referencing its script. For example:\n\n- include: \"mvn:org.jahia.packages/forms-package/3.2.1/yaml/provisioning\"",
	"CI - Deploying - Modules - Java - Tools - ProvisioningAPI - uninstallBundle": "You can uninstall a bundle using a key composed of the symbolic name and version (optional): <symbolic-name>[/<version>]. This additional option is available:\n\n    target\n    The cluster group name where the operation is performed (unset to execute on all nodes), or local to perform operation on a node individually using standard non-clustered module deployment\n",
	"CI - Deploying - Modules - Java - Tools - UI - Deployment": "Modules are deployed by using the built-in module management screen in the server administration, the Provisioning API or the REST API (with supplied command line scripts).",
	"CI - Deploying - Modules - Java - Tools - UI - Execution": "Jahia does not support several versions of a module being deployed at the same time in production mode. After deploying a new version of a module, you need to undeploy the previous one. This is meant to ensure reliable OSGi wiring between Jahia modules. Please note that this restriction is not enforced in the product. However, on development environments, it may be useful to keep several versions deployed to be able to easily switch between them.",
	"CI - Deploying - Modules - Java - Tools - UI - Execution - Starting": "The module management UI contains an explicit checkbox for starting or not a module, uploaded via that UI, as well as a similar checkbox for the modules, downloaded from private app store.",
	"CI - Deploying - Modules - Java - Tools - UI - Execution - Stopping": "",
	"CI - Deploying - Modules - Java - Tools - UI - Undeployment": "you can undeploy the modules from the Administration>Server>System Components>Modules. The advantage of doing so using the UI approach is that Jahia will inform you of any modules that might depend on the one you're trying to undeploy and will first ask you to disable the module from all the sites that might be using it. Module undeployment in both cases is a cluster-wide operation as described in Cluster deployment.",
	"CI - Deploying - Modules - Java - Tools - Folder - Deployment - digital-factory-data/modules": "For development purposes, the deployment of modules can also be done by dropping them into the digital-factory-data/modules folder. This folder is “watched” for changes (new modules are dropped, existing modified or deleted) and actions are performed by Jahia to react to those changes. The folder supports module operations in “hot” (online, while Jahia is running) as well as in “cold” (offline, when Jahia is shut down) mode. If a new module is dropped into that folder, it is by default automatically started, as it is the default behavior when Jahia is running in development operating mode (“operatingMode” flag value in jahia.properties file). If Jahia was started in other operating modes (e.g. “production”), then such modules will  just be installed, without auto-starting. If needed, the behavior can be explicitly controlled by adding the following flag into jahia.properties (or your own jahia.custom.properties) file",
	"CI - Deploying - Modules - Java - Tools - Folder - Undeployment": "Removing modules directly from the /modules folder is not a supported operation, even in development mode.",
	"CI - Deploying - Modules - Java - Scope - Cluster": "Jahia includes a built-in clustered module management support. All module operations, performed via Module management UI (in Server Settings) or via REST API/command-line scripts on any node and also including module deployments/undeployments via the /modules folder, are automatically replayed on other nodes in the cluster, so the state of bundles should be consistent across all nodes in the cluster. When a cluster node is joining the cluster it “pulls” the bundle state from the cluster and “applies” it locally. So, the module operations, listed in Module deployment, are cluster-wide (for example, a module deployed on any node of the cluster will be automatically deployed on the other nodes).",
	"CI - Deploying - Modules - Java - Scope - Cluster - Synchronize": "Be aware that direct bundle operations performed via Java code (on BundleContext or Bundle instances) any custom scripts, OSGi Web Console ,or SSH Console (except clustered commands under cluster:* group), are only effective locally, until the next cluster-wide operation is performed which synchronizes the cluster state in any case. Note that when a module is deployed in cluster it becomes “available” only after its deployment has been successfully completed by a Jahia processing node. For information and troubleshooting you could refer to a SSH console and “cluster:*” group of commands.",
	"CI - Deploying - Modules - Java - Scope - Cluster - Synchronize - Force": "In case of bundle state desynchronization in cluster, for example due to a cluster split (network partition) or other issues, it could be required to force synchronization of cluster state for bundles:\n\ncluster:sync –bundle\n\nor for all resources (bundles, config, features):\n\ncluster:sync",
	"CI - Deploying - Modules - Java - Scope - Cluster - Synchronize - Time": "Starting a new version of a module can take some time (from several seconds to few minutes), depending on its complexity, which will make the module unavailable during this operation, as well as the modules depending on it. This can be even more problematic when it involves a template set module: the consequence will be the unavailability of the sites using this template set during the start operation. The steps explaining how to perform a module deployment in a cluster with limited downtime are described in the \"Module version update with limited downtime\" procedure.",
	"CI - Deploying - Modules - Java - Scope - Cluster - bundle-list": "The following command:\n\ncluster:bundle-list default\n\nshows the clustered state of bundles in the default group – the global cluster group, which includes all nodes.",
	"CI - Deploying - Modules - Java - Scope - Cluster - bundle-list - clb": "This command has a shortcut alias: clb which does the same.",
	"CI - Deploying - Modules - Java - Dependencies": "We rely on OSGI capability mechanism to define the dependencies between modules.\nAn OSGI bundle, so a Jahia module, can be started if all its dependencies (OSGI bundles that provides the required capabilities) are resolved.",
	"CI - Deploying - Modules - Javascript": "On deployment, NPM packages (in tgz file format) are dynamically transformed into OSGi bundles and then treated exactly the same way that Jahia handles regular OSGi bundles.",
	"CI - Deploying - Modules - Javascript - URLs - NpmProtocolStreamHandler": "The NpmProtocolStreamHandler introduces a new npm protocol (npm://). This protocol acts as a wrapper around any other protocol, enabling the installation of NPM modules with URLs like npm://file://xxx.tgz or npm://http://xxx/xx/tgz.",
	"CI - Deploying - Modules - Javascript - Conversion": "This transformation has two main parts: file/folder relocation and metadata transformation.",
	"CI - Deploying - Modules - Javascript - Conversion - FileFolderRelocation": "During the transformation process, the first step is to move some of the files coming from the NPM tgz package into directories inside an OSGi bundle that Jahia can then process and understand.",
	"CI - Deploying - Modules - Javascript - Conversion - MetadataTransformation": "The metadata transformation process extracts the data from the package.json file and copies it to the OSGi bundle META-INF/MANIFEST.MF descriptor file.",
	"CI - Deploying - Modules - Javascript - Registry": "Jahia uses a Javascript object registry to share objects between various scripts. The registry is similar to an OSGi service registry for those familiar with OSGi.",
	"CI - Deploying - Modules - Javascript - Registry - Registrar": "Registrars play a crucial role in parsing NPM modules to detect and register specific extensions, typically written in JavaScript or any language requiring the GraalVM engine. They are invoked when an NPM plugin is started, following the execution of the initialization script.",
	"CI - Deploying - Modules - Javascript - Registry - Registrar - Impls": "Jahia’s npm-modules-engine provides two Registrar implementations: RenderFilterRegistrar and ViewsRegistrar.",
	"CI - Deploying - Modules - Javascript - Registry - Registrar - Impls - RenderFilterRegistrar": "The RenderFilterRegistrar dynamically registers and unregisters JavaScript-defined render filters. It manages lifecycle events to ensure filters are available as services when needed and are properly cleaned up on bundle deactivation..",
	"CI - Deploying - Modules - Javascript - Registry - Registrar - Impls - RenderFilterRegistrar - How": "The render filter registrar's objective is to register \"render filters\" written in JavaScript, sourced from the registry with the render-filter type. It accomplishes this by creating an OSGi service (RenderFilterBridge) that delegates to the JS prepare/execute functions.\n\nRender filters can be added to the registry in the form of a pair of two methods: execute and prepare.",
	"CI - Deploying - Modules - Javascript - Registry - Registrar - Impls - ViewsRegistrar": "The ViewsRegistrar handles the registration and management of JavaScript views and templates, integrating them into Jahia's rendering pipeline as part of the template and script resolution processes.",
	"CI - Deploying - Modules - Javascript - Registry - Registrar - Impls - ViewsRegistrar - How": "The ViewsRegistrar in Jahia’s npm-modules-engine is a versatile class responsible for dynamically managing JavaScript views within the context of OSGi bundles. It functions as both a ScriptResolver and TemplateResolver, identifying and applying appropriate JavaScript scripts and templates to content resources based on their context. Upon bundle activation, it registers JavaScript views by scanning the bundle, parsing files, and storing representations, which are then made available for rendering. Conversely, it unregisters these views upon bundle deactivation to maintain system integrity and free resources. The registrar optimizes performance through caching mechanisms, speeding up the resolution process and responding efficiently to system events that require cache updates. This integration allows for a seamless blend of traditional Java-based management and modern JavaScript-driven web technologies within Jahia’s platform, enhancing content management capabilities and rendering flexibility.",
	"CD - Deploying - Upgrade": "Platform upgrading is a key aspect of a platform’s high availability. While it is essential to ensure that a platform stays up-to-date at all time (for a number of reasons ranging from security to performance improvements and getting the latest fancy features released in each version), platform upgrading may also involve service downtime.",
	"CD - Deploying - Upgrade - ZeroDowntime": "Different strategies can be used to ensure a zero-downtime platform upgrade.",
	"CD - Deploying - Upgrade - ZeroDowntime - RollingUpgrade": "A rolling upgrade is usually used in fully automated environments where infrastructure operations are made easy thanks to IT management tools such Chef, Puppet, Jenkins and Kubernetes. This strategy allows to use the existing servers and update them on a one-by-one basis while serving HTTP traffic with the remaining computation power. Jahia core’s upgrading mechanisms are designed to avoid impacting websites and features availability in any way. Hence, it is perfectly acceptable to serve traffic using two different versions at the same time. HTTP sessions can also be mutualized between both versions to preserve a unique execution context.",
	"CD - Deploying - Upgrade - ZeroDowntime - BlueGreenUpgrade": "Blue/Green upgrade is easier to put in place compared to rolling upgrade, but it will also require more resources since it usually involves fully duplicating the primary environment. Please note that Blue / Green environments usually serve as failover environment when needed. When an upgrade needs to be performed, it is first done on the Green environment. The traffic can then be switched to the Green environment, hence allowing the Blue environment to be upgraded as well.",

	"CD - Operation": "SECTION",
	"CD - Operation - Languages": "Administration>Sites>Languages. This defines the languages in which visitors access your site.",
	"CD - Operation - SEO": "Jahia CMS offers several built-in features to manage and improve your technical SEO.",
	"CD - Operation - SEO - Robots.txt": "A simple UI to edit the robots.txt file",
	"CD - Operation - SEO - Sitemap": "Configuration UI and automated generation of the sitemap files. This feature is taking languages, live roles and no index into account.",
	"CD - Operation - SEO - CanonicalURLs": "A complete UI to define and manage vanity URLs & canonical for each page. Also provides a dashboard to give an overview of all used vanity URLs.",
	"CD - Operation - SEO - PageMetadata - NoIndex ": "A field available when editing any page, to set the content as \"Noindex\" in the robots page metadata and remove the page from the Sitemap",
	"CD - Operation - SEO - PageMetadata - NoFollow ": "A field available when editing any page, to set the content as \"Nofollow\" in the robots page metadata.",
	"CD - Operation - SEO - PageMetadata - Alternate": "Automated generation of alternate / hreflang tag, to provide information to search engines about other translations of the page",
	"CD - Operation - SEO - PageMetadata - Canonical": "Automated generation of self-referential canonical tag",
	"CD - Operation - SEO - PageMetadata - Description": "A description field is displayed by default in the content editor form on every content items. This is shown under SEO section for displayable content items. It is defined as localized text in jcr:description property of the node\n\nIt can be used to define localized meta description for the displayable content using either meta property <meta name=\"description\" content=\"<jcr:description>\"/> or as one of open graph meta tags <meta property=\"og:description\" content=\"<jcr:description>\"/>, or both.\n\nTo do so, retrieve the value of this field from your page templates. See https://github.com/Jahia/luxe-jahia-demo/blob/main/src/server/components/SeoMetaTags.jsx for example.",
	"CD - Operation - SEO - PageMetadata - Keywords": "A keywords field is displayed by default under SEO section in the content editor form for every displayable content item. It is defined as a localized list of keywords in seoKeywords property of the node.\n\nIt can be used to define a list of localized keywords tag for the displayable content using meta tag <meta name=\"keywords\" content=\"<seoKeywords>\"/>}.\n\nTo do so, retrieve the list of values of this field from your page templates. See https://github.com/Jahia/luxe-jahia-demo/blob/main/src/server/components/SeoMetaTags.jsx for example.",
	"CD - Operation - SEO - PageMetadata - OpenGraphImage": "An open graph image field is displayed by default under SEO section in the content editor form for every displayable content item. It is defined as an image node reference in openGraphImage property of the node.\n\nThis can be used to add an image reference that will be used in the Open Graph meta tag, that can enhance sharing of displayable content links within social media networks, using open graph meta tag <meta property=\"og:image\" content=\"<URL for openGraphImage>\"/>\n\nTo do so, retrieve the URL for the image node reference contained in this field from your page templates. See https://github.com/Jahia/luxe-jahia-demo/blob/main/src/server/components/SeoMetaTags.jsx for example.",
	"CD - Operation - jExperience": "Once your content is published, you need data to be able to test, measure, and optimize it. jExperience integrates data with your content editing interfaces so you can customize with personalization, evalutate content strategies with A/B testing, perform profiling operations such as segmentation and scoring, and implement goals and campaigns with ease.",
	"CD - Operation - jExperience - Track": "jCustomer is used by jExperience to track customers and deliver A/B testing and personalization.",
	"CD - Operation - jCustomer": "The core Customer Data Platform (CDP) engine. jCustomer stores and indexes customer data and events generated by visitors.",
	"CD - Operation - jCustomer - ApacheUnomi": "jCustomer is a commercial version adding extensions on top of Apache Unomi.",
	"CD - Operation - jCustomer - ElasticSearch": "The backend storage, indexation and query server system that stores data in jCustomer. It is also highly scalable and offers high-availability mechanisms.",
	"CD - Operation - jCustomer - Personalization": "jCustomer processes customer-generated events and executes rules based on events to update customer profiles. jCustomer stores and delivers the profile in a context object. The object also contains augmented information such as the profile’s resolved segments or properties aggregated from different systems connected to jCustomer, for example, from CRM and WCM applications.",
	"CD - Operation - jCustomer - Events": "Events are the main inputs into the jCustomer server. Events can range from a single page view event to a native mobile application action such as a button press or application start. New applications may define new event types and simply send them through the CXS Public REST API using HTTP POST calls to be processed and recorded by jCustomer.",
	"CD - Operation - jCustomer - Profiles": "Profiles represent information collected about a customer. Profiles can contain extensible properties that may contain personal or anonymous data. By default, a cookie keeps track of a profile on the browser side. Also, no personal data is required by the tracking mechanism as a profile ID is automatically generated when a new visitor is detected by jCustomer.",
	"CD - Operation - jCustomer - Rules": "Rules are composed of conditions and actions. If a rule’s conditions are satisfied, the actions defined in the rule are executed. You can define and modify rules at any time and rules will react to new events in the system. As conditions and actions can be extended using plugins, rules are a powerful way to add real-time functionality to jCustomer. The rule engine behaves as follows:\n\n    An internal or external event is received by jExperience.\n    The rule engine is triggered.\n    Rules are evaluated in order of priority. For each rule, the rule engine evaluates rule conditions. If conditions meet the rule criteria, rule actions are executed in the order in which they are defined.\n",
	"CD - Operation - jCustomer - Conditions": "Conditions are matched against events or profiles and are used to build segments or rules. For example, profiles with an age property above 21 or a profile that has viewed a page or a group of pages are both conditions. You can use AND and OR operators to build more complex conditions.",
	"CD - Operation - jCustomer - Actions": "Actions are sections of logic that execute when a certain set of conditions is met. Actions only execute when the conditions of a rule are satisfied. jExperience contains the following predefined actions:\n\n    Update profile properties\n    Add to list\n    Send an email\n",
	"CD - Operation - jCustomer - Segments": "Segments group the profiles that are stored in jCustomer. A segment defines that conditions that a profile must match to be included in the segment. As segments are dynamic groups, a customer profile can move segments when customer information changes or when profile conditions are modified.",
	"CD - Operation - jCustomer - StaticLists": "Profiles can be added to static lists either manually or using rule actions. Once a profile is added to a static list, you can only remove the profile by manually editing the list.",
	"CD - Operation - jCustomer - ScoringPlans": "Scoring plans are a digital marketing tool that increment a score on a profile when certain conditions are met. You can also create advanced conditions to increment scores on profiles.",
	"CD - Operation - jCustomer - CustomPlugins": "Developers can implement custom plugins to provide new conditions or actions, and deploy predefined rules, property types, or any other functionality that may be implemented using OSGi bundles. jCustomer is also an OSGi application.",
	"CD - Operation - jCustomer - Architecture": "jCustomer is a Apache Karaf (OSGi) application. jCustomer runs as a server-based Java service that is accessible through a REST API defined as part of the OASIS Context Server specification. As jCustomer uses an OSGi engine at its core, it is extensible and very flexible in terms of deployment scenarios. It is also designed to scale out since it uses cluster-tested technologies such as Elasticsearch, Apache Karaf Cellar (based on Hazelcast) and REST-API level-load distribution. The REST API is built using Apache CXF based on Java Beans that are automatically mapped as REST endpoints. Custom plugins may define new REST APIs to extend the built-in API functionality.",
	"CD - Operation - jCustomer - Items": "jCustomer structures the information it collects using the concept of Item which provides the base the context server needs to process and store the data. Items are persisted according to their type (structure) and identifier (identity). This base structure can be extended, if needed, using properties in the form of key-value pairs.\n\nAdditionally, tracked items are also gathered by scope which allows the context server to group together related items. Scopes usually pertain to a given site being analyzed, though they can span across sites depending on the desired analysis granularity. Scopes allow clients accessing the context server to filter data to only see relevant data.",
	"CD - Operation - CXS": "The Oasis Context Server (CXS) specification\n\nThe interface between jExperience and jCustomer is defined by the OASIS Context Server specification. The specification is a work in progress at the OASIS foundation and defines an open standard to deliver personalized user experiences. The goal is to assist organizations that currently struggle to create and deliver consistent personalized experiences across channels, markets and systems. The specification defines a standardized API contract to talk to context server implementations..",

	"SRE": "SECTION",
	"SRE - Security": "Users and groups are nodes like others on a Jahia platform, they follow definitions and can be manipulated through administration interfaces and programmatically, using APIs.",
	"SRE - Security - Authentication": "",
	"SRE - Security - Authentication - Users": "",
	"SRE - Security - Authentication - UserProfile": "When a user accesses their profile in live mode they can edit all their information directly on the page without going to Content Editor. This module (located in modules/default/) mainly use jQuery and Jeditable.\n\nThis is a good entry point to have example of how to use in-line edition for editing small properties in live mode.\n\nThis documentation shows how to make edition of text, richtext, date, file, dropdown properties.\n\nFor each of those type of data we use the same principle: a JavaScript function applied to a class that allows the edition of the content when the user clicks on it.",
	"SRE - Security - Authentication - JahiaAuthentication": "The backbone of SSO solutions.",
	"SRE - Security - Authentication - JahiaOAuth": "The OAuth connectors.",
	"SRE - Security - Authentication - CAS": "Central Authentication Service (CAS) SSO.",
	"SRE - Security - Authentication - SAML2AuthenticationValveModule": "The SAML2 Authentication Valve module enables you to activate SAML on one or more of your Jahia websites.",
	"SRE - Security - Authentication - JCRAuthenticationProvider": "Provides authentication to Jahia and lets you map each visitor attribute coming from the connectors to a Jahia user attribute.",
	"SRE - Security - Authentication - Sessions": "",
	"SRE - Security - Authentication - Sessions - Sticky": "This setup is however non-optimal. One of the problems comes from the usage of sticky sessions, which make it impossible to shutdown an application server node without all the sessions associated with it. Any failure in the architecture would also disconnect all users that had sessions opened on the failed server.",
	"SRE - Security - Authentication - Sessions - Hazelcast": "Jahia provides out of the box support for distributing sessions across all application servers by using hazelcast, through the distributed-sessions module. Hazelcast ensures all session data is replicated on all servers, allowing a user to fallback on another server if the one he was using is failing.\n\nWhen sessions are distributed with Hazelcast, application servers can be added and removed freely without impacting the site's visitors.\n\nVirtual infrastructures involving auto-scaling, and Container as a Service platform frequently add and remove servers from an infrastructure to adapt to HTTP traffic volume. In this case, it is essential to provide session distribution and prevent any impact on visitor sessions.",
	"SRE - Security - Authorization - Groups": "",
	"SRE - Security - Authorization - Roles": "Role: aggregation of permissions. The role 'contentAuthor' grants permissions 'updateContent', 'publishContent' and 'previewContent'",
	"SRE - Security - Authorization - Permissions": "Permission: the atomic right to do a specific task. (eg: createUser, viewIntranet, updateContent, previewContent, publishContent, deleteContent…)",
	"SRE - Security - Authorization - Permissions - permissions.xml": "Permissions are created in a Jahia module (link to the Module creation tutorial) under the folder src/main/imports as XML files. The name of the file is permissions.xml",
	"SRE - Security - Authorization - Permissions - canViewIntranetAdmin": "",
	"SRE - Performance": "",
	"SRE - Performance - Caching": "",
	"SRE - Performance - Caching - Filter": "The front-end cache in Jahia is implemented as a rendering filter and uses EHCache as the backend framework.",
	"SRE - Performance - Caching - Filter - AggregateCacheFilter": "This filter will cache each component’s output separately and then aggregate all cache fragments on rendering time to deliver the full page to the client",
	"SRE - Performance - Caching - Filter - AggregateCacheFilter - default": "The default filter is the AggregateCacheFilter.",
	"SRE - Performance - Caching - Expire": "Jahia can use both modes for its caches. A fragment will have its expiration set to 30 minutes by default.  If the fragment is accessed before the time elapses, the expiration is reset.",
	"SRE - Performance - Caching - Invalidate": "If during this time, the element is either updated, deleted, or a child node is added/removed, then the element will be invalidated from the cache. ",
	"SRE - HA": "",
	"SRE - HA - Redundancy": "Services are pieces of software whose job is to perform a task, either alone, or along with other instances of the same service. This section goes through all services of Jahia's ecosystem and provides guidelines on how to make them highly available.",
	"SRE - HA - LoadBalancing": "Load balancers' job is to distribute traffic amongst web servers. Jahia can work with all types of load balancers, whether they are physical (F5, Cisco LB) virtual (Amazon ELB, Azure Traffic Manager) or software (nginx plus).\n\nLoad balancers can work on a highly distributed and fault tolerant way and play a great role in the overall high availability of architecture, as the main entry point.\n\nFinally, some load balancers can handle SSL termination with hardware decoding, which makes them extremely efficient at decoding HTTPs.",
	"SRE - HA - WebServers": "Web servers play two major roles: route the various HTTP calls to the right application server, and create a layer of isolation between the internet and the application server. There are also important tasks that can be offloaded to web servers such as URL rewriting",
	"SRE - HA - ApplicationServers": "Application servers are the components containing Jahia. Even though all Jahia instances are the same from an application standpoint, each of them can be configured separately in order to specialize them.",
	"SRE - HA - ApplicationServers - Cluster": "Deploying Jahia in a cluster is an effective way of distributing CPU and memory load to handle larger traffic sites. The image below illustrates a typical Jahia cluster installation. Jahia nodes communicate with each other through cache and database layers, but also access shared resources: a shared file system and the database. The file system is used for the binary content if the server is configured to store it there, or in the database if the default configuration is used. The database stores everything else. It is therefore very important to have a high-performance database installation, as Jahia will depend on it to scale. Jahia can also differentiate nodes in a cluster setup in order to offer more specialized processing. We will review here quickly the different node types.",
	"SRE - HA - ApplicationServers - ProcessingNode": "The processing node executes long-running tasks, such as workflow validation operations, copy and pasting, content import and indexing, as background tasks. This enables other nodes to process content browsing and editing requests. This node is designed to be fault-tolerant. If the node fails during processing, it can simply be restarted and it will resume operations where it left off. Note that only one processing node is permitted.",
	"SRE - HA - ApplicationServers - ProcessingNode - Aux": "The processing node is not considered a sensitive part of the architecture since it performs background jobs that do not prevent serving content to site visitors:\n\n    Module deployment\n    New versions of the custom code will only be fully deployed once the processing node is online\n    Content publication\n    Content authors can still contribute content and request publication, but these publications will be queued until a processing server is online\n    Jobs execution\n    Cache purge, content history purge, version purge\n",
	"SRE - HA - ApplicationServers - ProcessingNode - Unique": "There can be only one processing node on the whole architecture.",
	"SRE - HA - ApplicationServers - ProcessingNode - Tasks": "While performing important tasks, the global architecture will not suffer from a processing node crash and visitor and content author requests will still be served without impact.",
	"SRE - HA - ApplicationServers - ProcessingNode - Failure": "In case of a processing node failure, it is however important to restart it to allow content publications and module deployment. All jobs are persisted in the database and resumed when the processing node goes online.",
	"SRE - HA - ApplicationServers - ContributionServers": "Contribution servers are servers where content authors will create and trigger content publication. These servers also offer administration interface for users, roles, module and other various component management.\n\nIn case content contribution is considered a sensitive activity on a platform and high availability needs to be achieved, it is required to provide at least two contribution servers.",
	"SRE - HA - ApplicationServers - BrowsingServers": "Browsing servers are servers dedicated to serving visitors HTTP requests. In a highly available configuration, it is mandatory to provision multiple browsing nodes.",
	"SRE - HA - ApplicationServers - Publication": "The remote publication is the possibility to have an environment dedicated to the edition of content (authoring) and a totally separate environment dedicated to the delivery (called distant publication server/environment) of the pages for the site visitors. Each environment is autonomous (they have their own database) and are usually in a different DMZ. The communication between servers uses HTTP/HTTPS protocols (it is strongly advised to use HTTPS).",
	"SRE - HA - Database - MariaDBGalera": "Jahia supports MariaDB Galera clusters only in active-passive mode (active-active is not supported) and allows load-balancing read operations across the whole cluster. Write operations must be sent to the same MariaDB Galera instance to avoid cluster locks.",
	"SRE - HA - Database - MariaDBGalera  Strategies": ".",
	"SRE - HA - Database - MariaDBGalera - Strategies - HAProxy": "Query load balancing using HAProxy where read operations are load balanced across the whole Galera cluster. Write operations are sent to only one Galera instance.",
	"SRE - HA - Database - MariaDBGalera - Strategies - MariaDBConnectorJ": "Load balancing achieved by the MariaDB JDBC driver configured in 'sequential' mode (see About MariaDB Connector/J). The first MariaDB instance in the connection string will be used and no load balancing will occur. An automated switch to the next MariaDB instance will occur in case of a failure of the first one..",
	"SRE - HA - DataStore": "While being optional, the datastore is a shared folder usually using NFS volumes or SAN storage. The datastore requires high availability at the storage level (RAID or replicated storages using dedicated solutions such as Netapp or out-of-the-box highly available IaaS storage).",

	"PE": "SECTION",
	"PE - Config": "Jahia features and services can be configured in the jahia.properties file or in OSGi configuration files. Clustering settings can be specified in the jahia.node.properties file.",
	"PE - Config - Files - Node - OSGIConfig": ".",
	"PE - Config - Files - Node - OSGIConfig - Location": "OSGi configuration files are located in the digital-factory-data/karaf/etc directory.",
	"PE - Config - Files - Node - jahia.properties": "",
	"PE - Config - Files - Node - jahia.properties - Location": "located in the digital-factory-config/jahia directory.",
	"PE - Config - Files - Node - jahia.properties - Props - Modes - operatingMode": "Specifies a mode, either development, production, or distantPublicationServer",
	"PE - Config - Files - Node - jahia.properties - Props - Modes - maintenanceMode": "Enables maintenance mode, where no requests are served except to /tools/.",
	"PE - Config - Files - Node - jahia.properties - Props - Modes - readOnlyMode": "Enables read-only mode and disables access to Page Composer, Content Editor, Studio, and administration modes.",
	"PE - Config - Files - Node - jahia.properties - Props - Modes - sessionExpiryTime": "Sets the session lifetime in minutes.",
	"PE - Config - Files - Node - jahia.properties - Props - DiskPaths - jahiaVarDiskPath": "Defines the main location of runtime data. If the jahia.data.dir system property is not set, this value is used for that setting. Otherwise, this value is ignored. Defqult: ${jahiaWebAppRoot}/../../../digital-factory-data",
	"PE - Config - Files - Node - jahia.properties - Props - DiskPaths - tmpContentDiskPath": "Defines the location of temporary files - Default: ${jahia.data.dir}/content/tmp/",
	"PE - Config - Files - Node - jahia.properties - Props - DiskPaths - jahiaModulesDiskPath": "Defines the location of modules - ${jahia.data.dir}/modules/",
	"PE - Config - Files - Node - jahia.properties - Props - DiskPaths - jahiaImportsDiskPath": "Defines the location of imported files -  \t${jahia.data.dir}/imports/",
	"PE - Config - Files - Node - jahia.properties - Props - DiskPaths - modulesSourcesDiskPath": "Defines the location of modules sources \t${jahia.data.dir}/sources/",
	"PE - Config - Files - Node - jahia.properties - Props - DiskPaths - jahiaGeneratedResourcesDiskPath": "Defines where dynamically generated resources like aggregated CSS and JS files are stored. Unlike other DiskPath parameters, when running a Jahia cluster, it must reference a directory shared between cluster nodes. - ${jahia.data.dir}/generated-resources/",
	"PE - Config - Files - Node - jahia.properties - Props - DiskPaths - jahia.jackrabbit.home": "JCR repository home folder \t${jahia.data.dir}/repository",
	"PE - Config - Files - Node - jahia.properties - Props - DiskPaths - jahia.jackrabbit.datastore.path": "JCR file datastore path in case of the file-based binary storage \t${jahia.jackrabbit.home}/datastore",
	"PE - Config - Files - Node - jahia.properties - Props - URLSettings - jahiaWebAppsDeployerBaseURL": "Provides your custom URL for the WAR deployer, if you use non-standard URL \thttp://127.0.0.1:8080/manager/html/",
	"PE - Config - Files - Node - jahia.properties - Props - URLSettings - permanentMoveForVanityURL": "If vanity URLs exists for a node and it is accessed with a non-default vanity URL, Jahia informs the client that the resource has permanently moved (HTTP status code 301). Note: this property doesn't apply if the server name of your project is not correctly set. \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - URLSettings - urlRewriteSeoRulesEnabled": "Enables the URL rewrite engine to shorten content URLs in Live mode. For example, shortening http://my.acme.org/cms/render/live/en/site/myAcme/home.html to  http://my.acme.org/home.html \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - URLSettings - urlRewriteRemoveCmsPrefix": "Removes the /cms prefix from URLs when SEO URL rewriting is activated (urlRewriteSeoRulesEnabled is set to true) \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - URLSettings - urlRewriteUseAbsoluteUrls": "Enables generating absolute URLs for links to resources on other sites\n  \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - URLSettings - siteURLPortOverride": "Forces the generation of siteURLs to a specified port. This bypasses the request.getServerPort() calls and everything else. Specify a port to force generation of the site URL (notably used in the Exit Administration button) to that port. Set to 0 to disable port overrides. \nNote: This property may cause issues with cookies or if you access Jahia through multiple front-end machines. \t0",
	"PE - Config - Files - Node - jahia.properties - Props - URLSettings - disableJsessionIdParameter": "Disables the JsessionId parameter added by the application server to track sessions when no cookie is present \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - URLSettings - shiro.blockSemicolon": "Block request with a 400 Bad Request error if semicolon is found in the request URI (optional) \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - MailService": "Mail server connection settings can be found in the /settings/mail-server repository node",
	"PE - Config - Files - Node - jahia.properties - Props - MailService - mail_maxRegroupingOfPreviousException": "Controls mail regrouping of a repeating exception. If a repeating exception occurs more than the maximum specified here, mail is sent and you are informed with an error.",
	"PE - Config - Files - Node - jahia.properties - Props - DatabaseProperties": "Database connections are configured through the container-managed datasource connection. In Tomcat, the connection is set in the <jahia-web-app-dir>/META-INF/context.xml file.",
	"PE - Config - Files - Node - jahia.properties - Props - DatabaseProperties - db_script": "derby_embedded.script",
	"PE - Config - Files - Node - jahia.properties - Props - DatabaseProperties - hibernate.dialect": "Specifies the DB dialect used by Hibernate \torg.hibernate.dialect.DerbyTenSevenDialect",
	"PE - Config - Files - Node - jahia.properties - Props - DatabaseProperties - org.quartz.driverDelegateClass": "Specifies the Quartz scheduler driver delegate class \torg.quartz.impl.jdbcjobstore.StdJDBCDelegate",
	"PE - Config - Files - Node - jahia.properties - Props - TemplateSet - default_templates_set": "Default value for template set \tsample-bootstrap-templates",
	"PE - Config - Files - Node - jahia.properties - Props - FileManager - jahiaFileUploadMaxSize": "Configuration of the file manager that uses JCR as a back-end \t104857600",
	"PE - Config - Files - Node - jahia.properties - Props - MultilingualSupport - characterEncoding": " \tSpecifies character encoding (MIME charset) of the response that is sent to the client, request character encoding and e-mail charset \tUTF-8",
	"PE - Config - Files - Node - jahia.properties - Props - MultilingualSupport - org.jahia.multilang.default_language_code": "Specifies the fall-back language code after Jahia tries resolving the current browsing code from the session, the browser's settings, and the site's language list \ten",
	"PE - Config - Files - Node - jahia.properties - Props - MultilingualSupport - considerPreferredLanguageAfterLogin": "Specifies whether to switch to the user's preferred language after login. Language switch only occurs if the current site has entries in the user's preferred language \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - Authentication": "The following table describes container and cookie authentication, and CAS and SPENGO authentication properties.",
	"PE - Config - Files - Node - jahia.properties - Props - Authentication - auth.container.enabled": "Enables the container authentication valve\n  \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - Authentication - auth.cookie.enabled": " \tEnables cookie authentication for login. The cookie authentication valve uses cookies to store an identifier corresponding to a specific Jahia user when they select the Remember me option in the login engine. \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - Authentication - auth.cas.enabled": "Enables the CAS authentication valve \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - Authentication - auth.cas.serverUrlPrefix": "Specifies the URL prefix of the CAS server \thttps://localhost:8443/cas",
	"PE - Config - Files - Node - jahia.properties - Props - Authentication - auth.cas.loginUrl": "Specifies the redirect URL to the CAS server for login \t${auth.cas.serverUrlPrefix}/login",
	"PE - Config - Files - Node - jahia.properties - Props - Authentication - auth.cas.logoutUrl": "Specifies the logout URL to invalidate the user session on the CAS server \t${auth.cas.serverUrlPrefix}/logout",
	"PE - Config - Files - Node - jahia.properties - Props - Authentication - auth.spnego.enabled": " \tEnables the SpnegoHttpFilter and adjust its configuration in the applicationcontext-spnego.xml file \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - CustomErrorDocumentSite - site.error.enabled": "Enables specific error document pages for each site \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - UserAndGroupNameValidation - userManagementUserNamePattern": "Specifies the pattern for the user name validation. The new user name will be tested against this regular expression (see java.util.regex.Pattern) pattern.\nPlease update the resource bundle message: org.jahia.admin.users.ManageUsers.onlyCharacters.label (JahiaInternalResources.properties) to reflect the pattern changes. \t[0-9a-z_A-Z\\\\-\\\\{\\\\}\\\\.@]+",
	"PE - Config - Files - Node - jahia.properties - Props - UserAndGroupNameValidation - userManagementGroupNamePattern": "Specifies the pattern for the group name validation. The new group name will be tested against this regular expression (see java.util.regex.Pattern) pattern.\nPlease update the resource bundle message: org.jahia.admin.users.ManageGroups.onlyCharacters.label (JahiaInternalResources.properties) to reflect the pattern changes. \t = [0-9a-z_A-Z\\\\-\\\\{\\\\}]+",
	"PE - Config - Files - Node - jahia.properties - Props - FileErrorDumping": "By default, Jahia dumps contain errors in files. Dump files are created in temp directory and have the following format:\nerror-DATE-TIME-EXCEPTION_COUNT_SINCE_STARTUP.txt\nGenerated files contain information to help you understand the context of an error. When submitting an error to Jahia support, activate this logging and submit files into the support tracking system.",
	"PE - Config - Files - Node - jahia.properties - Props - FileErrorDumping - dumpErrorsToFiles": "Enables file error dumping \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - FileErrorDumping - fileDumpMaxRegroupingOfPreviousException": "Controls file regrouping of a repeating exception. If a repeating exception occurs more than this maximum, a file will be dumped anyway, just so that we are still informed in case this is the only error sent. \t500",
	"PE - Config - Files - Node - jahia.properties - Props - FileErrorDumping - useJstackForThreadDumps": "If set to true, a call to an external jstack tool (from Oracle Java Platform SE package) will be done by Jahia to generate a thread dump. This generate more accurate thread dumps, although the thread dump is slower.\nNote: It is not guaranteed that a dump can be read by any thread dump analyzer tool available on the market.\nEnsure that \"jstack\" is available on your PATH before enabling this property. \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - ConcurrentProcessing - maxModulesToGenerateInParallel": "Specifies how many threads can perform heavy weight processing (module creation not served from the cache) \t50",
	"PE - Config - Files - Node - jahia.properties - Props - ConcurrentProcessing - moduleGenerationWaitTime": "Specifies how long threads wait before starting to generate modules in heavy load situations (in milliseconds) \t10,000",
	"PE - Config - Files - Node - jahia.properties - Props - ConcurrentProcessing - moduleGenerationThreadDumpToSystemOut": "Generates a thread dump into System.out for troubleshooting the cause of a slowdown\n  \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - ConcurrentProcessing - moduleGenerationTthreadDumpToFile": "Generates a thread dump into a separate file, under the ${java.io.temp}/jahia-threads/<current-date> folder, for troubleshooting the cause of a slowdown \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - ConcurrentProcessing - minimumIntervalAfterLastAutoThreadDump": "When Jahia does not respond fast enough (see moduleGenerationWaitTime) an automatic thread dump will be created to help figuring out what caused the slowdown. In order to not spam the log file, a minimum interval between two dumps can be defined. Set to -1 to disable automatic thread dumps. \t60,000",
	"PE - Config - Files - Node - jahia.properties - Props - ConcurrentProcessing - maxRequestRenderTime": " \tSpecifies the maximum time, in milliseconds, that request rendering continues before an error is thrown and the request processing is stopped. Specify a value of -1 or 0 to apply no timeout to request processing.\nNote: A fragment rendering cannot be canceled. This timeout check is applied after the fragment rendering completes and before other fragments start to render. \t60,000",
	"PE - Config - Files - Node - jahia.properties - Props - SearchIndexesConsistencyCheck - jahia.jackrabbit.searchIndex.enableConsistencyCheck": "Specifies whether to perform a consistency check for the Jackrabbit search indexes, depending on the forceConsistencyCheck parameter. If set to false, no consistency check is performed on startup. \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - SearchIndexesConsistencyCheck - jahia.jackrabbit.searchIndex.forceConsistencyCheck": "Runs a consistency check for search indexes on every startup. If false, a consistency check is only performed when the search index detects a prior forced shutdown. \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - SearchIndexesConsistencyCheck - jahia.jackrabbit.searchIndex.autoRepair": "Repairs errors detected by a consistency check of search indexes. If false, errors are only written to the log. \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - SearchIndexesConsistencyCheck - jahia.jackrabbit.searchIndex.spellChecker.distanceImplementation": "Specifies the distance implementation for suggested words for the spell checker \torg.apache.lucene.search.spell.LevensteinDistance",
	"PE - Config - Files - Node - jahia.properties - Props - SearchIndexesConsistencyCheck - jahia.jackrabbit.searchIndex.spellChecker.minimumScore": "Specifies the minimum similarity score for suggested words for the spell checker. A lower value increases the amount of suggestions. \t0.7",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - jahia.jackrabbit.consistencyCheck": "Specifies whether to perform a consistency check of the JCR repository during startup \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - jahia.jackrabbit.consistencyFix": "Specifies whether the consistency check should attempt to fix issues that it discovers \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - repositoryDirectoryListingDisabled": "Disables the directory listing for the /repository servlet.\nNote: The WebDAV client access won't work in such a case. \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - repositoryAllowedNodeTypes": "Specifies the node types that can be exposed through the /repository WebDAV servlet. Node types not listed here are unavailable. \trep:root,jnt:virtualsitesFolder,\njnt:virtualsite,jnt:folder,jnt:file",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - jahia.publication.versionedTypes": "Specifies the list of node types that Jahia creates versions for when publishing. Also determines visibility of versioning tab in content editor advanced options. Also determines visibility of versioning tab in content editor advanced options. \tjmix:editorialContent,jnt:file",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - jahia.publication.excludedVersionedTypes": "Specifies the list of node types that Jahia excludes for creating versions for when publishing. This takes priority over jahia.publication.versionedTypes. Also determines visibility of versioning tab in content editor advanced options. \t< empty list >",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - jahia.fileServlet.statisticsEnabled": "Enables access statistics logging in the Files servlet that serves files from the JCR repository \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - jahia.jcr.maxNameSize": "Specifies the maximum size of node names \t32",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - jahia.ui.contentTab.defaultSynchronizeNameWithTitle": "Enables the automatic synchronization of the title with the system name in Page Composer and Content Editor \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - accessManagerPathPermissionCacheMaxSize": "Specifies the maximum number of entries for the JCR access manager cache that optimizes the resolution of permissions for node paths. The cache is an LRU cache that retains the specified number of entries in memory and removes the least recently used entries. The cache is instantiated for each JCR session and is usually short-lived, except in the case of long-running operations such as exports, publications, and copies.\nIt is recommended to keep this value low as the cache can grow quite fast on large JCR repositories. If no value is specified, the default value is 100 entries. \t100",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - jahia.jcr.nodesCachePerSessionMaxSize": "Specifies the maximum number of entries allowed in the JCRNodeWrapper instances cache. These caches are designed to optimize direct access to JCR nodes by storing recently accessed entries. The caches are implemented as LRU (Least Recently Used) caches, retaining the specified number of entries in memory and removing the least recently used entries when the limit is exceeded.\nTwo caches are created for each JCR session: one cache per path and one cache per identifier.\nJCR sessions are typically short-lived, except in cases of long-running operations such as exports, publications, and copies.\nIf no value is specified, the default value is 100 entries.\nSetting this property to zero or a negative value will disable the limit.\nAvailable from Jahia 8.1.8.0 and Jahia 8.2.1.0\n\t100",
	"PE - Config - Files - Node - jahia.properties - Props - WorkspacePersistence - jahia.jackrabbit.queryStatsEnabled": "Enables the collection of JCR query execution statistics. You can view the list of slowest queries and most popular queries in JCR Query Statistics in Jahia Tools. \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - VideoThumbnailsService - jahia.dm.thumbnails.video.enabled": "Enables the video thumbnails service. The service automatically creates thumbnail images for uploaded video files. \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - VideoThumbnailsService - jahia.dm.thumbnails.video.ffmpeg": "The path to the ffmpeg utility executable file, which is required by the video thumbnails service. The path is typically /usr/bin/ffmpeg for Linux and c:/Program Files (x86)ffmpeg-20120503-git-c1fe2db-win64-static/bin/ffmpeg.exe for Windows.\nIf the ffmpeg/bin folder is present in your PATH, you can specify only the executable name here. \tffmpeg",
	"PE - Config - Files - Node - jahia.properties - Props - ImageConversionService - imageService": "Specifies the image service to use. The native Java service is ImageJAndJava2DImageService.\nTo use ImageMagick, set the value to ImageMagickImageService and the ImageMagick path to the proper value. Note: ImageMagic will by default use a lot of memory for conversions. If you want to limit memory usage (for example in Docker containers), you should use an environment variable such as MAGIC_MEMORY_LIMIT=1GiB. \tImageJAndJava2DImageService",
	"PE - Config - Files - Node - jahia.properties - Props - ImageConversionService - imageMagickPath": " \tThe path to ImageMagick and exiftools. For Windows the path is typically C:\\\\Programs\\\\ImageMagick;C:\\\\Programs\\\\exiftool<p< p=\"<> </p<>",
	"PE - Config - Files - Node - jahia.properties - Props - SourceControl - gitPath": "Specifies the path to git executable git",
	"PE - Config - Files - Node - jahia.properties - Props - SourceControl - svnPath": "Specifies the path to svn executable svn",
	"PE - Config - Files - Node - jahia.properties - Props - SourceControl - mvnPath": "Specifies the path to mvn executable mvn",
	"PE - Config - Files - Node - jahia.properties - Props - SystemUsersResources - guestUserResourceModuleName": "Associates users with a resource bundle. Set the module name that contains the resource for guest \tDefaultJahiaTemplates",
	"PE - Config - Files - Node - jahia.properties - Props - SystemUsersResources - guestUserResourceKey": "Specifies the key for guest \tlabel.user.guest ",
	"PE - Config - Files - Node - jahia.properties - Props - SystemGroupResources - guestGroupResourceModuleName": "Associates groups with a resource bundle. Set the module name that contains the resource for guest. \tDefaultJahiaTemplates",
	"PE - Config - Files - Node - jahia.properties - Props - SystemGroupResources - guestGroupResourceKey": "Specifies the key for guest label.group.guest",
	"PE - Config - Files - Node - jahia.properties - Props - UsersAndGroups - jahiaJCRUserCountLimit": "Limits the number of JCR users which are read for the Users page in Server Settings>Users and Roles. By default, 100 JCR users are retrieved. \t100",
	"PE - Config - Files - Node - jahia.properties - Props - UsersAndGroups - jahia.settings.userDisplayLimit": "Limits the number of users that display by default in the Users page in Server Settings>Users and Roles. By default, 100 users display. \t100",
	"PE - Config - Files - Node - jahia.properties - Props - UsersAndGroups - jahia.settings.memberDisplayLimit": "Limits the total number of group members that display by default in the Groups page in Server Settings>Users and Roles. By default, 100 groups display. \t100",
	"PE - Config - Files - Node - jahia.properties - Props - OSGi - karaf.remoteShell.port": "Specifies the port which the Apache Karaf OSGi command line shell listens for SSH connections. Set it to a negative value to disable this feature. \t8101",
	"PE - Config - Files - Node - jahia.properties - Props - OSGi - karaf.remoteShell.host": "Specifies the bind address for the SSH shell. 127.0.0.1 means the SSH shell only allows local connections to be established. You may define a dedicated IP address, the console will bind to, or 0.0.0.0 which means it will be bound to all available network interfaces. \t127.0.0.1",
	"PE - Config - Files - Node - jahia.properties - Props - MassImports": "Define whether you want to first expand all binary files on your hard drive before import instead of searching them in the zip files. Expanding is much faster for thousands of files. You can configure the path where to expand those files. Files will be deleted at the end of import. You can also configure at what rate you want to save your node.",
	"PE - Config - Files - Node - jahia.properties - Props - MassImports - expandImportedFilesOnDisk": "Specifies whether to first expand all binary files on your hard drive before performing a mass import, instead of searching them in the zip files. Expanding is much faster for thousands of files. \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - MassImports - expandImportedFilesOnDiskPath": "Specifies the path to expand binary files in when performing a mass import. Files are deleted at the end of import. \t/tmp",
	"PE - Config - Files - Node - jahia.properties - Props - MassImports - importMaxBatch": "Specifies the rate at which to save your node during a mass import \t500",
	"PE - Config - Files - Node - jahia.properties - Props - SearchAndIndexing - queryApproxCountLimit": "Specifies how many results should be iterated through before calculating approximate number of further results \t100",
	"PE - Config - Files - Node - jahia.properties - Props - SearchAndIndexing - jahia.jackrabbit.reindexOnStartup": "Specifies whether to reindex all repository content on server startup\nNote: Reindexing can take a significant amount of time depending on the volume of data \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - WorkInProgress - wip.checkbox.checked": "Specifies whether work in progress checkbox should be checked when opening Content Editor. \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - TaggingService - tag.suggester.faceted": "Specifies whether the query used to suggest tags uses a faceted query to retrieve the tags. The faceted suggester sorts tags by usage count and provides the count in the result map. The faceted suggester can be slower than the default suggester. Set to true to enable the faceted suggester. \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - Publication - jahia.ui.pickers.suppressPublicationInfo": "Specifies whether publication status information is present in content picker UIs. If suppressed, publication status is not calculated, which can speed up the rendering of corresponding UI elements. \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - Publication - jahia.publication.batchSize": "Defines the size of publication batch, including how many nodes can be published at once. If the number of nodes in the publication job exceeds this limit, the publication action is performed in batches. Specify a value of -1 to define no limit on the batch. In this case, the publication job processes all specified nodes at once. \t100",
	"PE - Config - Files - Node - jahia.properties - Props - Publication - jahia.publicationManagerNodeTypes": "Specifies which additional items display in the Publication Manager, such as menu labels, and internal and external links \tjmix:publication,jmix:workflowRulesable,\njnt:navMenuText",
	"PE - Config - Files - Node - jahia.properties - Props - Publication - area.auto.activated": " \tSpecifies whether areas are automatically activated the first time a page display in Page Composer \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - Publication - external.users.properties.readonly": "Lists the external user properties that are read-only. All the other user properties can be overridden locally. You can also set read-only properties for a specific provider by setting the same property suffixed with a period (.) and the provider key, for example external.users.properties.readonly.ldap=j:firstName,j:lastName,j:organization. \tj:firstName,j:lastName,j:organization,\nj:email",
	"PE - Config - Files - Node - jahia.properties - Props - RestAPI - jahia.find.disabled": "Disables the find servlet and prevents queries through the API. Setting to false allow users to perform free-form JCR queries on {workspace}/{language}/query. This setting does not affect usage of JCR prepared queries. \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - RestAPI - jahia.find.nodeTypesToSkip": "Specifies the node types that are skipped by the JCR REST API \tjnt:passwordHistory,jnt:passwordHistoryEntry",
	"PE - Config - Files - Node - jahia.properties - Props - AggregateAndCache - useNewAggregateAndCacheImplementation": "Switches between the Render chain V1 (false) and V2 (true) implementation \tfalse",
	"PE - Config - Files - Node - jahia.properties - Props - Documentation - documentation.link": "Defines the link to the documentation \thttps://academy.jahia.com/documentation/digital-experience-manager/7.3",
	"PE - Config - Files - Node - jahia.properties - Props - Documentation - sql2CheatSheet.link": "Defines the link to the JCR-SQL2 Query cheat sheet topic in the Academy. The link displays below advanced searches in jContent. \thttps://academy.jahia.com/documentation/techwiki/search/jcrsql2-query-cheat-sheet",
	"PE - Config - Files - Node - jahia.properties - Props - Documentation - whatsNew.link": "Defines the link to the What's New? page in the Academy \thttps://www.jahia.com/$ui-lang([en,fr],en)/customers/whatsnew?dxversion",
	"PE - Config - Files - Node - jahia.properties - Props - Documentation - whatsNew.display": "Specifies whether to display the What's New? button in the Jahia menu \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - UI - jahia.ui.dragAndDrop": "Defines drag and drop behavior in Edit mode. You can specify the following values:\nENABLED: All entire content is draggable\nDRAG_ZONE_IN_EDIT_AREA: A drag zone displays at the top left of the module. Content can only be dragged in this zone\nDISABLED: All dragging and dropping is disabled \tDRAG_ZONE_IN_EDIT_AREA",
	"PE - Config - Files - Node - jahia.properties - Props - UI - jahia.ui.createChildrenDirectButtons.limit": "jahia.ui.createChildrenDirectButtons.limit",
	"PE - Config - Files - Node - jahia.properties - Props - JQuery - jahia.jquery.version": "The JQuery version for using JQuery in a page. The system looks for jquery-[version].min.js. The JQuery module provides versions 1.12.4, 3.4.1 and 3.6.0. Other versions can be added in a separate module. \t3.6.0",
	"PE - Config - Files - Node - jahia.properties - Props - JQuery - JQuery-migratecanbeaddedhere:jahia.jquery.plugins": "JQuery mapping plugins. Includes one or more JS files every time JQuery is called in a page. Note that JQuery-migrate (jquery-migrate-3.0.1.min.js) can be added here. \tjquery-migrate-3.0.1.min.js",
	"PE - Config - Files - Node - jahia.properties - Props - SiteImport - jahia.site.import.scanner.interval": "Specifies the interval of the site import file observer in milliseconds \t30000",
	"PE - Config - Files - Node - jahia.properties - Props - Other - jahia.atmosphere.heartbeat": "Specifies the interval (in seconds) at which the system checks the validity of the session. Ask for assistance before changing this value. Introduced with Jahia 8.0.1.0. \t60",
	"PE - Config - Files - Node - jahia.properties - Props - Other - loadJahiaContext": "Automatically injects javascript/initJahiaContext.js in live mode, this is necessary for CKEditor to be loaded while in live mode. Turning this setting to false might be needed for some deployments. Introduced with Jahia 8.1.6.0 \ttrue",
	"PE - Config - Files - Node - jahia.properties - Props - Other - protectedResourceAccessStrategy": "Define behaviour when the user has no access to a resource (page or file)\nsilent : returns a 404 when the resource does not exist or is not accessible\nauthorizationError : returns a 401 for guest users and 403 for authenticated users without access \tsilent",
	"PE - Config - Files - Cluster - jahia.node.properties": "",
	"PE - Config - Files - Cluster - jahia.node.properties - Location": "located in the digital-factory-config/jahia directory.",
	"PE - Config - Files - Cluster - jahia.node.properties - Props - Cluster - cluster.activated": "Activates most of the clustering communicating \tfalse",
	"PE - Config - Files - Cluster - jahia.node.properties - Props - Cluster - cluster.node.serverId": " \tThe serverId must be unique for each node in the cluster \tdx-8f590fe5-02c3-4f8f-9cf0-a83f080d10f6",
	"PE - Config - Files - Cluster - jahia.node.properties - Props - Cluster - processingServer": "Specifies whether this instance of Jahia will execute long-running operations such as background jobs (for example workflow, imports, and text extraction). Only one cluster node may be a processing server. All other nodes must set this value to false. \ttrue",
	"PE - Config - Files - Cluster - jahia.node.properties - Props - Cluster - cluster.tcp.bindAddress": "The IP or unambiguous hostname to start the server socket on. If left empty, the IP address of first non-loopback network interface that can be detect on the machine is used.",
	"PE - Config - Files - Cluster - jahia.node.properties - Props - Cluster - cluster.tcp.bindPort": "The port number to bind the server socket to JGroups-based cluster communication for caches and Atmosphere messages.",
	"PE - Config - Files - Cluster - jahia.node.properties - Props - Cluster - cluster.hazelcast.bindPort": "The port number to bind the server socket to Hazelcast-based clustered communication for bundle deployment.",
	"PE - Config - Files - JContent - org.jahia.modules.jcontent.cfg - Props - showPageComposer": "Display a new version of Page Composer inside jContent.\n\nThis feature is currently under development and is not supported yet. This shall not be enabled on production environments. - false",
	"PE - Config - Files - JContent - org.jahia.modules.contentEditor.cfg - Props - createChildrenDirectButtons.limit": "Threshold to display a single \"New Content\" button in jContent to create content, instead of displaying one button per available content type.\nSince Content Editor 4.3.0 - 5"
	
}
