{

  "2. Docker": "SECTION",
	"2. Docker - definition": "Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers.",
	"2. Docker - deprecated": "Cloud container orchestrators deprecated docker in favour of containerd or CRI-O.",
	"2. Docker - language": "Docker is written in Go and takes advantage of several features of the Linux kernel to deliver its functionality.",
  "2. Docker - installing": "",
  "2. Docker - cloud": ".",
  "2. Docker - integration - jenkins": "",
	"2. Docker CLI": "The Docker client (docker) is the primary way that many Docker users interact with the DockerEngine.",
	"2. Docker CLI - docker system": "Manage Docker.",
	"2. Docker CLI - docker system - events": "Get real time events from the server.",
	"2. Docker CLI - docker info": ".",
	"2. Docker CLI - docker inspect": "Return low-level information on Docker objects",
	"2. Docker CLI - docker plugin": "Manage plugins.",
	"2. Docker CLI - docker version": "Show the Docker version information.",
  "2. Docker 0": "https://www.linkedin.com/posts/srushti-deshmukh-3035a8246_docker-container-backup-activity-7320367233208086529-bQky/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 1": "https://www.linkedin.com/posts/shahjahanali_docker-tutorial-pdf-activity-7321115189884448768-EYt8?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 2": "https://www.linkedin.com/posts/learnwithshruthi_docker-scenarios-debugging-root-cause-activity-7321427817823408128-7qMR?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 3": "https://www.linkedin.com/posts/josifha-ashmi-j-1770b4193_docker-commands-activity-7318789330821398530-B9xT?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 4": "https://www.linkedin.com/posts/rishabh-raj-dubey-5565a8259_docker-2-activity-7316800079724449792-cuHS/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 5": "https://www.linkedin.com/posts/vishal-machan1997_docker-activity-7317951909460393985-TFRS?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 6": "https://www.linkedin.com/posts/riyazsayyad_in-2022-i-knew-zero-about-docker-i-didn-activity-7317869437368287232-pTZY/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 7": "https://www.linkedin.com/posts/mayank-pratap-singh-415654198_docker-guide-with-20-essential-questions-activity-7317269386015166464-qBFT?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 8": "https://www.linkedin.com/posts/anil-kumar-thanniru_understand-docker-mounts-and-volumes-easily-activity-7317441488714362880-Jo6w?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 9": "https://www.linkedin.com/posts/praveenmishra55_docker-dockerlifecycle-dockerworkflow-activity-7315969344973279232-g8uY?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 10": "https://www.linkedin.com/posts/muhammad-shahzaiib_docker-dockercompose-devops-activity-7314948376272285696-V5DV?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 11": "https://www.linkedin.com/posts/taranpreet-singh-4971a9354_docker-interview-activity-7315379668545642498-5tuO?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 12": "https://www.linkedin.com/posts/ayush-sharma-%F0%9F%87%AE%F0%9F%87%B3-437b8a253_docker-devops-cloudcomputing-activity-7313078088207069184-mILU?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 13": "https://www.linkedin.com/posts/satya619_docker-or-kubernetes-what-is-docker-activity-7313778027274940416-hs7f/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 14": "https://www.linkedin.com/posts/kumar-nikhil811_docker-containerd-kubernetes-activity-7322483951929823232-WvVr?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 15": "https://www.linkedin.com/posts/mohammed-yasir-khan_docker-interview-qa-activity-7324137652343984128-Yg0l?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 16": "https://www.linkedin.com/posts/mohammed-yasir-khan_docker-notes-activity-7323987118274293760-_Fkm?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 17": "https://www.linkedin.com/posts/dileeppandiya_mastering-docker-commands-workflow-simplified-activity-7310507040404103168-kGRV?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 18": "https://www.linkedin.com/posts/maksudur-652a4926-full-stack-developer_systemdesign-coding-interviewtips-activity-7303285830972776448-R0mz?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 19": "https://www.linkedin.com/posts/akanksha-buchke_top-30-docker-interview-questions-activity-7322582891815653376-ZbBX?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 20": "https://www.linkedin.com/posts/manjunath-kotegar_docker-dockerlifecycle-dockerworkflow-activity-7324504899931557888-rODo/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 21": "https://www.linkedin.com/posts/devops-learner-community_introduction-to-docker-activity-7322484788634824709-pn72?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 22": "https://www.linkedin.com/posts/devops-expert_docker-interview-questions-and-answers-activity-7323194523180748800-J8t7?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 23": "https://www.linkedin.com/posts/suvarna-machani-771b36279_containerized-cicd-pipeline-with-jenkins-activity-7323637857540038656-fOTc?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 24": "https://www.linkedin.com/posts/devops-learner-community_docker-cheatsheet-activity-7322847267978104834-YCGt?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 25": "https://www.linkedin.com/posts/cynthia-udie-68936135b_docker-made-simple-a-beginners-guide-to-activity-7323385880063168513-Y4FU?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 26": "https://www.linkedin.com/posts/mohammed-yasir-khan_docker-interview-qa-activity-7324137652343984128-Yg0l?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 27": "https://www.linkedin.com/posts/sahil-pillania-297a84213_docker-notes-activity-7324672883467702273-ryLT?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 28": "https://www.linkedin.com/posts/balajisdevops_docker-deep-dive-activity-7325263300475129856-hnro/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 29": "https://www.linkedin.com/posts/dhruv-rana-cloudspikes_%F0%9D%90%87%F0%9D%90%A8%F0%9D%90%B0-%F0%9D%90%9D%F0%9D%90%A8%F0%9D%90%9E%F0%9D%90%AC-%F0%9D%90%83%F0%9D%90%A8%F0%9D%90%9C%F0%9D%90%A4%F0%9D%90%9E%F0%9D%90%AB-%F0%9D%90%B0%F0%9D%90%A8%F0%9D%90%AB%F0%9D%90%A4-the-activity-7324998807765618689-pK_w?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 30": "https://www.linkedin.com/posts/suhas-developer_docker-activity-7323583345471238145-aYJK?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 31": "https://www.linkedin.com/posts/haneen-khaled-2b1501289_an-academic-overview-of-docker-activity-7325230883840446464-4ddy?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 32": "https://www.linkedin.com/posts/mohammed-yasir-khan_docker-interview-qa-activity-7324137652343984128-Yg0l?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 33": "https://www.linkedin.com/posts/abdelrahman-taha99_limiting-container-memory-usage-activity-7324470886852362240-0v4S/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 34": "https://www.linkedin.com/posts/rezaan6_docker-common-fixes-activity-7326101238192730112-f6nP?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 35": "https://www.linkedin.com/posts/milan-neupane-b471ab182_docker-cheet-sheet-activity-7325867574229942272-Ha2A?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 36": "https://www.linkedin.com/posts/prince-pansuriya-167564221_day-24-activity-7315916435044687872-LsR-/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 37": "https://www.linkedin.com/posts/adityajaiswal7_devops-shack-docker-comprehensive-guide-activity-7326508732421410818-eOSu?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 38": "https://www.linkedin.com/posts/adityajaiswal7_devops-shack-how-to-guide-docker-activity-7323277437901885440-aSNA/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"2. Docker 39": "https://www.linkedin.com/posts/maheshma_devops-activity-7324968741484593153-FfsD?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 40": "https://www.linkedin.com/posts/adityajaiswal7_docker-scenario-based-implementations-devops-activity-7326829373989228544-ALNs?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 41": "https://www.linkedin.com/posts/adityajaiswal7_docker-devops-containers-activity-7326825652597248002-oUh-?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 42": "https://www.linkedin.com/posts/milan-neupane-b471ab182_docker-cheet-sheet-activity-7325867574229942272-Ha2A?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 43": "https://www.linkedin.com/posts/adityajaiswal7_devops-shack-docker-comprehensive-guide-activity-7326508732421410818-eOSu/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 44": "https://www.linkedin.com/posts/adityajaiswal7_docker-scenario-based-implementations-devops-activity-7326829373989228544-ALNs?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 45": "https://www.linkedin.com/posts/iamajaypatel_still-not-using-docker-time-to-get-started-activity-7326238700302958592-IeyR?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 46": "https://www.linkedin.com/posts/georgenica_beginners-and-ahem-seniors-dont-understand-activity-7328423040642367490-pfKr?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 47": "https://www.linkedin.com/posts/sbelhadj_docker-activity-7327939433343676418-gw0v?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 48": "https://www.linkedin.com/posts/kamrul-dev_check-docker-installation-details-part-2-activity-7326614455457316864-MMhx?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 49": "https://www.linkedin.com/posts/sakshiku945_what-is-docker-activity-7327996067080196098-Et7T?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 50": "https://www.linkedin.com/posts/zeynab-y_docker-devops-containers-activity-7327595917849640960-CVWl?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 51": "https://www.linkedin.com/posts/byte2code_docker-guide-you-need-right-now-activity-7329068102325886976-rCdl?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 52": "https://www.linkedin.com/posts/teja-rapuru-bb68171aa_docker-devops-cloudcomputing-activity-7327906880515645440-ixe1/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 53": "https://www.linkedin.com/posts/mozahid-husain_dockerinterview-activity-7328983171054686211-7cYH/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 54": "https://www.linkedin.com/posts/zouari-omar-143239283_started-working-with-docker-activity-7329279497784954880-eB48/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 55": "https://www.linkedin.com/posts/nuthan-gatla_docker-best-practices-activity-7329119459170811905-3J-s/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 56": "https://www.linkedin.com/posts/georgenica_beginners-and-ahem-seniors-dont-understand-activity-7328423040642367490-pfKr/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 57": "https://www.linkedin.com/posts/byte2code_docker-guide-you-need-right-now-activity-7329068102325886976-rCdl?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 58": "https://www.linkedin.com/posts/bharat-s-chaudhary_docker-containerization-devops-activity-7327733948418068482-F90W?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 59": "https://www.linkedin.com/posts/nanda-kumar-reddy-egavinti-3311521b2_dockererrorswithsolutions-activity-7330066573606473729-V2U6?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 60": "https://www.linkedin.com/posts/adityajaiswal7_docker-interview-questions-and-their-solutions-activity-7330095915027890176-rmJz?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 61": "https://www.linkedin.com/posts/devendranath-pvss_advanced-docker-practices-with-real-world-activity-7330435932464013312-EpjB/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 62": "https://www.linkedin.com/posts/georgenica_many-devops-people-dont-know-how-docker-activity-7330589271466176513-_-5F/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 63": "https://www.linkedin.com/posts/rim-dammak_docker-activity-7330581383234383873-ixN3?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 64": "https://www.linkedin.com/posts/devops-expert_master-docker-with-these-essential-interview-activity-7330442218467479552-l9lh?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 65": "https://www.linkedin.com/posts/mumtaz-rajper-14a35927_docker-interview-questins-and-answrs-activity-7330457407199838209-T9gR?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 66": "https://www.linkedin.com/posts/vimal-kumar-4345a534b_docker-scenario-based-implementation-deck-activity-7330147714216710144-Q6sn?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 67": "https://www.linkedin.com/posts/hasnainshaikh312_most-people-know-docker-is-used-to-%F0%9D%90%9C%F0%9D%90%A8%F0%9D%90%A7%F0%9D%90%AD%F0%9D%90%9A%F0%9D%90%A2%F0%9D%90%A7%F0%9D%90%9E%F0%9D%90%AB%F0%9D%90%A2%F0%9D%90%B3%F0%9D%90%9E-activity-7330600704660635651-I0-6?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 68": "https://www.linkedin.com/posts/arun-kumar-akula-3b5180343_docker-activity-7330262488220905472-u2e8/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 69": "https://www.linkedin.com/posts/sachin2815_docker-activity-7331304720545800192-goXU?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 70": "https://www.linkedin.com/posts/surajdevx_explaining-docker-activity-7330408031999995904-MKt3?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 71": "https://www.linkedin.com/posts/spartak-lysman_systemdesign-interviewtips-coding-activity-7330438375319011328-AijH?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 72": "https://www.linkedin.com/posts/ankur-80bbb12aa_docker-for-devops-activity-7332108385359716352-cFKQ?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 73": "https://www.linkedin.com/posts/ahmedalibutt_docker-for-devops-activity-7332361912132747264-bK3p?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 74": "https://www.linkedin.com/posts/chandra-prakash-83231163_master-docker-from-basics-to-real-world-activity-7332261652509212674-2sUh?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 75": "https://www.linkedin.com/posts/adityajaiswal7_docker-interview-questions-and-their-solutions-activity-7332282591485579265-UHv8?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 76": "https://www.linkedin.com/posts/riwaz-thapa-906170230_the-developers-superpower-docker-activity-7329690948370624513-HDVR?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 77": "https://www.linkedin.com/posts/georgenica_docker-devops-activity-7326214770972405762-AHgp?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
  "2. Docker 78": "",
  "2. Docker 79": "",
  "2. Docker 80": "",

	"3. BuildImage": "SECTION",
	"3. BuildImage - DockerFile": "Docker builds images automatically by reading the instructions from a Dockerfile, a text file that contains all commands, in order, needed to build a given image.",
  "3. BuildImage - DockerFile ": "But Docker also gives you the capability to create your own Docker images, and it can be done with the help of Docker Files. A Docker File is a simple text file with instructions on how to build your images.",
  "3. BuildImage - DockerFile - layers": "Each instruction in a Dockerfile creates a new layer in the image, and the final image is composed of all the layers stacked on top of each other.",
	"3. BuildImage - DockerFile - instructions": "It includes instructions for installing dependencies, copying files, setting environment variables, and configuring the container.",
	"3. BuildImage - DockerFile - instructions - origin - FROM": "A Dockerfile must start with a `FROM` instruction. It tells docker, from which base image you want to base your image from. FROM may only be preceded by one or more ARG instructions, which declare arguments that are used in FROM lines in the Dockerfile.",
	"3. BuildImage - DockerFile - instructions - origin - ARG": "The ARG instruction defines a variable that users can pass at build-time to the builder with the docker build command using the --build-arg <varname>=<value> flag.",
	"3. BuildImage - DockerFile - instructions - filesystem - WORKDIR": "This command is used to set the working directory of the container. WORKDIR dirname",
	"3. BuildImage - DockerFile - instructions - filesystem - COPY": "",
	"3. BuildImage - DockerFile - instructions - filesystem - ADD": "Add local or remote files and directories.",
	"3. BuildImage - DockerFile - instructions - filesystem - VOLUME": "creates a mount point with the specified name and marks it as holding externally mounted volumes from the native host or other containers.",
	"3. BuildImage - DockerFile - instructions - info - #": "# Comment INSTRUCTION arguments",
	"3. BuildImage - DockerFile - instructions - info - LABEL": "The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. To include spaces within a LABEL value, use quotes and backslashes as you would in command-line parsing.",
	"3. BuildImage - DockerFile - instructions - info - MAINTAINER": "person who is going to maintain this image.",
	"3. BuildImage - DockerFile - instructions - context - EXPOSE": "informs Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if the protocol is not specified. This makes it possible for the host and the outside world to access the isolated Docker Container",
	"3. BuildImage - DockerFile - instructions - context - ENV": "This command is used to set environment variables in the container. ENV key value sets the environment variable <key> to the value <value>. This value will be in the environment for all subsequent instructions in the build stage and can be replaced inline in many as well.",
	"3. BuildImage - DockerFile - instructions - execution - RUN": "The RUN instruction is used in Dockerfiles to execute commands that build and configure the Docker image. The RUN command is used to run instructions against the image. The RUN instruction will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile.",
	"3. BuildImage - DockerFile - instructions - execution - SHELL": "Set the default shell of an image.",
	"3. BuildImage - DockerFile - instructions - execution - USER": "Set user and group ID.",
	"3. BuildImage - DockerFile - instructions - execution - CMD": "The CMD instruction specifies the default command to run when a container is started from the Docker image. This command is used to execute a command at runtime when the container is executed. CMD command param1. CMD command param1 There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect. The main purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, or they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well.",
	"3. BuildImage - DockerFile - instructions - execution - ENTRYPOINT": "The ENTRYPOINT instruction sets the default executable for the container. Any arguments supplied to the docker run command are appended to the ENTRYPOINT command. ENTRYPOINT command param1 The ENTRYPOINT instruction works very similarly to CMD in that it is used to specify the command executed when the container is started. However, where it differs is that ENTRYPOINT doesn't allow you to override the command. Instead, anything added to the end of the docker run command is appended to the command. To understand this better, let's go ahead and change our CMD instruction to the ENTRYPOINT instruction.",
	"3. BuildImage - DockerFile - instructions - execution - ONBUILD": "Docker's ONBUILD instruction lets you set up triggers within an image.",
	"3. BuildImage - DockerFile - instructions - lifecycle - STOPSIGNAL": "SIGTERM is the default signal sent to containers to stop them. STOPSIGNAL does allow you to override the default signal sent to the container.",
	"3. BuildImage - DockerFile - instructions - lifecycle - HEALTHCHECK": "Check a container's health on startup.",
	"3. BuildImage - DockerImage ": "An image is a combination of a file system and parameters. A docker image is actually a linked list of filesystem layers. Each instruction in a Dockerfile creates a filesystem layer that describes the differences in the filesystem before and after execution of the corresponding instruction.",
	"3. BuildImage - DockerImage": "An image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional customization. For example, you may build an image which is based on the ubuntu image, but installs the Apache web server and your application, as well as the configuration details needed to make your application run.",
	"3. BuildImage - DockerImage - build": "Using 'docker build' users can create an automated build that executes several command-line instructions in succession. he docker build command builds an image from a Dockerfile and a context.",
	"3. BuildImage - DockerImage - re build": "Each instruction in a Dockerfile creates a layer in the image. When you change the Dockerfile and rebuild the image, only those layers which have changed are rebuilt. This is part of what makes images so lightweight, small, and fast, when compared to other virtualization technologies.",
	"3. BuildImage - DockerImage - creation": "You might create your own images or you might only use those created by others and published in a registry. To build your own image, you create a Dockerfile with a simple syntax for defining the steps needed to create the image and run it.",
	"3. BuildImage - DockerImage - Image Layers": "A Docker image consists of read-only layers each of which represents a Dockerfile instruction. Each layer represents an instruction in the image’s Dockerfile. The layers are stacked and each one is a delta of the changes from the previous layer.",
	"3. BuildImage - DockerImage - Image Layers - read only ": "Each layer except the very last one is read-only.",
	"3. BuildImage - DockerImage - Image Layers - Container Layer": "When you create a new container, you add a new writable layer on top of the underlying layers. This layer is often called the “container layer”. All changes made to the running container, such as writing new files, modifying existing files, and deleting files, are written to this thin writable container layer. ",
  "3. BuildImage - DockerImage - details": "This command is used see the details of an image or container. docker inspect Repository",
  "3. BuildImage - DockerImage - history": "With this command, you can see all the commands that were run with an image via a container. docker history ImageID",
  "3. BuildImage - Storage": "docker info ",
	"3. BuildImage - Storage Drivers": "Storage drivers allow you to create data in the writable layer of your container. The files won’t be persisted after the container stops, and both read and write speeds are low.",
	"3. BuildImage - Data volumes": "In Docker, you have a separate volume that can shared across containers. These are known as data volumes. Some of the features of data volume are − They are initialized when the container is created. They can be shared and also reused amongst many containers. Any changes to the volume itself can be made directly. They exist even after the container is deleted.",
  "3. BuildImage - Data volumes - create": "A volume can be created beforehand using the docker command. Let’s learn more about this command. docker volume create –-name=volumename –-opt options",
  "3. BuildImage - Data volumes - list": "You can also list all the docker volumes on a docker host. More details on this command is given below − docker volume ls",
  "3. BuildImage - Networks": "Docker takes care of the networking aspects so that the containers can communicate with other containers and also with the Docker Host. If you do an ifconfig on the Docker Host, you will see the Docker Ethernet adapter. This adapter is created when Docker is installed on the Docker Host.",
  "3. BuildImage - Networks - list": "This command can be used to list all the networks associated with Docker on the host. docker network ls",
  "3. BuildImage - Networks - inspect": "If you want to see more details on the network associated with Docker, you can use the Docker network inspect command. docker network inspect networkname",
  "3. BuildImage - Networks - create": "One can create a network in Docker before launching containers. This can be done with the following command − docker network create –-driver drivername name",
	"3. BuildImage - Docker Scout": "Docker Scout is a solution for proactively enhancing your software supply chain security. By analyzing your images, Docker Scout compiles an inventory of components, also known as a Software Bill of Materials (SBOM). The SBOM is matched against a continuously updated vulnerability database to pinpoint security weaknesses.",
	"3. BuildImage - Docker Hub": "",
	"3. BuildImage - Docker CLI - docker image": "The default docker images will show all top level images, their repository and tags, and their size.",
	"3. BuildImage - Docker CLI - docker image import": ".",
	"3. BuildImage - Docker CLI - docker image load": ".",
	"3. BuildImage - Docker CLI - docker image save": "Save one or more images to a tar archive (streamed to STDOUT by default).",
	"3. BuildImage - Docker CLI - docker manifest": "Manage Docker image manifests and manifest lists.",
	"3. BuildImage - Docker CLI - docker build": "This method allows the users to build their own Docker images. docker build -t ImageName:TagName dir",
	"3. BuildImage - Docker CLI - docker trust": "Manage trust on Docker images.",
	"3. BuildImage - Docker CLI - docker search": "Search Docker Hub for images.",
	"3. BuildImage - Docker CLI - docker volume": ".",
	"3. BuildImage - Docker CLI - docker network": "Manage networks. You can use subcommands to create, inspect, list, remove, prune, connect, and disconnect networks.",
	"3. BuildImage - Docker CLI - docker scout": "Command line tool for Docker Scout.",

	"4. RunImageOnDev": "SECTION",
	"4. RunImageOnDev - Container": "",
	"4. RunImageOnDev - DockerEngine": "Docker containers run on any machine or virtual machine where the Docker engine is installed. And they run without knowledge of the underlying system architecture.",
	"4. RunImageOnDev - DockerEngine - ControlGroups": "Docker Engine on Linux also relies on another technology called control groups (cgroups). A cgroup limits an application to a specific set of resources. Control groups allow Docker Engine to share available hardware resources to containers and optionally enforce limits and constraints. For example, you can limit the memory available to a specific container.",
	"4. RunImageOnDev - DockerEngine - UnionFileSystems": "Union file systems, or UnionFS, are file systems that operate by creating layers, making them very lightweight and fast. Docker Engine uses UnionFS to provide the building blocks for containers. Docker Engine can use multiple UnionFS variants, including AUFS, btrfs, vfs, and DeviceMapper.",
	"4. RunImageOnDev - DockerEngine - ContainerFormat": "Docker Engine combines the namespaces, control groups, and UnionFS into a wrapper called a container format. The default container format is libcontainer. In the future, Docker may support other container formats by integrating with technologies such as BSD Jails or Solaris Zones.",
	"4. RunImageOnDev - DockerEngine - DockerDaemon": "The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. A daemon can also communicate with other daemons to manage Docker services.",
  "4. RunImageOnDev - DockerEngine - run": "To run Jenkins and map the ports, you need to change the Docker run command and add the ‘p’ option which specifies the port mapping. So, you need to run the following command − sudo docker run -p 8080:8080 -p 50000:50000 jenkins",
	"4. RunImageOnDev - DockerEngine - start": "service docker start",
  "4. RunImageOnDev - DockerEngine - stop": "service docker stop",
	"4. RunImageOnDev - DockerMachine - 2014": "Typically, you install Docker Machine on your local system. Docker Machine is a tool that lets you install Docker Engine on virtual hosts, and manage the hosts.",
	"4. RunImageOnDev - DockerMachine - deprecated": "Docker Machine, which Docker has deprecated as of 2021-09-27. This is the original implementation of Docker for macOS and Wndows.",
	"4. RunImageOnDev - DockerMachine - virtualization": "You have a special VM image (Docker Machine) that needs a third party virtualization solution like VirtualBox or Parallels to run.",
	"4. RunImageOnDev - DockerMachine - docker-machine": "You can use Machine to create Docker hosts on your local Mac or Windows box, on your company network, in your data center, or on cloud providers like Azure, AWS, or Digital Ocean. Using docker-machine commands, you can start, inspect, stop, and restart a managed host, upgrade the Docker client and daemon, and configure a Docker client to talk to your host.",
	"4. RunImageOnDev - DockerMachine - docker-machine - active": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - config": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - create": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - env": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - help": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - inspect": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - ip": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - kill": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - ls": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - mount": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - provision": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - regenerate-certs": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - restart": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - rm": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - ssp": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - sch": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - start": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - status": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - stop": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - upgrade": "",
	"4. RunImageOnDev - DockerMachine - docker-machine - url": "",
	"4. RunImageOnDev - DockerCompose - 2013": "Docker Compose is used to run multiple containers as a single service. For example, suppose you had an application which required NGNIX and MySQL, you could create one file which would start both the containers as a service without the need to start each one separately. Docker Compose offers a number of benefits over the Docker CLI in all stages of development.",
  "4. RunImageOnDev - DockerCompose - compose - docker-compose.yml": "Docker Compose is a recipe of services that make up an application and the docker-compose.yml dictates how the services are mixed together. All Docker Compose files are YAML files.",
	"4. RunImageOnDev - DockerCompose - commands - build": "Build or rebuild services",
	"4. RunImageOnDev - DockerCompose - commands - bundle": "Generate a Docker bundle from the Compose file",
	"4. RunImageOnDev - DockerCompose - commands - config": "Validate and view the Compose file",
	"4. RunImageOnDev - DockerCompose - commands - create": "Create services",
	"4. RunImageOnDev - DockerCompose - commands - down": "Stop and remove containers, networks, images, and volumes",
	"4. RunImageOnDev - DockerCompose - commands - events": "Receive real time events from containers",
	"4. RunImageOnDev - DockerCompose - commands - exec": "Execute a command in a running container",
	"4. RunImageOnDev - DockerCompose - commands - help": "Get help on a command",
	"4. RunImageOnDev - DockerCompose - commands - images": "List images",
	"4. RunImageOnDev - DockerCompose - commands - kill": "Kill containers",
	"4. RunImageOnDev - DockerCompose - commands - logs": "View output from containers",
	"4. RunImageOnDev - DockerCompose - commands - pause": "Pause services",
	"4. RunImageOnDev - DockerCompose - commands - port": "Print the public port for a port binding",
	"4. RunImageOnDev - DockerCompose - commands - ps": "List containers",
	"4. RunImageOnDev - DockerCompose - commands - pull": "Pull service images",
	"4. RunImageOnDev - DockerCompose - commands - push": "Push service images",
	"4. RunImageOnDev - DockerCompose - commands - restart": "Restart services",
	"4. RunImageOnDev - DockerCompose - commands - rm": "Remove stopped containers",
	"4. RunImageOnDev - DockerCompose - commands - run": "Run a one-off command",
	"4. RunImageOnDev - DockerCompose - commands - scale": "Set number of containers for a service",
	"4. RunImageOnDev - DockerCompose - commands - start": "Start services",
	"4. RunImageOnDev - DockerCompose - commands - stop": "Stop services",
	"4. RunImageOnDev - DockerCompose - commands - top": "Display the running processes",
	"4. RunImageOnDev - DockerCompose - commands - unpause": "Unpause services",
	"4. RunImageOnDev - DockerCompose - commands - up": "Create and start containers",
	"4. RunImageOnDev - DockerCompose - commands - version": "Show the Docker-Compose version information",
  "4. RunImageOnDev - DockerCompose - compose - run": "Now let’s run our Docker Compose file using the following command −sudo ./docker-compose up.",
	"4. RunImageOnDev - DockerCLI - docker container": ".",
	"4. RunImageOnDev - DockerCLI - docker container - list": "One can list all of the containers on the machine via the docker ps command. This command is used to return the currently running containers.",
  "4. RunImageOnDev - DockerCLI - docker container - processes": "With this command, you can see the top processes within a container. docker top ContainerID",
  "4. RunImageOnDev - DockerCLI - docker container - attach": "docker attach ContainerID",
	"4. RunImageOnDev - DockerCLI - docker container - commit": "Create a new image from a container's changes.",
  "4. RunImageOnDev - DockerCLI - docker container - run": "Running of containers is managed with the Docker run command. To run a container in an interactive mode, first launch the Docker container. sudo docker run –it centos /bin/bash docker run –it centos /bin/bash",  
  "4. RunImageOnDev - DockerCLI - docker container - stats": "docker rm ContainerID",
  "4. RunImageOnDev - DockerCLI - docker container - pause": "docker pause ContainerID",
  "4. RunImageOnDev - DockerCLI - docker container - unpause": "docker unpause ContainerID",
	"4. RunImageOnDev - DockerCLI - docker container - start": "Start one or more stopped containers.",
	"4. RunImageOnDev - DockerCLI - docker container - restart": "Restart one or more containers.",
	"4. RunImageOnDev - DockerCLI - docker container - stop": "docker stop ContainerID",
  "4. RunImageOnDev - DockerCLI - docker container - kill": "docker kill ContainerID",
  "4. RunImageOnDev - DockerCLI - docker container - delete": "docker rm ContainerID",
	"4. RunImageOnDev - DockerCLI - docker container - rm": "Remove one or more containers.",
	"4. RunImageOnDev - DockerCLI - docker container - exec": "Execute a command in a running container.",
  "4. RunImageOnDev - DockerCLI - docker container - linking": "Container Linking allows multiple containers to link with each other. It is a better option than exposing ports.",
	"4. RunImageOnDev - DockerCLI - docker container - top": "Display the running processes of a container.",
	"4. RunImageOnDev - DockerCLI - docker container - export": "Export a container's filesystem as a tar archive.",
	"4. RunImageOnDev - DockerCLI - docker container - logs": "Fetch the logs of a container.",
	"4. RunImageOnDev - DockerCLI - docker container - cp": "Copy files/folders between a container and the local filesystem.",
	"4. RunImageOnDev - DockerCLI - docker container - create": "The docker container create (or shorthand: docker create) command creates a new container from the specified image, without starting it.",
	"4. RunImageOnDev - DockerCLI - docker container - diff": "Inspect changes to files or directories on a container's filesystem.",
	"4. RunImageOnDev - DockerCLI - docker container - port": "List port mappings or a specific mapping for the container.",
	"4. RunImageOnDev - DockerCLI - docker container - rename": "Rename a container.",
	"4. RunImageOnDev - DockerCLI - docker container - update": "Update configuration of one or more containers.",
	"4. RunImageOnDev - DockerCLI - docker container - wait": "Block until one or more containers stop, then print their exit codes.",
	"4. RunImageOnDev - DockerCLI - docker ps": "List containers.",
	"4. RunImageOnDev - DockerCLI - docker checkpoint": "Checkpoint and Restore is an experimental feature that allows you to freeze a running container by specifying a checkpoint, which turns the container state into a collection of files on disk. Later, the container can be restored from the point it was frozen..",
	"4. RunImageOnDev - DockerDesktop - 2016": "Since its release in 2016, Docker Desktop has been seen as the replacement for Docker Machine to develop with containers on macOS and Windows. Not only does Docker Desktop provide a Docker API endpoint but it also provides transparent handling of file sharing and networking between the host and VM which make container development easier.",
	"4. RunImageOnDev - DockerDesktop - GUI": "Docker Desktop is a one-click-install application for your Mac, Linux, or Windows environment that lets you build, share, and run containerized applications and microservices. It provides a straightforward GUI (Graphical User Interface) that lets you manage your containers, applications, and images directly from your machine..",
	"4. RunImageOnDev - DockerDesktop - scope": "The easiest and recommended way to get Docker Compose is to install Docker Desktop. Docker Desktop includes Docker Compose along with Docker Engine and Docker CLI which are Compose prerequisites.",
	"4. RunImageOnDev - DockerDesktop - virtualization": "Docker Desktop doesn’t need a third party virtualization because it depends on native OS virtualization methods.",
	"4. RunImageOnDev - DockerDesktop - dev": "Docker Desktop provides development environments for both of container orchestrators.",
	"4. RunImageOnDev - DockerPersonal - 2021": "As announced on 31 August 2021, Docker Desktop will turn into Docker Personal and it will be only available freely for small businesses, personal use, education, and non-commercial open source projects. For other use case, a paid subscription is required. It will be an issue, since most developer will install Docker Desktop themselves and used in the commercial environment. A free distribution of Docker installation is required for such environment as a new default.",

	"5. AddImageToRegistry": "SECTION",
  "5. AddImageToRegistry - Docker registries - download": "Images can be downloaded from Docker Hub using the Docker run command. docker run image",
  "5. AddImageToRegistry - Docker registries - remove": "The Docker images on the system can be removed via the docker rmi command. Let’s look at this command in more detail. docker rmi",
  "5. AddImageToRegistry - Docker registries - public repos": "Public repositories can be used to host Docker images which can be used by everyone else.",
  "5. AddImageToRegistry - Docker registries - public repos - push": "This method allows one to push images to the Docker Hub. docker push Repositoryname",
  "5. AddImageToRegistry - Docker registries - public repos - tag": "This method allows one to tag an image to the relevant repository. docker tag imageID Repositoryname",
	"5. AddImageToRegistry - Docker registries": "A Docker registry stores Docker images. A registry is a storage and content delivery system, holding named Docker images, available in different tagged versions.",
	"5. AddImageToRegistry - Docker registries - Docker Cloud": ".",
	"5. AddImageToRegistry - Docker registries - DTR": "If you use Docker Datacenter (DDC), it includes Docker Trusted Registry (DTR).",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - install": "",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - join": "",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - reconfigure": "",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - remove": "",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - destroy": "",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - restore": "",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - backup": "",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - upgrade": "",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - images": "",
	"5. AddImageToRegistry - Docker registries - DTR - DTR CLI - emergency-repair": "",
	"5. AddImageToRegistry - Docker registries - Docker Hub": "Docker Hub is a public registry managed by Docker, Inc. It centralizes information about organizations, user accounts, and images. It includes a web UI, authentication and authorization using organizations, CLI and API access using commands such as docker login, docker pull, and docker push, comments, stars, search, and more. Docker is configured to look for images on Docker Hub by default.",
	"5. AddImageToRegistry - Docker registries - Docker Store": "Docker store allows you to buy and sell Docker images or distribute them for free. For instance, you can buy a Docker image containing an application or service from a software vendor and use the image to deploy the application into your testing, staging, and production environments. You can upgrade the application by pulling the new version of the image and redeploying the containers.",
	"5. AddImageToRegistry - Docker CLI - docker push": "Use docker image push to share your images to the Docker Hub registry or to a self-hosted one.",
	"5. AddImageToRegistry - Docker CLI - docker pull": "To download a particular image, or set of images (i.e., a repository), use docker pull.",
	"5. AddImageToRegistry - Docker CLI - docker login": "Log in to a registry",
	"5. AddImageToRegistry - Docker CLI - docker logout": "Log out from a registry. If no server is specified, the default is defined by the daemon.",

	"6. Docker Swarm": "SECTION",
	"6. Docker Swarm - description": "Docker Swarm orchestrates a cluster of Docker engines, treating them as a single virtual system for managing and deploying containerized applications.",
	"6. Docker Swarm - Swarn": "A swarm is a collection of nodes that are in the same Docker cluster.",
	"6. Docker Swarm - Swarn - nodes": "A swarm is made up of multiple nodes, which can be either physical or virtual machines.",
	"6. Docker Swarm - Swarn - modes": "Node in a Docker swarm operate in one of two modes: Manager or Worker. If nodes are not already running in a swarm when installing UCP, nodes will be configured to run in swarm mode.",
	"6. Docker Swarm - Swarn - Swarn Manager": "Swarm managers can use several strategies to run containers, such as “emptiest node” -- which fills the least utilized machines with containers. Or “global”, which ensures that each machine gets exactly one instance of the specified container. You instruct the swarm manager to use these strategies in the Compose file, just like the one you have already been using. Swarm managers are the only machines in a swarm that can execute your commands, or authorize other machines to join the swarm as workers. Workers are just there to provide capacity and do not have the authority to tell any other machine what it can and cannot do. Up until now, you have been using Docker in a single-host mode on your local machine. But Docker also can be switched into swarm mode, and that’s what enables the use of swarms. Enabling swarm mode instantly makes the current machine a swarm manager. From then on, Docker runs the commands you execute on the swarm you’re managing, rather than just on the current machine.",
	"8. Docker CLI - docker swarm": ".",
	"8. Docker CLI - docker node": "This command works with the Swarm orchestrator.",
	"8. Docker CLI - docker config": "Manage Swarm configs.",
	"8. Docker CLI - docker secret": "Manage Swarm secrets.",
	"8. Docker CLI - docker stack": "Manage Swarm stacks.",
	"8. Docker CLI - docker stack - deploy": "Deploy a new stack or update an existing stack.",

	"7. DeployContainer": "SECTION",

	"8. ManageCO": "SECTION",
	"8. ManageCO - Docker - Service": "Services are really just 'containers in production'. A service only runs one image, but it codifies the way that image runs—what ports it should use, how many replicas of the container should run so the service has the capacity it needs, and so on. Scaling a service changes the number of container instances running that piece of software, assigning more computing resources to the service in the process.",
	"8. ManageCO - Docker - Services": "Services allow you to scale containers across multiple Docker daemons, which all work together as a swarm with multiple managers and workers. Each member of a swarm is a Docker daemon, and the daemons all communicate using the Docker API. A service allows you to define the desired state, such as the number of replicas of the service that must be available at any given time. By default, the service is load-balanced across all worker nodes. To the consumer, the Docker service appears to be a single application. Docker Engine supports swarm mode in Docker 1.12 and higher.",
	"8. ManageCO - Docker CLI - docker service": ".",
	"8. ManageCO - UCP": "Docker Universal Control Plane (UCP). Docker Universal Control Plane (UCP) is the enterprise-grade cluster management solution from Docker that runs on Docker Enterprise Edition.",
	"8. ManageCO - UCP - UCP CLI - install": "",
	"8. ManageCO - UCP - UCP CLI - start": "",
	"8. ManageCO - UCP - UCP CLI - stop": "",
	"8. ManageCO - UCP - UCP CLI - upgrade": "",
	"8. ManageCO - UCP - UCP CLI - images": "",
	"8. ManageCO - UCP - UCP CLI - unistall-ucp": "",
	"8. ManageCO - UCP - UCP CLI - dump-certs": "",
	"8. ManageCO - UCP - UCP CLI - support": "",
	"8. ManageCO - UCP - UCP CLI - id": "",
	"8. ManageCO - UCP - UCP CLI - backup": "",
	"8. ManageCO - UCP - UCP CLI - restore": "",
	"8. ManageCO - UCP - UCP CLI - example-config": ""

}
