{
	"JS types": "SECTION",
	"JS Types - ES6": "ECMAScript 6 introduced the let and const keywords. These keywords can be used in place of the var keyword.",

	"Data": "SECTION",
	"Data - DataTypes - Fundamental": "These are stored directly in the stack, which is a simple memory allocation delivering quick access.",
	"Data - DataTypes - Fundamental - Undefined": "",
	"Data - DataTypes - Fundamental - Null": "",
	"Data - DataTypes - Fundamental - String": "",
	"Data - DataTypes - Fundamental - Number": "",
	"Data - DataTypes - Fundamental - Boolean": "",
	"Data - DataTypes - Fundamental - Symbol": "",
	"Data - DataTypes - Reference": "Reference types store a reference to the object in the stack, while the object itself lives in the heap, a more complex but expansive memory structure.",
	"Data - DataTypes - Reference - Array": "",
	"Data - DataTypes - Reference - Map": "let map = new Map(); https://medium.com/@jacobmacinnis/javascript-map-vs-javascript-object-vs-traditional-hash-tables-83e5c3068fbd",
	"Data - DataTypes - Reference - Object": "",
	"Data - DataTypes - Inmutable - Record": "A Record is an immutable collection of key-value pairs, similar to JavaScript objects, but Records are immutable and have deep equality. Records are created using an object-like literal syntax prefixed with #. const record = #{ key1: 'value1', key2: 'value2' };",
	"Data - DataTypes - Inmutable - Tuple": "A Tuple is an immutable ordered list, similar to JavaScript arrays, but Tuples are immutable and have deep equality. Tuples are created using an array-like literal syntax prefixed with #. const tuple = #['value1', 'value2'];",
	"Data - DataTypes - Copy - Shallow": "Shallow Copy means the original data is unaffected by changes to the copied data for fundamental types. For reference types, a shallow copy might duplicate the first layer of an object, protecting the original data when modifying shallow properties in the copied object. https://javascript.plainenglish.io/is-the-spread-operator-a-deep-copy-261c109fb708",
	"Data - DataTypes - Copy - Deep": "Deep Copy represents limitless hierarchical duplication. Changes to either fundamental or reference data types in the deep copy do not affect the original.",
	"Data - DataTypes - Destructuring": "Destructuring was introduced in ES6. It’s a JavaScript feature that allows us to extract multiple pieces of data from an array or object and assign them to their own variables. const { firstName, lastName, city } = person;.",

	"Logic": "SECTION",
	"Logic - Conditions - if": "",
	"Logic - Conditions - switch": "",
	"Logic - Loops - forEach": "",
	"Logic - Loops - forEach - problem - break continue": "The flow of a forEach loop is uninterruptible. If you wish to break/continue an iteration, you are better off using the class “for i” loop or the “for of” loop statement.",
	"Logic - Loops - forEach - problem - no async": "The forEach loop will not wait for the completion of async functions, which could lead to unexpected output orders.",
	"Logic - Loops - forEach - problem - no Modify": "https://levelup.gitconnected.com/4-major-problems-with-javascript-foreach-b79f717c61b8",
	"Logic - Loops - forEach - problem - exception": "In other words, if an error occurs inside a forEach, the error will not be caught by the loop itself, which means you must handle exceptions explicitly within the callback.",
	"Logic - Loops - for...of": "Preferred. The for...of loop, introduced in ES6, offers a more flexible way to iterate over iterable objects (including arrays): ",
	"Logic - Loops - for...of - advantages - async": "for...of waits for the previous iteration to complete, ensuring sequential execution and more predictable behavior.",
	"Logic - Loops - for...of - advantages - break": "for...of waits support break and continue statements. forEach do not support them",
	"Logic - Loops - for...of - examples - object properties": "for( const[key,value] of Object.entries(user)) { ... }",
	"Logic - Loops - for...of - examples - destructuring": "for( const {name, age} of users) { ... }",
	"Logic - Functional": "SECTION",
	"Logic - Functional - Monads": "https://medium.com/@yourfuse/what-are-monads-in-javascript-and-how-can-they-improve-your-functional-programming-e42e56e7af9d https://medium.com/javascript-scene/javascript-monads-made-simple-7856be57bfe8",
	"Logic - Functional - Monads2": "https://javascript.plainenglish.io/50-single-line-code-examples-that-showcase-your-fundamental-skills-ea495082de45",
	"Logic - Async": "",
	"Logic - Async - Callback": "take a function as an argument that would be called when the response is available, freeing the CPU for other things while we wait for the response. in Node.js, almost every call is asynchronous",
	"Logic - Async - Callback - Callback Hell": "Callbacks are very good for the CPU but they are not so good for the programmer. multiple, deep nested callbacks within a function",
	"Logic - Async - Generator Function (ES6)": "Functions in JavaScript are known as “run to completion”. When a function is invoked, the body of the function will execute until it reaches the end. The function can’t be paused for other code to execute. Generator functions however are not “run to completion”. Generator functions can be paused and resumed so that other code can execute in between. The great thing about this behavior is that we can use generators to manage flow control. Because generators allow us to pause execution, we can easily cancel asynchronous operations. Generators also allow us to turn asynchronous code into synchronous-looking code. When you invoke a generator function, it won’t execute the body of the function like a regular function. Instead, it will return a generator object called an iterator.",
	"Logic - Async - Generator Function - example": "A generator function is declared just like a regular function but with an asterisk after the function keyword: function *myGenerator() {}, let iterator = myGenerator(), let firstYield = iterator.next(),",
	"Logic - Async - Promises (ES6)": "A promise represents the eventual result of an asynchronous operation. It is a placeholder into which the successful result value or reason for failure will materialize. ES6 follows the standard Promises/A+ [1].",
	"Logic - Async - Promises - States": "A promise can be in one of 3 states:(1) Pending - the promise’s outcome hasn’t yet been determined, because the asynchronous operation that will produce its result hasn’t completed yet. (2) Fulfilled - the asynchronous operation has completed, and the promise has a value. (3) Rejected - the asynchronous operation failed, and the promise will never be fulfilled. In the rejected state, a promise has a reason that indicates why the operation failed..",
	"Logic - Async - Promises - Creation": "new Promise( /* executor */ function(resolve, reject) { ... } ).",
	"Logic - Async - Promises - Parallel": "When you need to execute multiple asynchronous operations in parallel and continue executing subsequent code only when all asynchronous operations complete successfully. Promise.all([ asyncFunc1(), asyncFunc2(), ]).then(([result1, result2]) => {  ··· })",
	"Logic - Async - Promises - Parallel Wait": "When you want to wait for multiple asynchronous operations to complete and you need to know the result of each asynchronous operation. Promise.allSettled([promise1, promise2, promise3]).then((values) => { console.log(values); });",
	"Logic - Async - Promises - Race": "When you have multiple asynchronous operations and you only care which one completes first, whether it succeeds or fails. Promise.race([promise1, promise2, promise3]).then((values) => { console.log(values); });",
	"Logic - Async - Promises - Any": "When you have multiple asynchronous operations and you want to get the result of the first successful asynchronous operation and ignore the other asynchronous operations that have failed. Promise.any([promise1, promise2, promise3]).then((values) => { console.log(values); });",
	"Logic - Async - Promises - Resolvers": "In some scenarios, we want to control the state of the Promise object externally. For example, in the scenario of requesting network data, the resolve method is called to set the return data of the current Promise only after all data is successfully received. https://javascript.plainenglish.io/ecmascript-2024-es15-is-coming-5-new-js-features-you-cant-miss-0d2833a53cfc",
	"Logic - Async - Promises - Chaining": "asyncFunc1().then().then()....",
	"Logic - Async - Promises - Handling Errors": ".then(function (greeting) { .... }, function(error) { ... }), or .then(result2 => { ... }) catch(error => { ... })",
	"Logic - Async - async/await": "The word “async” before a function means one simple thing: a function always returns a promise. The keyword await, works only inside async functions, makes JavaScript wait until that promise settles and returns its result.",
	"Logic - Async - async/await - Handling Errors": "await Promise.reject(new Error('Whoops!')), or throw new Error('Whoops!')",
	"Logic - Async - async/await - Global level await": "Before ES13 we could never use await in the global scope. We always had to put it in an async function or create an async IIFE. After ES13 we can. https://medium.com/coding-beauty/best-es13-js-features-f4517fffddc7",
	"Logic - Async - Observables": "An Observable is an array or a sequence of events over time. It has at least two participants, the creator (the data source) and the subscriber (subscription where data is being consumed)",
	"Logic - Async - Observables - Observable": "you create an Observable instance that defines a subscriber function. This is the function that is executed when a consumer calls the subscribe() method producing vales asynchonously.",
	"Logic - Async - Observables - Observable handler": "implements the Observer interface. Defines callback methods to handle the three types of notifications that an observable can send: next, error and complete",
	"Logic - Async - Observables - Subscribing to Observable": "An Observable instance begins publishing values only when someone subscribes to it. You subscribe by calling the subscribe() method of the instance, passing an observer object to receive the notifications.",
	"Logic - Async - Observables - Observable Multicasting": "practice of broadcasting to a list of multiple subscribers in a single execution.",
	"Logic - Async - Observables - Observable Error Handling": "error callback on the observer",
	"Logic - Async - Observables - Observable Unsubscribe": "On the ngOnDestroy lifecycle hook, unsubscribe to subscription to prevent memory leaks",
	"Logic - Async - Observables - RxJS Operators List": "Creation (from, fromPromise, fromEvent, of), Combination (combineLatest , concat , merge , startWith , withLatestFrom , zip), Filtering (debounceTime , distinctUntilChanged , filter , take , takeUntil), Transformation (bufferTime , concatMap , map , mergeMap , scan , switchMap), Utility (tap), Multicasting  (share)",
	"Logic - Async - Observables - RxJS Error Handling": "catchError operator",
	"Logic - Async - Observables - RxJS Retry failed observable": "Use the retry operator before the catchError operator. It resubscribes to the original source observable, which can then re-run the full sequence of actions that resulted in the error. If this includes an HTTP request, it will retry that HTTP request.",
	"Logic - Async - Observables - Examples": "(1) EventEmitter class extends Observable, (2) HTTP module uses observables to handle AJAX requests and responses, (3) Router and Forms modules use observables",
	"Logic - Async - Observables - Observables compared to promises. Creation and subscription": "Observables are declarative, computation does not start until subscription. Promises execute immediately on creation",
	"Logic - Async - Observables - Observables compared to promises. Chaining": "Observables differentiate between chaining and subscription. Promises only have .then() clauses",
	"Logic - Async - Observables - Observables compared to promises. Cancellation": "Observable subscriptions are cancellable. Unsubscribing removes the listener. Promises are not cancellable.",
	"Logic - Async - Observables - Observables compared to promises. Error Handling": "Observables subscribe() is responsible for handling errors. Promises push errors to the child promises (then().then().then().catch())",
	"Logic - Async - Observables - Observables compared to promises. Multiplicity": "Observables provide many values. Promises provide one",
	"Logic - Async - Observables - Observables compared to events API": "you can configure an observable to transform an event before passing the event to the handler",
	"Logic - Async - Observables - Observables compared to arrays": "An observable produces values over time. An array is created as a static set of values. In a sense, observables are asynchronous where arrays are synchronous. ",

	"CICD - Packaging": "SECTION",
	"CICD - Packaging - Functions - Arrow": "(a,b)=>a+b;",
	"CICD - Packaging - Functions - Strict": "Strict Mode imposes restrictions that save hours of debugging. With Strict Mode, you’ll get an error if a variable doesn’t exist or has a typo, stopping your app from running and pinpointing the bug immediately. It throws visible errors for silent issues like wrong variable names and prevents using reserved keywords that could cause future problems. Use the use strict line to enable Strict Mode anywhere in your code. I recommend placing it in the global context. It will cover the entire file.",
	"CICD - Packaging - Functions - Pure": "If I call a pure function, it will only take the data passed as parameters, perform an X operation, and return the output as a value. Pure functions do not print the output, call another function, perform another Y operation, etc. They only return a value.",
	"CICD - Packaging - Functions - Hoisting": "Hoisting is a concept or behavior in JavaScript where the declaration of a function, variable, or class goes to the top of the scope they were defined in. Hoisting a variable inside a function is a very useful and preferred way of dealing with a variable without even declaring it. It mainly helps to keep variables as local variables in a function and can be used only inside a function. Also note hoisting won’t be allowed if you are executing JavaScript in Strict mode which has ECMAScript version 5, in that it is not legal to use a variable before its declaration and will throw an error.",
	"CICD - Packaging - Closure": "A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function’s variables, and it has access to the global variables.",
	"CICD - Packaging - Modules": "A module is just a file. One script is one module. As simple as that. Modules can load each other and use special directives export and import to interchange functionality, call functions of one module from another one:",
	"CICD - Packaging - Modules - ESM": "ECMAScript Module (ESM)",
	"CICD - Packaging - Modules - ESM - standard": "ESM is the official standard module system for modern JavaScript and is natively supported by the latest versions of browsers.",
	"CICD - Packaging - Modules - ESM - static": "Unlike CommonJS, they are designed to be static, which means you cannot dynamically load or create modules at runtime.",
	"CICD - Packaging - Modules - ESM - async loading": "Since ESM was introduced to Node.js, its asynchronous loading feature and module resolution logic have been well received.",
	"CICD - Packaging - Modules - ESM - export": "",
	"CICD - Packaging - Modules - ESM - import": "",
	"CICD - Packaging - Modules - ESM - import default": "",
	"CICD - Packaging - Modules - CommonJS": "CommonJS (CJS).",
	"CICD - Packaging - Modules - CommonJS - require": "CJS uses the require function to load modules and expose code as a module using either module.exports or exports objects.",
	"CICD - Packaging - Modules - CommonJS - NodeJS": "CommonJS is a module system natively supported by Node.js, initially introduced to meet the needs of server-side modularity. .js file extension is by default associated with CommonJS modules.",
	"CICD - Packaging - Modules - package.js": "Node.js allows the use of .mjs file extension or explicitly specifying the “type”: “module” property in package.json to indicate ESM modules.",
	"CICD - Packaging - Modules - compatibility": "Using require to load ES modules is not supported because ES modules are executed asynchronously. So, there’s nothing wrong with supporting require() for ESM that doesn’t include top-level await. Although some libraries may have valid reasons to use top-level await, it may not be so common.",
	"CICD - Packaging - Modules - compatibility - joyeecheung": "https://levelup.gitconnected.com/commonjs-and-es-module-are-finally-going-to-be-compatible-with-each-other-39b8b880796b.",
	"CICD - Packaging - Modules - compatibility - polyfill": "https://amy-blankenship.medium.com/those-scary-stories-about-polyfill-io-theyre-just-the-beginning-5e24e7b5fe8a.",
	"CICD - Packaging - package managers - npm": "",
	"CICD - Packaging - package managers - yarn": "",
	"CICD - Packaging - package managers - JSR": "https://denoland.medium.com/jsr-is-not-another-package-manager-77fa596c345d",
	"CICD - Packaging - runtime - node": "",

	"CICD - Execution": "SECTION",
	"CICD - Execution - JS Scopes": "The namespace is sometimes an interchangeable word for scope, but usually the refers to the highest level scope. They are: Global, Function, Lexical (Closures), Block (ES6",
	"CICD - Execution - JS Scopes - Global Scope": "Contrary to the var keyword, the let and const keywords support the declaration of local scope inside block statements.",
	"CICD - Execution - JS Scopes - Local/Function Scope": "All scopes in JavaScript are created with Function Scope only, they aren’t created by for or while loops or expression statements like if or switch. New functions = new scope - that’s the rule..",
	"CICD - Execution - JS Scopes - Lexical Scope": "Whenever you see a function within another function, the inner function has access to the scope in the outer function, this is called Lexical Scope or Closure - also referred to as Static Scope. Any variables/objects/functions defined in its parent scope, are available in the scope chain. ",
	"CICD - Execution - JS Scopes - Block Scope (ES6)": "Contrary to the var keyword, the let and const keywords support the declaration of local scope inside block statements.",
	"CICD - Execution - JS Scopes - Scope Chain": "Scope chains establish the scope for a given function. Each function defined has its own nested scope as we know, and any function defined within another function has a local scope which is linked to the outer function - this link is called the chain. It’s always the position in the code that defines the scope. When resolving a variable, JavaScript starts at the innermost scope and searches outwards until it finds the variable/object/function it was looking for..",
	"CICD - Execution - JS Scopes - this": "Each scope binds a different value of this depending on how the function is invoked. We’ve all used the this keyword, but not all of us understand it and how it differs when invoked. By default this refers to the outer most global object, the window",
	"CICD - Execution - JS Scopes - Changing Scope": "Sometimes you need to manipulate the scopes of your JavaScript depending on what you’re looking to do: .call() and .apply() and .bind()",
	"CICD - Execution - JS Scopes - Changing Scope - .call() and .apply()": "The .call() and .apply() methods are really sweet, they allows you to pass in a scope to a function, which binds the correct this value. We can use either .call() or .apply() to change the scope, but any further arguments are where the two differ: .call(scope, arg1, arg2, arg3) takes individual arguments, comma separated, whereas .apply(scope, [arg1, arg2]) takes an Array of arguments.",
	"CICD - Execution - JS Scopes - Changing Scope - .bind() (ES5)": "Unlike the above, using .bind() does not invoke a function, it merely binds the values before the function is invoked.",
	"CICD - Execution - Execution Context": "Execution context (EC) is defined as the environment in which JavaScript code is executed. By environment I mean the value of this, variables, objects, and functions JavaScript code has access to, constitutes it’s environment.",
	"CICD - Execution - Execution Context - Types": "Execution context in JavaScript are of three types: Global execution context, Functional execution context, Eval",
	"CICD - Execution - Execution Context - Global": "Global execution context (GEC): This is the default execution context in which JS code start it’s execution when the file first loads in the browser. All the global code are executed inside global execution context. In the browser context, if the code is executing in strict mode value of this is undefined else it is window object. Global execution context cannot be more than one because only one global environment is possible for JS code execution.",
	"CICD - Execution - Execution Context - Function": "Functional execution context (FEC): Functional execution context is defined as the context created by the execution of code inside a function. Each function has it’s own execution context. It can be more than one. Functional execution context have access to all the code of global execution context. While executing global execution context code, if JS engine finds a function call, it creates a new functional execution context for that function.",
	"CICD - Execution - Execution Context - Eval": "Eval: Execution context inside eval function.",
	"CICD - Execution - Execution Context - Execution context stack (ECS)": "Execution context stack (ECS): Execution context stack is a stack data structure to store all the execution stacks created while executing the JS code. Global execution context is present by default in execution context stack and it is at the bottom of the stack. While executing global execution context code, if JS engines finds a function call, it creates functional execution context of that function and pushes that function execution context on top of execution context stack. JS engine executes the function whose execution context is at the top of the execution context stack. Once all the code of the function is executed, JS engines pop’s out that function’s execution context and start’s executing the function which is below it..",
	"CICD - Execution - Logging - console.log": "",
	"CICD - Execution - Logging - process.stdout.write": "https://medium.com/coding-beauty/javascript-console-log-without-newline-20e7e63cca36",
	"CICD - Execution - runtime - deno": "",
	"CICD - Execution - runtime - performance - resources loading - sync": "<script src='script.js'></script>",
	"CICD - Execution - runtime - performance - resources loading - async": "<script src='script.js' async></script>",
	"CICD - Execution - runtime - performance - resources loading - defer": "<script src='script.js' defer></script>",
	"CICD - Execution - runtime - performance - tree shaking": "Tree shaking is a form of dead code elimination. Modern JavaScript bundlers like Webpack can automatically remove unused code, reducing the final bundle size. To enable tree shaking in Webpack, ensure you’re using ES6 module syntax (import and export). Webpack will analyze the dependencies and eliminate code that is not used.",
	"CICD - Execution - runtime - performance - web workers": "Web Workers allow you to run JavaScript in background threads. This can be useful for offloading heavy computations and keeping your UI responsive.",
	"CICD - Execution - runtime - performance - web workers - main": "const worker = new Worker('worker.js'); worker.onmessage = function(e) { console.log('Worker said: ', e.data); };​ worker.postMessage('Hello, Worker!');.",
	"CICD - Execution - runtime - performance - web workers - worker": "self.onmessage = function(e) { console.log('Main thread said: ', e.data); self.postMessage('Hello, Main thread!'); };.",
	"CICD - Execution - runtime - performance - service workers": "Service Workers can be used to cache assets and handle offline functionality. This can significantly improve the load time of your web app, especially on repeat visits.",
	"CICD - Execution - runtime - performance - service workers - register": "navigator.serviceWorker.register('/service-worker.js').then(function(registration) {})"

	}