{
	"JS": "SECTION",
	"JS - ECMAScript": "JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard in 1997.",
	"JS - ECMAScript - ES1": "1997",
	"JS - ECMAScript - ES2": "1998",
	"JS - ECMAScript - ES3": "1999",
	"JS - ECMAScript - ES4": "Never released",
	"JS - ECMAScript - ES5": "2009. Added 'strict mode'. Added JSON support. Added String.trim(). Added Array.isArray(). Added Array iteration methods. Allows trailing commas for object literals",
	"JS - ECMAScript - ES6": "2015. Added let and const. Added default parameter values. Added Array.find(). Added Array.findIndex(). ECMAScript 6 introduced the let and const keywords. These keywords can be used in place of the var keyword.",
	"JS - ECMAScript - ES2016": "2016. Added exponential operator (**). Added Array.includes()",
	"JS - ECMAScript - ES2017": "2017. Added string padding. Added Object.entries(). Added Object.values(). Added async functions. Added shared memory. Allows trailing commas for function parameters",
	"JS - ECMAScript - ES2018": "2018. Added rest / spread properties. Added asynchronous iteration. Added Promise.finally(). Additions to RegExp",
	"JS - ECMAScript - ES2019": "2019. String.trimStart(). String.trimEnd(). Array.flat(). Object.fromEntries. Optional catch binding",
	"JS - ECMAScript - ES2020": "2020. The Nullish Coalescing Operator (??)",
	"JS - ECMAScript - ES2021": "2021. Promise.any(). String replaceAll(). Numeric Separators (_)",
	"JS - ECMAScript - ES2022": "2022. Array at(). String at(). RegExp /d. Object.hasOwn(). error.cause. await import. Class field declarations. Private methods and fields",
	"JS - ECMAScript - ES2023": "2023. Array findLast(). Array findLastIndex(). Array toReversed(). Array toSorted(). Array toSpliced(). Array with(). #! (Shebang)",
	"JS - ECMAScript - ES2024": "2024. Object.groupBy(). Map.groupBy(). Temporal.PlainDate(). Temporal.PlainTime(). Temporal.PlainMonthDay(). Temporal.PlainYearMonth()",

	"DataTypes": "SECTION",
	"DataTypes - Inmutable - Primitive": "In JavaScript, primitive data types represent the simplest and most basic building blocks of data. They are fundamental values that are immutable, meaning they cannot be altered once they are created. Primitive types are stored directly in memory and have a fixed size. These are stored directly in the stack, which is a simple memory allocation delivering quick access.",
	"DataTypes - Inmutable - Primitive - Undefined": "Undefined: undefined is a special value that represents the absence of a value. It is often used as the default value of variables or function parameters that have not been assigned a value. Variables that are declared but not initialized are automatically assigned the value undefined.",
	"DataTypes - Inmutable - Primitive - Null": "Null: null represents the intentional absence of any object value. It is often used when you want to indicate that a variable should have no value or that an object property is intentionally empty. It is distinct from undefined.",
	"DataTypes - Inmutable - Primitive - String": "String: Strings represent text and are enclosed in either single (‘’) or double quotes. They are used for storing and manipulating textual data. Strings are immutable, which means that any operation on a string creates a new string rather than modifying the original one.",
	"DataTypes - Inmutable - Primitive - String - union": "type Fruit = 'apple' | 'orange'; const fruit: Fruit = 'apple'",
	"DataTypes - Inmutable - Primitive - Number": "Number: Numbers represent numeric values, both integers and floating-point numbers. They are used for performing mathematical operations. Numbers in JavaScript follow the IEEE 754 standard for floating-point arithmetic. Like strings, numbers are also immutable.",
	"DataTypes - Inmutable - Primitive - BigInt": ".",
	"DataTypes - Inmutable - Primitive - Boolean": "Boolean: Booleans have only two possible values: true and false. They are used to represent logical values and are essential for making decisions in your code. Booleans are immutable and serve as the basis for conditional statements and boolean algebra.",
	"DataTypes - Inmutable - Primitive - Symbol": "Symbol (ES6): Symbols are unique and immutable values introduced in ECMAScript 2015 (ES6). They are often used as property keys in objects to avoid naming conflicts.",
	"DataTypes - Inmutable - Record": "A Record is an immutable collection of key-value pairs, similar to JavaScript objects, but Records are immutable and have deep equality. Records are created using an object-like literal syntax prefixed with #. const record = #{ key1: 'value1', key2: 'value2' };",
	"DataTypes - Inmutable - Tuple": "A Tuple is an immutable ordered list, similar to JavaScript arrays, but Tuples are immutable and have deep equality. Tuples are created using an array-like literal syntax prefixed with #. const tuple = #['value1', 'value2'];",
	"DataTypes - Reference": "Reference types store a reference to the object in the stack, while the object itself lives in the heap, a more complex but expansive memory structure.",
	"DataTypes - Reference - Object": "",
	"DataTypes - Reference - Object - OO - prototype": "JavaScript uses a prototype-based approach to object-oriented programming. We can think of prototype as a 'bag of properties and functions'. It can be at both the class level and the object level. Prototype: Every function in JavaScript has a prototype property, which is an object that contains shared methods and properties. When an object is created, it inherits properties from its constructor's prototype.",
	"DataTypes - Reference - Object - OO - __proto__": "This is a reference to the object's prototype. When accessing a property on an object, JavaScript looks up the chain __proto__ until it finds the property or reaches the end of the chain (null).",
	"DataTypes - Reference - Object - Map": "let map = new Map(); https://medium.com/@jacobmacinnis/javascript-map-vs-javascript-object-vs-traditional-hash-tables-83e5c3068fbd",
	"DataTypes - Reference - Object - Map vs Object - Key Types": "Flexible Key Types: One of the most significant advantages of Map over objects is its flexibility with key types. In an object, keys must be strings or symbols. In a Map, keys can be anything – from primitive values to complex objects. https://javascript.plainenglish.io/are-you-still-using-objects-discover-the-game-changing-power-of-map-in-js-ts-3600a6c28b60",
	"DataTypes - Reference - Object - Map vs Object - Order": "Maintains Order: Maps maintain the order of their entries, which means the sequence in which items are added is preserved. This is particularly useful when you need a predictable iteration order.",
	"DataTypes - Reference - Object - Map vs Object - Performance": "Better Performance for Frequent Additions/Removals: Maps are optimized for frequent additions and removals of key-value pairs. Objects, on the other hand, can suffer performance issues when properties are added or removed frequently, especially when dealing with a large number of entries.",
	"DataTypes - Reference - Object - Map vs Object - Size": "Size Property: Maps have a size property that provides the number of elements in the map. This is more efficient than calculating the size of an object using Object.keys(obj).length, which has to traverse the entire key set.",
	"DataTypes - Reference - Object - Map vs Object - Methods": "Built-In Methods: Maps come with built-in methods like set, get, has, delete, and clear which make manipulating key-value pairs straightforward and intuitive.",
	"DataTypes - Reference - Object - Map vs Object - overhead": "Maps have a bit more overhead compared to plain objects due to their internal structure and additional features. For scenarios where performance is critical and the collection is small and simple, this overhead might be unnecessary.",
	"DataTypes - Reference - Object - Map vs Object - JSON": "Unlike plain objects, Maps cannot be directly serialized to JSON. If you need to serialize your data, you’ll need to convert the Map to an object or an array first.",
	"DataTypes - Reference - Object - URL - ES5": "const endpoint = 'https://api.example.com' + '/users/' + userId + '/details';",
	"DataTypes - Reference - Object - URL - ES6": "const endpoint = `${baseUrl}/users/${userId}/details`;",
	"DataTypes - Reference - Object - URL - Constructor": "const url = new URL(`/users/${userId}/details`, baseUrl);",
	"DataTypes - Reference - Object - URL - Constructor - params": "url.searchParams.append('type', 'EDIT');",
	"DataTypes - Reference - Object - Time - Date": "Date: The Date object represents date and time information. It provides methods for working with dates, times, and time zones. The Date object is used for tasks like date calculations and formatting.",
	"DataTypes - Reference - Object - Time - TemporalAPI": "The Temporal API aims to provide a powerful and flexible toolkit for handling dates and times, making it easier for developers to manage various time-related tasks. https://javascript.plainenglish.io/exploring-the-new-javascript-feature-the-temporal-api-2c7318f047e7",
	"DataTypes - Reference - Array": "",
	"DataTypes - Reference - Array - Spread Operator": "The Spread operator is a key feature in JavaScript that enables an iterable to expand wherever zero or more arguments are required. Its primary use case is with arrays, especially when expecting multiple values. This operator provides the convenience of easily extracting a list of parameters from an array, making our code more versatile and readable.",	
	"DataTypes - Reference - Array - Destructuring": "Destructuring was introduced in ES6. It’s a JavaScript feature that allows us to extract multiple pieces of data from an array or object and assign them to their own variables. const { firstName, lastName, city } = person;.",
	"DataTypes - Reference - Functions": "Functions: Functions are first-class citizens in JavaScript. They are objects that can be invoked and passed around as arguments to other functions. Functions are used for encapsulating reusable code and implementing logic in JavaScript programs.",
	"DataTypes - Declaration - Hoisting": "Hoisting is a concept or behavior in JavaScript where the declaration of a function, variable, or class goes to the top of the scope.",
	"DataTypes - Declaration - assignment": "pointing a variable name at a new thing",
	"DataTypes - Declaration - mutation": "editing the data within a thing.",
	"DataTypes - Declaration - preES6 - var": "Let’s rewind a bit. Back in the pre-ES6 days, we were stuck with var. It was functional, but deeply flawed. var didn’t respect block scope, meaning that if you declared a var inside a for loop, that variable would still be accessible outside the loop. There are legitimate use cases for let: Loop Counters, Reassignable Variables",
	"DataTypes - Declaration - ES6 - let": "Suddenly, we had block-scoped variables with let. When you see a variable declared with let, you can’t be sure if it’s going to change later on.",
	"DataTypes - Declaration - ES6 - const": "Immutability. When you use const, you’re telling yourself and others that this value will not change.",
	"DataTypes - Operations - typeof": "The typeof operator returns the data type of a JavaScript variable.",
	"DataTypes - Operations - Comparing - Value Comparison": "Primitive Types: Value Comparison. Primitive types are compared based on their values. When you compare two primitive values, you’re checking if their actual content is the same.",
	"DataTypes - Operations - Comparing - Reference Comparison": "Reference Types: Reference Comparison. Reference types, on the other hand, are compared based on their references to memory locations. When you compare two reference type variables, you’re checking if they point to the same memory address, not whether the objects they reference have the same content:.",
	"DataTypes - Operations - Equalying - Shallow": "Shallow equality compares the references themselves, while deep equality compares the content of nested objects or arrays within reference types. For shallow equality, you can use the === operator or its counterpart, the Object.is() method, which behaves similarly but handles edge cases differently (e.g., handling NaN and -0 differently).",
	"DataTypes - Operations - Equalying - Deep": "Deep equality requires custom comparison logic or libraries like Lodash’s isEqual method, which recursively checks the content of nested objects or arrays.",
	"DataTypes - Operations - Copying - Shallow": "To create an independent copy of an object (copy by value), you can use methods like Object.assign() or the spread operator (...). These methods create a shallow copy, which means they copy the top-level properties of the object but not nested objects. It’s essential to note that a shallow copy does not create copies of nested objects within the original object. Shallow Copy means the original data is unaffected by changes to the copied data for fundamental types. For reference types, a shallow copy might duplicate the first layer of an object, protecting the original data when modifying shallow properties in the copied object. https://javascript.plainenglish.io/is-the-spread-operator-a-deep-copy-261c109fb708",
	"DataTypes - Operations - Copying - Deep": "To create deep copies, which include all nested objects, you would need to implement a custom copying function or use a library like Lodash. Deep Copy represents limitless hierarchical duplication. Changes to either fundamental or reference data types in the deep copy do not affect the original.",
	"DataTypes - Operations - Clone - Shallow": "Object.create(), Spread Operator {...}",
	"DataTypes - Operations - Clone - Deep": "JSON.parse(JSON.stringify()), lodash.deepClone",
	"DataTypes - Operations - Passing by Value": "Passing Primitive Values: Passing by Value. When you pass a primitive value to a function, you are essentially passing a copy of that value. This is known as passing by value. Any changes made to the parameter within the function do not affect the original variable outside the function.",
	"DataTypes - Operations - Passing by Reference": "Passing Reference Values: Passing by Reference. When you pass a reference type (such as an object or array) to a function, you are passing a reference to the actual data. This is known as passing by reference. Any modifications made to the parameter within the function directly affect the original variable outside the function. Let’s see this in action:",
	"DataTypes - Operations - Conversion - Strings to Numbers": ".",
	"DataTypes - Operations - Conversion - Numbers to Strings": ".",
	"DataTypes - Operations - Conversion - Dates to Numbers": ".",
	"DataTypes - Operations - Conversion - Numbers to Dates": ".",
	"DataTypes - Operations - Conversion - Booleans to Numbers": ".",
	"DataTypes - Operations - Conversion - Numbers to Booleans": ".",
	"DataTypes - Operations - Conversion - StringToJSON": "JSON.parse(...)",
	"DataTypes - Operations - Conversion - JSONToString": "JSON.stringify(person)",
	"DataTypes - Operations - Chaining - old": "user && user.address && user.address.city",
	"DataTypes - Operations - Chaining - new": "user?.address?.city",
	"DataTypes - Operations - Chaining - Nullish Coalescing": "user.name ?? 'Guest'",

	"Logic": "SECTION",
	"Logic - Conditions - if": "",
	"Logic - Conditions - switch": "",
	"Logic - Loops": "",
	"Logic - Loops - for": "",
	"Logic - Loops - for...in": "",
	"Logic - Loops - for...of": "The for...of loop, introduced in ES6, offers a more flexible way to iterate over iterable objects (including arrays): ",
	"Logic - Loops - for...of - examples - object properties": "for( const[key,value] of Object.entries(user)) { ... }",
	"Logic - Loops - for...of - examples - destructuring": "for( const {name, age} of users) { ... }",
	"Logic - Loops - while () {...}": "",
	"Logic - Loops - do while": "",
	"Logic - Loops - forEach": "",
	"Logic - Loops - forEach - problem - break continue": "The flow of a forEach loop is uninterruptible. If you wish to break/continue an iteration, you are better off using the class “for i” loop or the “for of” loop statement.",
	"Logic - Loops - forEach - problem - no async": "The forEach loop will not wait for the completion of async functions, which could lead to unexpected output orders.",
	"Logic - Loops - forEach - problem - no Modify": "https://levelup.gitconnected.com/4-major-problems-with-javascript-foreach-b79f717c61b8",
	"Logic - Loops - forEach - problem - exception": "In other words, if an error occurs inside a forEach, the error will not be caught by the loop itself, which means you must handle exceptions explicitly within the callback.",
	"Logic - HOFs": "JavaScript offers a powerful feature known as higher order functions (HOFs). HOFs can accept functions as arguments and even return functions as results. https://www.freecodecamp.org/news/higher-order-functions-explained/",
	"Logic - HOFs - eg - map": "The map() method creates a new array by calling a provided function on every element in the calling array.",
	"Logic - HOFs - eg - filter": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.",
	"Logic - HOFs - eg - reduce": "The reduce() method applies a function against an accumulator and each element in the array to reduce it to a single value.",
	"Logic - HOFs - eg - forEach": "The forEach() method executes a provided function once for each array element.",
	"Logic - HOFs - eg - some": "The some() method tests whether at least one element in the array passes the test implemented by the provided function.",
	"Logic - HOFs - eg - every": "The every() method tests whether all elements in the array pass the test implemented by the provided function.",
	"Logic - HOFs - Techniques - Composition": "Function composition involves chaining multiple higher order functions together to create more complex operations or transformations.",
	"Logic - HOFs - Techniques - Custom": "You can create custom higher order functions tailored to your specific requirements, encapsulating common patterns or behaviors into reusable functions.",
	"Logic - HOFs - Techniques - Functional": "HOFs and Functional Programming Paradigms: Higher order functions are fundamental to functional programming paradigms, emphasizing the use of pure functions, immutability, and declarative programming style.",
	"Logic - Async": "",
	"Logic - Async - Callback": "take a function as an argument that would be called when the response is available, freeing the CPU for other things while we wait for the response. in Node.js, almost every call is asynchronous",
	"Logic - Async - Callback - Hell": "Callbacks are very good for the CPU but they are not so good for the programmer. multiple, deep nested callbacks within a function",
	"Logic - Async - Promise - 2015": "A promise represents the eventual result of an asynchronous operation. It is a placeholder into which the successful result value or reason for failure will materialize. ES6 follows the standard Promises/A+ [1].",
	"Logic - Async - Promise - States": "A promise can be in one of 3 states:(1) Pending - the promise’s outcome hasn’t yet been determined, because the asynchronous operation that will produce its result hasn’t completed yet. (2) Fulfilled - the asynchronous operation has completed, and the promise has a value. (3) Rejected - the asynchronous operation failed, and the promise will never be fulfilled. In the rejected state, a promise has a reason that indicates why the operation failed..",
	"Logic - Async - Promise - Creation": "new Promise( /* executor */ function(resolve, reject) { ... } ).",
	"Logic - Async - Promise - Parallel": "When you need to execute multiple asynchronous operations in parallel and continue executing subsequent code only when all asynchronous operations complete successfully. Promise.all([ asyncFunc1(), asyncFunc2(), ]).then(([result1, result2]) => {  ··· })",
	"Logic - Async - Promise - Parallel Wait": "When you want to wait for multiple asynchronous operations to complete and you need to know the result of each asynchronous operation. Promise.allSettled([promise1, promise2, promise3]).then((values) => { console.log(values); });",
	"Logic - Async - Promise - Race": "When you have multiple asynchronous operations and you only care which one completes first, whether it succeeds or fails. Promise.race([promise1, promise2, promise3]).then((values) => { console.log(values); });",
	"Logic - Async - Promise - Any": "When you have multiple asynchronous operations and you want to get the result of the first successful asynchronous operation and ignore the other asynchronous operations that have failed. Promise.any([promise1, promise2, promise3]).then((values) => { console.log(values); });",
	"Logic - Async - Promise - Resolvers": "In some scenarios, we want to control the state of the Promise object externally. For example, in the scenario of requesting network data, the resolve method is called to set the return data of the current Promise only after all data is successfully received. https://javascript.plainenglish.io/ecmascript-2024-es15-is-coming-5-new-js-features-you-cant-miss-0d2833a53cfc",
	"Logic - Async - Promise - Chaining": "asyncFunc1().then().then()....",
	"Logic - Async - Promise - Handling Errors": ".then(function (greeting) { .... }, function(error) { ... }), or .then(result2 => { ... }) catch(error => { ... })",
	"Logic - Async - async/await": "The word “async” before a function means one simple thing: a function always returns a promise. The keyword await, works only inside async functions, makes JavaScript wait until that promise settles and returns its result.",
	"Logic - Async - async/await - Handling Errors": "await Promise.reject(new Error('Whoops!')), or throw new Error('Whoops!')",
	"Logic - Async - async/await - Global level await": "Before ES13 we could never use await in the global scope. We always had to put it in an async function or create an async IIFE. After ES13 we can. https://medium.com/coding-beauty/best-es13-js-features-f4517fffddc7",
	"Logic - Async - Observables": "An Observable is an array or a sequence of events over time. It has at least two participants, the creator (the data source) and the subscriber (subscription where data is being consumed)",
	"Logic - Async - Observables - Observable": "you create an Observable instance that defines a subscriber function. This is the function that is executed when a consumer calls the subscribe() method producing vales asynchonously.",
	"Logic - Async - Observables - Observable handler": "implements the Observer interface. Defines callback methods to handle the three types of notifications that an observable can send: next, error and complete",
	"Logic - Async - Observables - Subscribing to Observable": "An Observable instance begins publishing values only when someone subscribes to it. You subscribe by calling the subscribe() method of the instance, passing an observer object to receive the notifications.",
	"Logic - Async - Observables - Observable Multicasting": "practice of broadcasting to a list of multiple subscribers in a single execution.",
	"Logic - Async - Observables - Observable Error Handling": "error callback on the observer",
	"Logic - Async - Observables - Observable Unsubscribe": "On the ngOnDestroy lifecycle hook, unsubscribe to subscription to prevent memory leaks",
	"Logic - Async - Observables - RxJS Operators List": "Creation (from, fromPromise, fromEvent, of), Combination (combineLatest , concat , merge , startWith , withLatestFrom , zip), Filtering (debounceTime , distinctUntilChanged , filter , take , takeUntil), Transformation (bufferTime , concatMap , map , mergeMap , scan , switchMap), Utility (tap), Multicasting  (share)",
	"Logic - Async - Observables - RxJS Error Handling": "catchError operator",
	"Logic - Async - Observables - RxJS Retry failed observable": "Use the retry operator before the catchError operator. It resubscribes to the original source observable, which can then re-run the full sequence of actions that resulted in the error. If this includes an HTTP request, it will retry that HTTP request.",
	"Logic - Async - Observables - Examples": "(1) EventEmitter class extends Observable, (2) HTTP module uses observables to handle AJAX requests and responses, (3) Router and Forms modules use observables",
	"Logic - Async - Observables - Observables compared to promises. Creation and subscription": "Observables are declarative, computation does not start until subscription. Promises execute immediately on creation",
	"Logic - Async - Observables - Observables compared to promises. Chaining": "Observables differentiate between chaining and subscription. Promises only have .then() clauses",
	"Logic - Async - Observables - Observables compared to promises. Cancellation": "Observable subscriptions are cancellable. Unsubscribing removes the listener. Promises are not cancellable.",
	"Logic - Async - Observables - Observables compared to promises. Error Handling": "Observables subscribe() is responsible for handling errors. Promises push errors to the child promises (then().then().then().catch())",
	"Logic - Async - Observables - Observables compared to promises. Multiplicity": "Observables provide many values. Promises provide one",
	"Logic - Async - Observables - Observables compared to events API": "you can configure an observable to transform an event before passing the event to the handler",
	"Logic - Async - Observables - Observables compared to arrays": "An observable produces values over time. An array is created as a static set of values. In a sense, observables are asynchronous where arrays are synchronous. ",
	"Logic - Async - AsyncLocalStorage": "Async context provides a way to handle asynchronous operations more gracefully, preserving the context across async calls, making debugging and tracing easier. A go-to feature for backend developers working with Node.js and complex async operations. AsyncLocalStorage  is a Node.js API (based on the async_hooks API) that is used to create asynchronous state within callbacks and promise chains.",
  "Logic - DataFetching - XMLHttpRequest": "",
  "Logic - DataFetching - fetch": "",
	"Logic - DataFetching - WebRequestAPI": ".",
  "Logic - DataFetching - jQuery.ajax()": "",
  "Logic - DataFetching - tRPC": "",
  "Logic - DataFetching - TanStackQuery": "",
  "Logic - DataFetching - ApolloClient": "",
  "Logic - DataFetching - urql": "",
  "Logic - DataFetching - Relay": "",
  "Logic - DataFetching - RTKQuery": "",
  "Logic - Authentication": "",
  "Logic - Authentication - Firebase": "",
  "Logic - Authentication - AWS Cognito": "",
  "Logic - Authentication - Auth0": "",
  "Logic - Authentication - Passport.js": "",
  "Logic - Authentication - NextAuth": "",
  "Logic - Authentication - Supabase": "",
  "Logic - Authentication - Clerk": "",
  "Logic - Authentication - Lucia": "",
  "Logic - Authentication - AuthKit": "",
	"Logic - Functional - Monads": "https://medium.com/@yourfuse/what-are-monads-in-javascript-and-how-can-they-improve-your-functional-programming-e42e56e7af9d https://medium.com/javascript-scene/javascript-monads-made-simple-7856be57bfe8",
	"Logic - Functional - Monads2": "https://javascript.plainenglish.io/50-single-line-code-examples-that-showcase-your-fundamental-skills-ea495082de45",
	"Logic - Functional - |>": "The pipeline operator (|>) allows for a more readable and functional approach to chaining functions, inspired by languages like Elixir.",
	
	"View - Rendering": "SECTION",
	"View - Rendering - resources - lazy loading": "Similar to the list virtualization technique, lazy loading images prevents the creation of unnecessary DOM nodes, thereby boosting performance. Lazy loading allows you to defer or delay the loading of images until they are needed or visible to the user instead of loading all the images on page load..",
	"View - Rendering - resources - lazy loading - technique": "The concept behind lazy loading is to initiate the load of a placeholder or a small low-resolution version of the image, typically a small-sized thumbnail or a blurred placeholder. As the user scrolls or interacts with the page, the actual image is loaded dynamically, replacing the placeholder when the user enters the viewport or when it becomes visible. Lazy loading in React can be achieved using various libraries and techniques. One of the popular libraries is the react-lazyload.  .",
	"View - Rendering - resources - lazy loading - compression": "Image compression reduces the file size of images without significant loss of visual quality..",
	"View - Rendering - resources - loading - sync": "<script src='script.js'></script>",
	"View - Rendering - resources - loading - async": "<script src='script.js' async></script>",
	"View - Rendering - resources - loading - defer": "<script src='script.js' defer></script>",
  "View - Styling - library - CSS - Utility-First-CSS": "Utility-first is a CSS methodology where you build up your styles using many small, purpose-specific classes.",
	"View - Styling - library - CSS - Utility-First-CSS - TailwindCSS": "",
  "View - Styling - library - CSS - Utility-First-CSS - TailwindCSS - Signals": "Tailwind Signals is a new experimental feature in Tailwind CSS that enables custom state consumption by any descendant in the DOM for cleaner coding and efficient styling. Signals build on the concept of pseudo-classes and allow for bidirectional communication between parent and child components, enabling child components to react to state changes in their parents and vice versa.",
	"View - Styling - library - CSS - Utility-First-CSS - UnoCSS": "",
  "View - Styling - library - CSS - CSS-in-CSS": "",
  "View - Styling - library - CSS - CSS-in-CSS - CSS Modules": "",
  "View - Styling - library - CSS - CSS-in-JS": "",
  "View - Styling - library - CSS - CSS-in-JS - StyledComponents": "Styled Components is a library for React and React Native that allows you to use component-level styles in your application. It leverages tagged template literals to style your components, providing a seamless integration of styles within your JavaScript.",
  "View - Styling - library - CSS - CSS-in-JS - Emotion": "",
  "View - Styling - library - CSS - CSS-in-JS - StyleX": "",
  "View - Styling - library - CSS - CSS-in-JS - PandaCSS": "",
  "View - Styling - library - CSS - CSS-in-JS - PigmentCSS": "",
  "View - Styling - library - CSS - CSS-in-JS - KumaUI": "",
  "View - Styling - library - CSS - CSS-in-JS - ParcelMacros": "",
  "View - Styling - library - CSS - CSS-in-JS - compile-time - Linaria": "",
  "View - Styling - library - CSS - CSS-in-JS - compile-time - CVA": "",
  "View - Styling - library - CSS - CSS-in-JS - compile-time - astroturf": "",
  "View - Styling - library - CSS - CSS-in-JS - compile-time - compiled": "",
  "View - Styling - library - Components - Styled": "UI library which gives you access to lots of pre-built components which share the same design system, functionalities, and rules for accessibility",
  "View - Styling - library - Components - Styled - MaterialUI": "",
  "View - Styling - library - Components - Styled - MantineUI": "",
  "View - Styling - library - Components - Styled - ChakraUI": "",
  "View - Styling - library - Components - Styled - NextUI": "",
  "View - Styling - library - Components - Styled - ParkUI": "",
  "View - Styling - library - Components - Styled - ReactBootstrap": "",
  "View - Styling - library - Components - Styled - SemanticUI": "",
  "View - Styling - library - Components - Styled - Reactstrap": "",
  "View - Styling - library - Components - Styled - AntDesign": "",
  "View - Styling - library - Components - Headless": "The trend moves towards headless UI libraries though. They come without styling, but with all the functionalities and accessibilities that a modern component library needs. Most of the time they are combined with a Utility-First-CSS solution like Tailwind",
  "View - Styling - library - Components - Headless - ShadcnUI": "shadcn/UI is the first popular UI library which fully embraces Tailwind as first-class citizen (next to CSS Variables) for theming their components to achieve custom design. Following Tailwind in its footsteps, shadcn/UI is not installed as a node package, but rather copy and pasted into a project where one can freely adapt the components. https://levelup.gitconnected.com/using-5-new-shadcn-ui-components-in-next-js-14-8f4bc33d2911",
  "View - Styling - library - Components - Headless - Radix": "",
  "View - Styling - library - Components - Headless - ReactAria": "",
  "View - Styling - library - Components - Headless - Catalyst": "",
  "View - Styling - library - Components - Headless - DaisyUI": "",
  "View - Styling - library - Components - Headless - HeadlessUI": "",
  "View - Styling - library - Components - Headless - TailwindUI": "",
	"View - Rendering - DOM": "The DOM is not part of the JavaScript language, but is instead a Web API which defines the structure and properties of elements on a webpage.",
	"View - Rendering - DOM - access": ".",
	"View - Rendering - DOM - access - minimize": "Accessing and manipulating the DOM can be slow. Minimize the amount of DOM access by caching references to elements and avoiding unnecessary changes.",

	"CICD - VCS": "SECTION",
	"CICD - VCS - Monorepo": "A monorepo is a project which contains smaller projects -- whereas each project can be anything from individual application to reusable package (e.g. functions, components, services). The practice of combining projects dates back to the early 2000 when it was called a shared codebase.",
	"CICD - VCS - Monorepo - why": "There are two major advantages using a monorepo for a large scale codebase. First of all, shared packages can be used in multiple applications on a local machine without an online registry (e.g. npm). The developer experience improves tremendously here, because everything is in the same codebase without updating dependencies via third-parties. When a shared package gets updated, it gets immediately reflected in all applications which depend on it. Second, it improves collaboration across codebases. Teams working on different projects can improve the codebases from other teams without working on multiple repositories. It also improves accessibility without worrying about different setups and introduces a more flexible ownership of the source code across teams. Another benefit is the refactoring of code across many projects.",
	"CICD - VCS - Monorepo - structure": "A monorepo can contain multiple applications (here: apps) whereas each application has access to shared set of packages.",
	"CICD - VCS - Monorepo - structure - apps": "The apps are usually not dependent on each other, instead they only opt-in packages. Applications in apps do not know about being an repo in a monorepo, they just define dependencies",
	"CICD - VCS - Monorepo - structure - package": "A package, which is just a folder, can be anything. A package can be a dependency of another package.",
	"CICD - VCS - Monorepo - structure - workspace": "A monorepo, in our case, consists of multiple apps/packages working together. In the background, a tool called workspaces enables us to create a folder structure where apps can use packages as dependencies. In our case, we are using yarn workspaces to accomplish our goal. There are alternatives such as npm workspaces and pnpm workspaces too. Workspaces already allow us to create a monorepo structure.",
	"CICD - VCS - Monorepo - tools - NX": "Nx is a powerful Monorepo management tool that provides efficient build system optimization and developer tools. Features: Nx accelerates CI with fast build tools, targeted test runs, parallel task execution, and remote caching. It also has a rich plugin library, IDE tools like Nx Console, and supports various Monorepo styles.",
	"CICD - VCS - Monorepo - tools - Turborepo": ".",
	"CICD - VCS - Monorepo - tools - Rush": ".",
	"CICD - VCS - QA - Lerna": "Lerna simplifies the management of JavaScript monorepos.",
	"CICD - VCS - QA - ESLint": "A static code analysis tool that identifies and fixes problems in JavaScript code to enforce consistent coding standards.",
	"CICD - VCS - QA - Prettier": ".",
	"CICD - VCS - QA - Biome": ".",

	"CICD - Bundling": "SECTION",
	"CICD - Bundling - Arch - Functions - firstclass": "JavaScript is a language with first-class functions, meaning functions are treated like regular variables. This allows us to pass functions into other functions and even return functions from functions.",
	"CICD - Bundling - Arch - Functions - Arrow": "(a,b)=>a+b;",
	"CICD - Bundling - Arch - Functions - Strict": "Strict Mode imposes restrictions that save hours of debugging. With Strict Mode, you’ll get an error if a variable doesn’t exist or has a typo, stopping your app from running and pinpointing the bug immediately. It throws visible errors for silent issues like wrong variable names and prevents using reserved keywords that could cause future problems. Use the use strict line to enable Strict Mode anywhere in your code. I recommend placing it in the global context. It will cover the entire file.",
	"CICD - Bundling - Arch - Functions - Pure": "If I call a pure function, it will only take the data passed as parameters, perform an X operation, and return the output as a value. Pure functions do not print the output, call another function, perform another Y operation, etc. They only return a value.",
	"CICD - Bundling - Arch - Functions - Currying": "https://javascript.info/currying-partials",
	"CICD - Bundling - Arch - Functions - call": "The call method invokes a function with a specified this value and individual arguments passed as separate arguments. It allows you to borrow functions from one object and invoke them in the context of another.",
	"CICD - Bundling - Arch - Functions - apply": "Similar to call, the apply method invokes a function with a specified this value, but it takes an array or an array-like object as its second argument, allowing you to pass a variable number of arguments to the function.",
	"CICD - Bundling - Arch - Functions - bind": "The bind method creates a new function that, when called, has its this value set to a specific value and prepends any provided arguments to the original function's arguments list. It is often used to create functions with preset contexts or partially applied arguments.",
	"CICD - Bundling - Arch - Closure": "A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function’s variables, and it has access to the global variables.",
	"CICD - Bundling - Arch - Generator": "Regular functions return only one, single value (or nothing). Generators can return (“yield”) multiple values, one after another, on-demand. They work great with iterables, allowing to create data streams with ease. function* generateSequence() { yield 1; yield 2; return 3; }",
	"CICD - Bundling - Arch - Generator - declaration": "A generator function is declared just like a regular function but with an asterisk after the function keyword: function *myGenerator() {}, let iterator = myGenerator(), let firstYield = iterator.next(),",
	"CICD - Bundling - Arch - Generator - pausable": "Generator Function (ES6). Generator functions however are not “run to completion”. Generator functions can be paused and resumed so that other code can execute in between.",
	"CICD - Bundling - Arch - Generator - yield": "Unlike regular functions that execute top-to-bottom in one go, a generator can yield control back to the calling context, allowing for more granular control over its execution flow.",
	"CICD - Bundling - Arch - Generator - next": "Instead, it pauses at each yield statement, and only resumes when you explicitly call next() on it.",
	"CICD - Bundling - Arch - Generator - iterator": "When you invoke a generator function, it won’t execute the body of the function like a regular function. Instead, it will return a generator object called an iterator.",
	"CICD - Bundling - Arch - Generator - usage": "Generators are particularly useful in scenarios where you need fine-grained control over the execution flow. Here are some specific use cases:",
	"CICD - Bundling - Arch - Generator - usage - lazy iteration": "Generators shine when it comes to creating lazy iterators — sequences of values generated on the fly. This is especially useful when dealing with potentially infinite data streams or large datasets where loading everything into memory at once is impractical.",
	"CICD - Bundling - Arch - Generator - usage - state machine": "State machines are a common pattern in complex applications, and generators can be used to implement them cleanly and concisely. The ability to yield at specific states makes generators an excellent fit for managing transitions between states.",
	"CICD - Bundling - Arch - Generator - usage - flow control": "The great thing about this behavior is that we can use generators to manage flow control. Because generators allow us to pause execution, we can easily cancel asynchronous operations. Generators also allow us to turn asynchronous code into synchronous-looking code. ",
  "CICD - Bundling - Arch - frameworks - HOFA": "",
  "CICD - Bundling - Arch - frameworks - Web - Binding based - Pros": "Pros: These frameworks reduce the boilerplate code needed for DOM manipulation, making it easier to create dynamic applications.",
  "CICD - Bundling - Arch - frameworks - Web - Binding based - Cons": "Cons: Mixing the JS logic in HTML goes against the principle of Separation of Concerns, which may also introduce complexity and performance issues in large-scale applications due to excessive DOM updates.",
  "CICD - Bundling - Arch - frameworks - Web - Binding based - KnockoutJS": "KnockoutJS: It uses two-way data binding to connect the UI to the underlying data model. Changes in the model automatically update the UI and vice versa.",
  "CICD - Bundling - Arch - frameworks - Web - Binding based - AngularJS": "AngularJS: This framework also utilizes two-way data binding, making it easy to keep the model and view in sync. It allows automatic synchronization of data between the model (business logic) and view (UI).",
  "CICD - Bundling - Arch - frameworks - Web - Binding based - Backbone": ".",
  "CICD - Bundling - Arch - frameworks - Web - Template based - Pros": "Pros: Simple. These frameworks focus on separating the presentation layer from logic, promoting a clear separation of concerns. They simplify rendering by using templates to bind data to the UI efficiently.",
  "CICD - Bundling - Arch - frameworks - Web - Template based - Cons": "Cons: When projects get bigger, you still need to write a lot of code, and much of the logic is duplicated. There are no reusable components, which can lead to code bloat and difficulty in maintaining a consistent structure across large applications.",
  "CICD - Bundling - Arch - frameworks - Web - Template based - HandlebarsJS": "HandlebarsJS: This is a way to build dynamic HTML pages by embedding expressions in HTML. It allows developers to create reusable templates for rendering content.",
  "CICD - Bundling - Arch - frameworks - Web - Template based - EmberJS": "EmberJS: Uses a templating engine similar to HandlebarsJS to render dynamic content. Ember’s template system automatically updates the DOM when the underlying data changes.",
  "CICD - Bundling - Arch - frameworks - Web - Template based - Eleventy": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - Pros": "Pros: These frameworks promote reusability and maintainability by encapsulating functionality within self-contained components. This modular approach simplifies the development of complex applications.",
  "CICD - Bundling - Arch - frameworks - Web - Components based - Cons": "Cons: There is a learning curve, especially when integrating advanced features like state management and routing. Additionally, because React and Vue are libraries rather than full frameworks, developers must make more decisions about which additional tools and libraries to use, like redux.",
	"CICD - Bundling - Arch - frameworks - Web - Components based - React": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - React - CRA": "Create React App (CRA): The Community Favorite. CRA remains a popular choice for React developers, known for its simplicity and ease of use",
  "CICD - Bundling - Arch - frameworks - Web - Components based - React - NextJS": "Next.js, a creation of Vercel, is the trusty all-terrain rover of the JavaScript world, capable of navigating a wide range of terrains, from simple static landing pages to complex, dynamic applications. Its hybrid rendering capabilities (SSR, SSG, ISR) make it a popular choice for projects that require both performance and flexibility.",
  "CICD - Bundling - Arch - frameworks - Web - Components based - React - Docusaurus": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - React - Remix": "Remix, an innovative full-stack framework, courageously goes where no framework has gone before, prioritizing seamless user experiences through efficient data handling. Like a powerful starship, it’s designed for ambitious missions, capable of handling complex data flows and user interactions with ease.",
  "CICD - Bundling - Arch - frameworks - Web - Components based - React - Gatsby": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - React - Redwood": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - Preact - DenoFresh": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - Astro": "Astro, a rising star in the JavaScript world, is quickly gaining traction for its lightweight design and laser focus on performance. Like a nimble lunar lander, Astro prioritizes speed and efficiency, making it an good choice for content-focused websites, blogs, and documentation sites. Last year Astro stepped in as the successor of Gatsby. While it became mainly known for static websites, its growing popularity pushed Astro to explore web applications and API endpoints too.",
  "CICD - Bundling - Arch - frameworks - Web - Components based - Astro - SSG": "Websites built with Astro are performant by default, because they start with zero JavaScript and move all the expensive rendering to the server. While static site generation (SSG) is the default, you can also opt-in into server-side rendering (SSR).",
  "CICD - Bundling - Arch - frameworks - Web - Components based - VueJS": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - VueJS - Nuxt": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - Sveltekit": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - SolidStart": "",
  "CICD - Bundling - Arch - frameworks - Web - Components based - Qwik": "",
  "CICD - Bundling - Arch - frameworks - Desktop - Chromium - Electron": "Electron embeds Chromium and Node.js to enable web developers to create desktop applications.",
  "CICD - Bundling - Arch - frameworks - Desktop - Chromium - NWjs": "NW.js is an app runtime based on Chromium and node.js. You can write native apps in HTML and JavaScript with NW.js. It also lets you call Node.js modules directly from the DOM and enables a new way of writing native applications with all Web technologies.",
  "CICD - Bundling - Arch - frameworks - Desktop - Webkit - Tauri": "Tauri uses the native WebView provided by the operating system. Based in Rust",
  "CICD - Bundling - Arch - frameworks - Desktop - Webkit - Neutralino": "",
  "CICD - Bundling - Arch - frameworks - Desktop - Webkit - Wails": "A Wails application is a standard Go application, with a webkit frontend.",
  "CICD - Bundling - Arch - frameworks - Desktop - Qt - NodeGui": "",
	"CICD - Bundling - Packaging - Managers - npm": "",
	"CICD - Bundling - Packaging - Managers - npmn": "",
	"CICD - Bundling - Packaging - Managers - yarn": "",
	"CICD - Bundling - Packaging - Managers - JSR": "https://denoland.medium.com/jsr-is-not-another-package-manager-77fa596c345d",
	"CICD - Bundling - Packaging - Modules": "A module is just a file. One script is one module. As simple as that. Modules can load each other and use special directives export and import to interchange functionality, call functions of one module from another one:",
	"CICD - Bundling - Packaging - Modules - File - <2009": "Before CommonJS, JavaScript code was typically written in a single file, making it difficult to manage dependencies.",
	"CICD - Bundling - Packaging - Modules - CommonJS - 2009": "CommonJS (CJS). CommonJS was developed in 2009 by Kevin Dangoor and other developers. It was created to solve the problem of managing dependencies in JavaScript projects.",
	"CICD - Bundling - Packaging - Modules - CommonJS - .cjs": ".cjs files are treated as CommonJS files.",
	"CICD - Bundling - Packaging - Modules - CommonJS - browser - module": "When the type attribute is set to module, the file is treated as an ESM file.",
	"CICD - Bundling - Packaging - Modules - CommonJS - sync": "CommonJS is a synchronous module system. This means that when a module is imported, the code execution is blocked until the module is loaded.",
	"CICD - Bundling - Packaging - Modules - CommonJS - require": "CJS uses the require function to load modules and expose code as a module using either module.exports or exports objects.",
	"CICD - Bundling - Packaging - Modules - CommonJS - NodeJS": "CommonJS is a module system natively supported by Node.js, initially introduced to meet the needs of server-side modularity. .js file extension is by default associated with CommonJS modules.",
	"CICD - Bundling - Packaging - Modules - ESM - 2015": "ECMAScript Module (ESM). ES Modules was introduced in ECMAScript 6 in 2015. It was created to provide a standardized way to modularize JavaScript code.",
	"CICD - Bundling - Packaging - Modules - ESM - .mjs": ".mjs files are treated as ESM files.",
	"CICD - Bundling - Packaging - Modules - ESM - browser - text/javascript": "When the type attribute is not specified or set to text/javascript, the file is treated as a CommonJS file.",
	"CICD - Bundling - Packaging - Modules - ESM - standard": "ESM is the official standard module system for modern JavaScript and is natively supported by the latest versions of browsers.",
	"CICD - Bundling - Packaging - Modules - ESM - static": "Unlike CommonJS, they are designed to be static, which means you cannot dynamically load or create modules at runtime.",
	"CICD - Bundling - Packaging - Modules - ESM - async": "Since ESM was introduced to Node.js, its asynchronous loading feature and module resolution logic have been well received.",
  "CICD - Bundling - Packaging - Modules - ESM - import": "Importing more components or modules than necessary can increase bundle size and negatively impact performance. Import only the specific components or functions you need from a module. Use code-splitting to load components on demand.",
	"CICD - Bundling - Packaging - Modules - ESM - import default": "",
	"CICD - Bundling - Packaging - Modules - ESM - import dynamic": "import('path/to/module').then(module => { ... });",
  "CICD - Bundling - Packaging - Modules - ESM - export": ".",
	"CICD - Bundling - Packaging - Modules - compatibility": "Using require to load ES modules is not supported because ES modules are executed asynchronously. So, there’s nothing wrong with supporting require() for ESM that doesn’t include top-level await. Although some libraries may have valid reasons to use top-level await, it may not be so common.",
	"CICD - Bundling - Packaging - Modules - compatibility - dual - wrapper": "You write your library in CommonJS and create an ESM wrapper around it. The ESM wrapper imports the CommonJS code and re-exports it.",
	"CICD - Bundling - Packaging - Modules - compatibility - dual - separate": "Separate ESM and CommonJS builds. This approach involves writing your library in ESM and CommonJS separately - or more commonly, authoring in ESM and using tooling to generate the CommonJS build. This approach has the benefit of allowing you to write your code in ESM and get the benefits of ESM like tree-shaking with bundlers. But it also increases complexity in the build process.",
	"CICD - Bundling - Packaging - Modules - compatibility - dual - coexists": "Dual package hazard. With this approach, the ESM and CommonJS versions of the package are treated as separate modules by Node.js as they are different files, leading to potential issues if the package is both imported and required in the same runtime environment. If the package relies on any state that can cause issues if 2 separate instances are loaded, it's necessary to isolate the state into a separate CommonJS module that can be shared between the ESM and CommonJS builds. This is not an issue if it's safe to have 2 separate instances of the package loaded in the same environment, which is often the case for most libraries.",
	"CICD - Bundling - Packaging - Modules - compatibility - NodeJS - package.js": "Node.js allows the use of .mjs file extension or explicitly specifying the “type”: “module” property in package.json to indicate ESM modules.",
	"CICD - Bundling - Packaging - Modules - compatibility - experimental-require-module": "https://levelup.gitconnected.com/commonjs-and-es-module-are-finally-going-to-be-compatible-with-each-other-39b8b880796b.",
	"CICD - Bundling - Packaging - Modules - compatibility - polyfill": "https://amy-blankenship.medium.com/those-scary-stories-about-polyfill-io-theyre-just-the-beginning-5e24e7b5fe8a.",
	"CICD - Bundling - Techniques - Prefetching": ".",
	"CICD - Bundling - Techniques - Prefetching - prefetch": "rel='prefetch' attribute on a <link> tag.",
	"CICD - Bundling - Techniques - Trimming": "If you wish to eliminate code redundancy, learn to trim your Javascript packages. When you cut-off duplicates and unnecessary code, the possibility of your React app performance multiplies. You must analyze and determine bundled code.",
	"CICD - Bundling - Techniques - Content hashing": ".",
	"CICD - Bundling - Techniques - Code compression": ".",
	"CICD - Bundling - Techniques - Code splitting": "Code splitting is a technique offered by web bundlers that enables you to divide your code into multiple bundles, which can be loaded on-demand..",
	"CICD - Bundling - Techniques - Minification": ".",
	"CICD - Bundling - Techniques - LazyLoading": ".",
	"CICD - Bundling - Techniques - Tree Shaking": "Tree shaking is a form of dead code elimination. Modern JavaScript bundlers like Webpack can automatically remove unused code, reducing the final bundle size. To enable tree shaking in Webpack, ensure you’re using ES6 module syntax (import and export). Webpack will analyze the dependencies and eliminate code that is not used.",
	"CICD - Bundling - Techniques - Tree Shaking - side effects": "Side effects are actions performed by code that have an impact outside the function’s immediate scope. They make dependencies that make tree shaking modre difficult.",
	"CICD - Bundling - Techniques - Tree Shaking - side effects - mark": "Explicit Side Effect Marking: Some bundlers offer mechanisms to explicitly indicate if a module or function has side effects. This information helps the bundler make informed decisions when performing tree-shaking. For instance, if a function performs a crucial DOM manipulation, you might mark it as having side effects to ensure its inclusion in the final bundle.",
	"CICD - Bundling - Techniques - Tree Shaking - side effects - pure": "Embrace Pure Functions: Pure functions are the golden children of tree-shaking. They have no side effects and always return the same output for the same input. This predictability allows the bundler to confidently identify and remove unused pure functions. Aim to write code with minimal side effects whenever possible.",
  "CICD - Bundling - tools - Brunch": ".",
  "CICD - Bundling - tools - tsup": ".",
  "CICD - Bundling - tools - tsc CLI": ".",
	"CICD - Bundling - tools - RequireJS - 2010": ".",
  "CICD - Bundling - tools - Browserify - 2011": ".",
	"CICD - Bundling - tools - Grunt - 2012": "",
	"CICD - Bundling - tools - Gulp - 2013": "",
	"CICD - Bundling - tools - WebPack - 2014": "",
	"CICD - Bundling - tools - WebPack - webpack.config.js": "Create a Webpack configuration file named `webpack.config.js` at the root of your project.",
  "CICD - Bundling - tools - WebPack - splitting - CommonsChunkPlugin": "",
  "CICD - Bundling - tools - WebPack - splitting - SplitChunksPlugin": "",
  "CICD - Bundling - tools - Webpack - Bundle Analyzer": "Webpack Bundle Analyzer helps analyze the size of webpack bundles and identify opportunities for optimization. By visualizing the composition of your bundles, you can pinpoint large dependencies or chunks that can be split or optimized.",
	"CICD - Bundling - tools - Rollup - 2015": "",
  "CICD - Bundling - tools - Parcel - 2017": "Features: Parcel allows you to work without a lot of configuration and provides a fast development server with hot reload, dynamic code splitting, and various production optimizations such as compression, tree shaking, and code compression for efficient builds.",
  "CICD - Bundling - tools - esbuild - 2020": ".",
  "CICD - Bundling - tools - Turbopack - 2022": "Turbopack is a new JavaScript/TypeScript bundler we’ve been cooking at Vercel. Building on 10+ years of learnings from webpack, we want to build a bundler that can be used with many frameworks. We’re moving the Turbopack codebase into the Next.js repository",

	"CICD - Building": "SECTION",
	"CICD - Building - types - JIT": "Interpreted",
	"CICD - Building - types - AOTC": "",
	"CICD - Building - Babel": "Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments.",
	"CICD - Building - Optiflow": "https://itnext.io/optiflow-a-compiler-based-solution-for-next-generation-javascript-performance-e51c8c8de6ee",
  "CICD - Bundling - tools - Vite": "Vite is a modern build tool that champions speed and efficiency. https://vitejs.dev/ Vite pre-configures Rollup for you with sensible defaults and powerful plugins while giving you an insanely fast development server.",
  "CICD - Bundling - tools - Vite - HMR": "Leverage Hot Module Replacement (HMR): Make the most out of Vite’s HMR for a seamless development experience. Keep your modules HMR-friendly by avoiding side effects in the module scope.",
  "CICD - Bundling - tools - Vite - PreBundling": "Optimize Dependency Pre-Bundling: Use the optimizeDeps option in vite.config.js to manually specify dependencies to pre-bundle, reducing startup time.",
  "CICD - Bundling - tools - Vite - ESM": "Utilize ES Modules for Assets: Import assets using ESM syntax for better caching and performance. native ES modules in the browser",

	"CICD - Execution": "SECTION",
	"CICD - Execution - Execution Context": "Execution context (EC) is defined as the environment in which JavaScript code is executed. By environment I mean the value of this, variables, objects, and functions JavaScript code has access to, constitutes it’s environment.",
	"CICD - Execution - Execution Context - Types": "Execution context in JavaScript are of three types: Global execution context, Functional execution context, Eval",
	"CICD - Execution - Execution Context - Global": "Global execution context (GEC): This is the default execution context in which JS code start it’s execution when the file first loads in the browser. All the global code are executed inside global execution context. In the browser context, if the code is executing in strict mode value of this is undefined else it is window object. Global execution context cannot be more than one because only one global environment is possible for JS code execution.",
	"CICD - Execution - Execution Context - Function": "Functional execution context (FEC): Functional execution context is defined as the context created by the execution of code inside a function. Each function has it’s own execution context. It can be more than one. Functional execution context have access to all the code of global execution context. While executing global execution context code, if JS engine finds a function call, it creates a new functional execution context for that function.",
	"CICD - Execution - Execution Context - Eval": "Eval: Execution context inside eval function.",
	"CICD - Execution - Execution Context - Execution context stack (ECS)": "Execution context stack (ECS): Execution context stack is a stack data structure to store all the execution stacks created while executing the JS code. Global execution context is present by default in execution context stack and it is at the bottom of the stack. While executing global execution context code, if JS engines finds a function call, it creates functional execution context of that function and pushes that function execution context on top of execution context stack. JS engine executes the function whose execution context is at the top of the execution context stack. Once all the code of the function is executed, JS engines pop’s out that function’s execution context and start’s executing the function which is below it..",
	"CICD - Execution - Scopes": "The namespace is sometimes an interchangeable word for scope, but usually the refers to the highest level scope. They are: Global, Function, Lexical (Closures), Block (ES6",
	"CICD - Execution - Scopes - Global Scope": "Contrary to the var keyword, the let and const keywords support the declaration of local scope inside block statements.",
	"CICD - Execution - Scopes - Local/Function Scope": "All scopes in JavaScript are created with Function Scope only, they aren’t created by for or while loops or expression statements like if or switch. New functions = new scope - that’s the rule..",
	"CICD - Execution - Scopes - Lexical Scope": "Whenever you see a function within another function, the inner function has access to the scope in the outer function, this is called Lexical Scope or Closure - also referred to as Static Scope. Any variables/objects/functions defined in its parent scope, are available in the scope chain. ",
	"CICD - Execution - Scopes - Block Scope (ES6)": "Contrary to the var keyword, the let and const keywords support the declaration of local scope inside block statements.",
	"CICD - Execution - Scopes - Scope Chain": "Scope chains establish the scope for a given function. Each function defined has its own nested scope as we know, and any function defined within another function has a local scope which is linked to the outer function - this link is called the chain. It’s always the position in the code that defines the scope. When resolving a variable, JavaScript starts at the innermost scope and searches outwards until it finds the variable/object/function it was looking for..",
	"CICD - Execution - Scopes - this": "Each scope binds a different value of this depending on how the function is invoked. We’ve all used the this keyword, but not all of us understand it and how it differs when invoked. By default this refers to the outer most global object, the window",
	"CICD - Execution - Scopes - Changing Scope": "Sometimes you need to manipulate the scopes of your JavaScript depending on what you’re looking to do: .call() and .apply() and .bind()",
	"CICD - Execution - Scopes - Changing Scope - .call() and .apply()": "The .call() and .apply() methods are really sweet, they allows you to pass in a scope to a function, which binds the correct this value. We can use either .call() or .apply() to change the scope, but any further arguments are where the two differ: .call(scope, arg1, arg2, arg3) takes individual arguments, comma separated, whereas .apply(scope, [arg1, arg2]) takes an Array of arguments.",
	"CICD - Execution - Scopes - Changing Scope - .bind() (ES5)": "Unlike the above, using .bind() does not invoke a function, it merely binds the values before the function is invoked.",
	"CICD - Execution - Concurrency - single-threaded": "Let’s now understand JavaScript’s single-threaded, non-blocking event loop concurrency model. A concurrency model refers to how the JavaScript engine manages multiple tasks occurring simultaneously. Since JavaScript runs on a single thread, it can only perform one task at a time. Therefore, we need a method to handle multiple tasks concurrently.",
	"CICD - Execution - Concurrency - event loop": "To avoid blocking, JavaScript uses a non-blocking behavior facilitated by the event loop. The event loop manages long-running tasks by executing them in the background and then placing them back on the main thread once they are completed.",
	"CICD - Execution - EventLoop": "JavaScript is single-threaded. JavaScript’s design is well-suited for handling many tasks efficiently, thanks to the event loop.",
	"CICD - Execution - EventLoop - how": "An event loop is something that pulls stuff out of the queue and places it onto the function execution stack whenever the function stack becomes empty. The event loop is the secret by which JavaScript gives us an illusion of being multithreaded even though it is single-threaded.",
	"CICD - Execution - EventLoop - how - CallStack": "JavaScript uses a call stack to keep track of the currently executing function (where the program is in its execution)",
	"CICD - Execution - EventLoop - how - CallbackQueue:": "Asynchronous operations, such as I/O operations or timers, are handled by the browser or Node.js runtime. When these operations are complete, corresponding functions (callbacks) are placed in the callback queue.",
	"CICD - Execution - EventLoop - how - EventLoop": "The event loop continuously checks the call stack and the callback queue. If the call stack is empty, it takes the first function from the callback queue and pushes it onto the call stack for execution.",
	"CICD - Execution - EventLoop - how - Execution": "The function on top of the call stack is executed. If this function contains asynchronous code, it might initiate further asynchronous operations.",
	"CICD - Execution - EventLoop - how - CallStackExecution": "When an asynchronous operation is complete, its callback is placed in the callback queue.",
	"CICD - Execution - EventLoop - how - Repeat": "The event loop continues this process, ensuring that the call stack is always empty before taking the next function from the callback queue.",
	"CICD - Execution - EventLoop - priority": "For async tasks in JavaScript EventLoop, there is also the concept of priority. https://programming.earthonline.us/can-you-answer-this-senior-level-javascript-promise-interview-question-69f7b6ffc2e7",
	"CICD - Execution - EventLoop - priority - higher": "Tasks with higher priority are called microtasks. Includes: Promise, ObjectObserver, MutationObserver, process.nextTick, async/await.",
	"CICD - Execution - EventLoop - priority - lower": "Tasks with lower priority are called macrotasks. Includes: setTimeout , setInterval and XHR.",
	"CICD - Execution - Environment - engine - Google V8": "V8 is a browser engine",
	"CICD - Execution - Environment - runtime - node": "nodejs which is a runtime environment built on top of V8",
	"CICD - Execution - Environment - runtime - deno": "",
	"CICD - Execution - Environment - runtime - Bun": "",
	"CICD - Execution - Environment - browser - Webkit": "Safari (webkit) is more power efficient",
	"CICD - Execution - Environment - browser - Chromium": "macOS Chromium (blink) is faster",
	"CICD - Execution - Environment - browser - Gecko": "Firefox/Gecko",
	"CICD - Execution - Environment - browser - Goanna": "fork of Firefox/Gecko",
	"CICD - Execution - WebWorkers": "Web Workers allow you to run JavaScript in background threads. This can be useful for offloading heavy computations and keeping your UI responsive. JS code runs on a single thread. Running a long process on the same thread will seriously affect the UI-rendering code, so the best bet is to move the process to another thread. This is done by Web workers. They are the gateway where we can create a thread and run it parallel to the main thread without hampering the UI-flow.",
  "CICD - Execution - WebWorkers - HTML5": "Web Workers, part of the HTML5 spec, have actually been around for a while! They were first proposed back in 2009. Web Workers let you run scripts in background threads, independent of your main webpage’s thread. This means smoother performance and happier users. 😃",
  "CICD - Execution - WebWorkers - usage - Parallel Processing": "Web Workers enable parallel processing by allowing you to execute JavaScript code in separate threads. This means that computationally intensive tasks can be offloaded to Web Workers, running concurrently with the main thread and significantly reducing the impact on overall performance.",
  "CICD - Execution - WebWorkers - usage - Offloading Expensive Computations": "By moving complex calculations, data processing, or heavy algorithms to Web Workers, you prevent them from blocking the main thread. This ensures that user interactions remain responsive and smooth UI even when dealing with intensive computations.",
  "CICD - Execution - WebWorkers - usage - Asynchronous Execution": "Web Workers communicate with the main thread via messages, allowing for asynchronous execution of tasks. This means time-consuming operations can be processed in the background without blocking the main thread, and results can be sent back asynchronously when ready.",
  "CICD - Execution - WebWorkers - usage - Improved Responsiveness": "Offloading expensive computations to Web Workers prevents UI freezes or slowdowns caused by long-running operations. Users can continue interacting with the application while the Web Workers handle the computationally intensive tasks in the background, leading to a more responsive and seamless experience.",
  "CICD - Execution - WebWorkers - errors": "Web Workers provide two helpful error-handling events:",
  "CICD - Execution - WebWorkers - errors - error": "error: Triggered when an error happens within the worker.",
  "CICD - Execution - WebWorkers - errors - messageerror": "messageerror: This one fires if the worker receives a message that can't be properly deserialized.",
	"CICD - Execution - WebWorkers - interthreads": "JavaScript’s Web Workers employ clever mechanisms to facilitate data exchange between threads:",
  "CICD - Execution - WebWorkers - interthreads - Structured Clone Algorithm": "Structured Clone Algorithm: This is the default and most compatible method. It’s a robust way to create deep copies of objects that can be safely shared between threads.",
  "CICD - Execution - WebWorkers - interthreads - Transferable Objects": "Transferable Objects: For scenarios demanding optimal performance, Transferable Objects are the way to go. They enable the transfer of ownership of certain data types, like ArrayBuffers, from one thread to another, eliminating unnecessary copying.",
  "CICD - Execution - WebWorkers - interthreads - SharedArrayBuffer": "SharedArrayBuffer: This one enables true shared memory between threads, allowing simultaneous access and modification. However, be aware that extra care needs to be taken to prevent race conditions and ensure data integrity.",
	"CICD - Execution - WebWorkers - main": "const worker = new Worker('worker.js'); worker.onmessage = function(e) { console.log('Worker said: ', e.data); };​ worker.postMessage('Hello, Worker!');.",
	"CICD - Execution - WebWorkers - worker": "self.onmessage = function(e) { console.log('Main thread said: ', e.data); self.postMessage('Hello, Main thread!'); };.",
	"CICD - Execution - WebWorkers - type - Dedicated": "Dedicated Workers: These workers are tied to the specific script that created them. It’s a one-on-one relationship.",
  "CICD - Execution - WebWorkers - type - Shared": "Shared Workers: As the name suggests, these workers can be shared by multiple scripts running in different windows or iframes, provided they belong to the same domain.",
  "CICD - Execution - WebWorkers - type - Service": "Service Workers: These special workers act like proxies, sitting between your web app, the browser, and the network. They’re essential for building robust offline experiences, intercepting network requests, and enabling features like push notifications.",
	"CICD - Execution - WebWorkers - type - Service - usage": "Service Workers can be used to cache assets and handle offline functionality. This can significantly improve the load time of your web app, especially on repeat visits.",
	"CICD - Execution - WebWorkers - type - Service - register": "navigator.serviceWorker.register('/service-worker.js').then(function(registration) {})",
	"CICD - Execution - performance - debounce": "Debounce function is a javascript programming pattern for delaying execution of a function.",
	"CICD - Execution - performance - throttle": "Throttling is a technique that limits how often a function can be called in a given period of time. It is useful for improving the performance. Throttling is used to call a function after every millisecond or a particular interval of time only the first click is executed immediately.",
	"CICD - Execution - memory": ".",
	"CICD - Execution - memory - Heap": "This is where JavaScript stores objects and data that are dynamically allocated. Memory in the heap is allocated in an unordered way, which means data can be stored at any available location.",
	"CICD - Execution - memory - Stack": "Stack memory is used to keep track of function calls. It works in a last-in, first-out (LIFO) manner, meaning the last function that gets pushed onto the stack is the first one to be popped off when it’s done.",
	"CICD - Execution - memory - Stack - Function call": "The call stack specifically tracks which functions are being executed at any moment. If a function calls another function, the new function is added to the top of the stack. Once a function finishes, it’s removed from the stack, and execution resumes where it left off.",

	"CICD - Audit": "SECTION",
	"CICD - Audit - Logging - console.log": "",
	"CICD - Audit - Logging - process.stdout.write": "https://medium.com/coding-beauty/javascript-console-log-without-newline-20e7e63cca36",
	"CICD - Audit - Testing - Jest": "https://www.robinwieruch.de/react-testing-tutorial/.",
	"CICD - Audit - Testing - Mocha": ".",
	"CICD - Audit - Testing - Chai": ".",
	"CICD - Audit - Testing - Vitest": ".",
	"CICD - Audit - Testing - Playwright": ".",
	"CICD - Audit - Testing - Storybook": ".",
	"CICD - Audit - Testing - Cypress": ".",
	"CICD - Audit - Profiling - Lighthouse": "Lighthouse is an open-source tool by Google for auditing performance, accessibility, and SEO.",
	"CICD - Audit - Profiling - WebPageTest": "WebPageTest allows you to run performance tests from multiple locations around the world. It provides detailed insights into your site’s loading times, resource usage, and more.",
	"CICD - Audit - Profiling - Chrome DevTools": "Chrome DevTools offers a suite of performance profiling and debugging tools.",
	"CICD - Audit - Profiling - Firefox Developer Tools": "Similar to Chrome, open DevTools (F12), go to the “Performance” tab, and start recording.",
	"CICD - Audit - Profiling - NodeJS - prof": "",
	"CICD - Audit - Profiling - NodeJS - clinic": "",
	"CICD - Audit - Security - XSS": "Cross-Site Scripting (XSS).",
	"CICD - Audit - Security - CSP": "Content Security Policy (CSP) Headers. Implementing a Content Security Policy (CSP) is a crucial step in securing your web application against various types of attacks, including Cross-Site Scripting (XSS).",
	"CICD - Audit - Security - CSRF": "Cross-Site Request Forgery (CSRF) is a type of security attack on web applications. In a CSRF attack, the attacker tricks a legitimate user into submitting a request that they did not intend to..",
	"CICD - Audit - Security - IDOR": "Insecure Direct Object References (IDOR) refer to a security weakness where an application provides direct access to objects based on user-supplied input..",
	"CICD - Audit - Security - env": "One of the key aspects of frontend application security is protecting sensitive information like API keys, database credentials, and other confidential data. Use env variables so they don’t get leaked into the git repository. Especially when the repository is open source and public."


	}