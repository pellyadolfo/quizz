{
	"Creational Patterns": "SECTION",
	"FactoryMethodPattern (CR) - Interface (create object)": "The Factory Method defines an <b>interface for creating an object, but lets subclasses decide which classes to instantiate</b>. <b>Injection molding presses</b> demonstrate this pattern. Manufacturers of plastic toys process plastic molding powder, and inject the plastic into molds of the desired shapes. The class of toy (car, action figure, etc.) is determined by the mold..",
	"AbstractFactoryPattern - Intent (CR) - Interface (create families of related objects)": "Provides an <b>interface for creating families of related or dependent objects without specifying their concrete classes</b>. This pattern is found in the <b>sheet metal stamping equipment used in the manufacture of Japanese automobiles</b>. The stamping equipment is an Abstract Factory which creates auto body parts. The same machinery is used to stamp right hand doors, left hand doors, right front fenders, left front fenders, hoods, etc. for different models of cars. Through the use of rollers to change the stamping dies, the concrete classes produced by the machinery can be changed within three minutes..",
	"BuilderPattern (CR) - Object": "<b>aSeparates the construction of a complex object from its representation so that the same construction process can create different representations</b>. This pattern is used by <b>fast food restaurants to construct children's meals</b>. Children's meals typically consist of a main item, a side item, a drink, and a toy (e.g., a hamburger, fries, Coke, and toy dinosaur). Note that there can be variation in the content of the children's meal, but the construction process is the same. Whether a customer orders a hamburger, cheeseburger, or chicken, the process is the same. The employee at the counter directs the crew to assemble a main item, side item, and toy. These items are then placed in a bag. The drink is placed in a cup and remains outside of the bag. This same process is used at competing restaurants..",
	"ObjectPoolPattern (CR) - Collection": "Object pool pattern is similar to an office warehouse. When a <b>new employee is hired, office manager has to prepare a work space for him</b>. She figures whether or not there's a spare equipment in the office warehouse. If so, she uses it. If not, she places an order to purchase new equipment from Amazon. In case if an employee is fired, his equipment is moved to warehouse, where it could be taken when new work place will be needed..",
	"PrototypePattern (CR) - Object": "Specify the kind of objects to create using a <b>prototypical instance</b>, and create new objects by copying this prototype. Prototypes of new products are often built prior to full production, but in this example, the prototype is passive and does not participate in copying itself. The <b>mitotic division of a cell</b> - resulting in two identical cells - is an example of a prototype that plays an active role in copying itself and thus, demonstrates the Prototype pattern. When a cell splits, two cells of identical genotype result. In other words, the cell clones itself..",
	"SingletonPattern (CR) - Object": "Ensure a <b>class online has one instance</b>, and provide a global access point to it. The <b>office of the President of the United States is a Singleton</b>. The United States Constitution specifies the means by which a president is elected, limits the term of office, and defines the order of succession. As a result, there can be at most one active president at any given time. Regardless of the personal identity of the active president, the title, The President of the United States is a global point of access that identifies the person in the office..",
	"SingletonPattern - Java": "Steps to create a singleton class: (1) <b>Override the private constructor</b> to avoid any new object creation with new operator. (2) Declare a <b>private static instance</b> of the same class (3) Provide a <b>public static method</b> that will return the singleton class instance variable. If the variable is not initialized then initialize it or else simply return the instance variable.",
	"SingletonPattern - Java - thread safe": "3 ways through which we can achieve thread safety (1) Create the instance variable at the time of class loading (2) Synchronize the getInstance() method (3) Use synchronized block inside the if loop and volatile variable",

	"Structural Patterns": "SECTION",
	"AdapterPattern (ST) - Interface": "<b>Convert the interface of a class into other interface clients expect</b>. This pattern lets classes work together that could not otherwise because of incompatible interfaces. <b>Socket wrenches</b> provide an example of the Adapter. A socket attaches to a ratchet, provided that the size of the drive is the same. Typical drive sizes in the United States are 1/2 and 1/4. Obviously, a 1/2 drive ratchet will not fit into a 1/4 drive socket unless an adapter is used. A 1/2 to 1/4 adapter has a 1/2 female connection to fit on the 1/2 drive ratchet, and a 1/4 male connection to fit in the 1/4 drive socket..",
	"BridgePattern (ST) - Interface": "<b>Decouple an abstraction from its implementation so both can vary independently</b>. A <b>household switch controlling lights</b>, ceiling fans, etc. is an example of the Bridge. The purpose of the switch is to turn a device on or off. The actual switch can be implemented as a pull chain, simple two position switch, or a variety of dimmer switches..",
	"CompositePattern (ST) - Object": "<b>Compose objects into tree structures to represent part-whole hierarchies</b>. <b>Arithmetic expressions are Composites</b>. An arithmetic expression consists of an operand, an operator (+ - * /), and another operand. The operand can be a number, or another arithmetic expression. Thus, 2 + 3 and (2 + 3) + (4 * 6) are both valid expressions..",
	"DecoratorPattern (ST) - Attribute": "<b>Attach additional responsibilities to an object dynamically</b>. The <b>ornaments that are added to pine</b> or fir trees are examples of Decorators. Lights, garland, candy canes, glass ornaments, etc., can be added to a tree to give it a festive look. The ornaments do not change the tree itself which is recognizable as a Christmas tree regardless of particular ornaments used. As an example of additional functionality, the addition of lights allows one to light up a Christmas tree. Another example: assault gun is a deadly weapon on it's own. But you can apply certain decorations to make it more accurate, silent and devastating..",
	"FacadePattern (ST) - Interface": "The Facade defines a <b>unified, higher level interface to a subsystem that makes it easier to use</b>. Consumers encounter a Facade when <b>ordering from a catalog</b>. The consumer calls one number and speaks with a customer service representative. The customer service representative acts as a Facade, providing an interface to the order fulfillment department, the billing department, and the shipping department..",
	"FlyweightPattern (ST) - Mechanism": "Use <b>sharing to support large numbers of fine grained objects</b> efficienciently. Modern web browsers use this technique to prevent loading same images twice. When <b>browser loads a web page</b>, it traverse through all images on that page. Browser loads all new images from Internet and places them the internal cache. For already loaded images, a flyweight object is created, which has some unique data like position within the page, but everything else is referenced to the cached one..",
	"PrivateClassData (ST) - Data": "<b>Separate data from methods that use it</b>, minimizing the visibility of its attributes (data).",
	"ProxyPattern - Intent (ST) - Object": "Provide a surrogate or <b>placeholder for another object to access control to it</b>, <b>A check or bank draft is a proxy</b> for funds in an account. A check can be used in place of cash for making purchases and ultimately controls access to cash in the issuer's account..",
	
	"Behavioral Patterns": "SECTION",
	"ChainOfResponsibilityPattern (BE) - Objects": "<b>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request<b/>. <b> ATM</b > use the Chain of Responsibility in money giving mechanism..",
	"CommandPattern (BE) - Object": "<b>Encapsulate a request as an object</b>, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations. The check at a diner is an example of a Command pattern. The waiter or <b>waitress takes an order or command from a customer and encapsulates that order by writing it on the check</b>. The order is then queued for a short order cook. Note that the pad of checks used by each waiter is not dependent on the menu, and therefore they can support commands to cook many different items..",
	"InterpreterPattern (BE) - Object": "<b>Given a language, define a representation for its grammar along with an interpreter</b> that uses the representation to interpret sentences in the language. <b>Musicians</b> are examples of Interpreters. The pitch of a sound and its duration can be represented in musical notation on a staff. This notation provides the language of music. Musicians playing the music from the score are able to reproduce the original pitch and duration of each sound represented..",
	"IteratorPattern (BE) - Mechanism": "Provide a way to <b>access the elements of an aggregate object sequentially</b> without exposing its underlying representation. Files are aggregate objects. In office settings where access to files is made through administrative or secretarial staff, the Iterator pattern is demonstrated with the secretary acting as the Iterator. Several television comedy skits have been developed around the premise of an executive trying to understand the secretary's filing system. To the executive, the filing system is confusing and illogical, but the secretary is able to access files quickly and efficiently. On early television sets, a <b>dial was used to change channels</b>. When channel surfing, the viewer was required to move the dial through each channel position, regardless of whether or not that channel had reception. On modern television sets, a next and previous button are used. When the viewer selects the next button, the next tuned channel will be displayed. Consider watching television in a hotel room in a strange city. When surfing through channels, the channel number is not important, but the programming is. If the programming on one channel is not of interest, the viewer can request the next channel, without knowing its number..",
	"MediatorPattern (BE) - Object": "Define an <b>object that encapsulates how a set of objects interact</b>. This pattern promotes loose coupling by keeping objects from referring to each other. The <b>control tower at a controlled airport</b> demonstrates this pattern very well. The pilots of the planes approaching or departing the terminal area communicate with the tower rather than explicitly communicating with one another. The constraints on who can take off or land are enforced by the tower. It is important to note that the tower does not control the whole flight. It exists only to enforce constraints in the terminal area..",
	"MementoPattern (BE) - Data": "Without violating encapsulation, <b>capture and externalize an object's internal state so that the object can be returned to this state later.</b> Promote undo or rollback to full object status. Need to restore an object back to its previous state (e.g. undo or rollback operations). This pattern is common among do-it-yourself <b>mechanics repairing drum brakes on their cars</b>. The drums are removed from both sides, exposing both the right and left brakes. Only one side is disassembled and the other serves as a Memento of how the brake parts fit together. Only after the job has been completed on one side is the other side disassembled. When the second side is disassembled, the first side acts as the Memento..",
	"NullObjectPattern (BE) - Mechanism": "The intent of a this pattern is to encapsulate the absence of an object by providing a substitutable alternative that offers suitable default do nothing behavior.",
	"ObserverPattern (BE) - Relationship": "Define a <b>one-to-many dependency between objects so that when one object changes state</b>, all its dependents are notified and updated automatically. Some <b>auctions</b> demonstrate this pattern. Each bidder possesses a numbered paddle that is used to indicate a bid. The auctioneer starts the bidding, and observes when a paddle is raised to accept the bid. The acceptance of the bid changes the bid price which is broadcast to all of the bidders in the form of a new bid..",
	"StatePattern (BE) - Mechanism": "Allow an object to <b>alter its behavior when its internal state<b/> changes. This pattern can be observed in a <b>vending machine</b>. Vending machines have states based on the inventory, amount of currency deposited, the ability to make change, the item selected, etc. When currency is deposited and a selection is made, a vending machine will either deliver a product and no change, deliver a product and change, deliver no product due to insufficient currency on deposit, or deliver no product due to inventory depletion..",
	"StrategyPattern (BE) - Algorithms": "Define a <b>family of interchangeable algorithms</b>. Modes of <b>transportation to an airport</b> is an example of a Strategy. Several options exist such as driving one's own car, taking a taxi, an airport shuttle, a city bus, or a limousine service. For some airports, subways and helicopters are also available as a mode of transportation to the airport. Any of these modes of transportation will get a traveler to the airport, and they can be used interchangeably. The traveler must chose the Strategy based on trade-offs between cost, convenience, and time..",
	"TemplateMethodPattern - Algorithm": "Define the <b>skeleton of an algorithm</b> allowing subclasses redefine certain steps of an algorithm without changing the algorithm's structure. Home builders</b> use the Template Method when developing a new subdivision. A typical subdivision consists of a limited number of floor plans with different variations available for each. Within a floor plan, the foundation, framing, plumbing, and wiring will be identical for each house. Variation is introduced in the later stages of construction to produce a wider variety of models. Another example: daily routine of a worker.",
	"VisitorPattern - Intent - Operation": "<b>Operation to be performed on the elements of an object structure without changing the classes of the elements on which it operates</b>. This pattern can be observed in the operation of a taxi company. When a person calls a taxi company (accepting a visitor), the company dispatches a cab to the customer. <b>Upon entering the taxi the customer, or Visitor, is no longer in control of his or her own transportation</b>, the taxi (driver) is.",

	"FactoryPattern vs FactoryMethodPattern": "* Factory Method is used to create one product only but Abstract Factory is about creating families of related or dependent products.<br/><br/>Factory Method pattern exposes a method to the client for creating the object whereas in the case of Abstract Factory they expose a family of related objects which may consist of these Factory methods.<br/><br/>Factory Method pattern hides the construction of a single object whereas Abstract Factory hides the construction of a family of related objects. Abstract factories are usually implemented using (a set of) factory methods.<br/><br/>Abstract Factory pattern uses composition to delegate the responsibility of creating an object to another class while Factory Method design pattern uses inheritance and relies on a derived class or subclass to create an object.<br/><br/>The idea behind the Factory Method pattern is that it allows for the case where a client doesn't know what concrete classes it will be required to create at runtime, but just wants to get a class that will do the job while Abstract Factory pattern is best utilized when your system has to create multiple families of products or you want to provide a library of products without exposing the implementation details.!.",
	"StrategyPattern vs FactoryMethodPattern": "The strategy design pattern allows us to select an algorithm at runtime. The FactoryMethodPattern is a creational design pattern deal with the problem of creating objects without specifying the exact class of the object that it has to create."
}