{

	"Performance": "SECTION",
	"Performance 0": "https://www.linkedin.com/posts/maheshma_performanceengineering-testing-softwareengineering-activity-7316271546635825153-_Dkl/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 1": "https://www.linkedin.com/posts/piyush-ranjan-9297a632_boost-your-api-performance-key-strategies-activity-7312315205512749056-OycL/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 2": "https://www.linkedin.com/posts/sina-riyahi_20-steps-to-improveing-api-performance-activity-7312843447411838976-m3jp/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 3": "https://www.linkedin.com/posts/maheshma_caching-caching-to-reduce-latency-and-activity-7317358681019293699-G2me/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 4": "https://www.linkedin.com/posts/arslanahmad_%F0%9D%90%87%F0%9D%90%A8%F0%9D%90%B0-%F0%9D%90%AD%F0%9D%90%A8-%F0%9D%90%AB%F0%9D%90%9E%F0%9D%90%9D%F0%9D%90%AE%F0%9D%90%9C%F0%9D%90%9E-%F0%9D%90%AD%F0%9D%90%A1%F0%9D%90%9E-%F0%9D%90%A5%F0%9D%90%9A%F0%9D%90%AD%F0%9D%90%9E%F0%9D%90%A7%F0%9D%90%9C%F0%9D%90%B2-activity-7323625433923489792-g8eE?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 5": "https://medium.com/@yewang222/i-tried-running-a-billion-requests-through-5-web-frameworks-heres-what-survived-e7e8c418fd3b",
	"Performance 6": "https://www.linkedin.com/posts/piyush-ranjan-9297a632_boost-your-api-performance-key-strategies-activity-7331522789146783744-Iryu?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 7": "https://www.linkedin.com/posts/santhoshjampala_approach-for-handling-sudden-increase-in-activity-7334335401706311683-5FbZ?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 8": "https://www.linkedin.com/posts/riyazsayyad_cdn-is-the-secret-to-faster-more-secure-activity-7313519474391822338-_I2d/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 9": "",
	"Performance 10": "",

	"Client": "SECTION",
	"Client - ArrowFuntions": "https://javascript.plainenglish.io/the-javascript-interview-question-thats-failing-senior-developers-929a884294e7",

	"Networking": "SECTION",
	"Networking - Scaling": ".",
	"Networking - Caching": "Save frequently requested data in memory or edge locations. This reduces database hits and avoids repeating the same processing.",
	"Networking - Caching - CDN": "Store static files like images, scripts, and stylesheets on edge servers closer to your users. This reduces round-trip time and speeds up content delivery.",

	"Infra": "SECTION",
	"Infra - Throttling": ".",
	"Infra - RateLimiting": ".",
	"Infra - LoadBalancing": "Avoid server overload by distributing user requests across multiple servers. This keeps traffic flowing smoothly and improves uptime.",

	"Processing": "SECTION",
	"Processing - LoadBalancing": "Add a load balancer to distribute queries across multiple database instances, ensuring no single node becomes a bottleneck.",
	"Processing - JWTAuthentication": ".",
	"Processing - NoStickySessions": ".",
	"Processing - Compression": "Use formats like Gzip or Brotli to compress files before sending them. Smaller files mean faster transfers and less bandwidth usage.",
	"Processing - Async": "Run background jobs using worker systems to handle heavy tasks. This keeps your app responsive by freeing up the main thread.",
	"Processing - Server - SpringBoot - 3.5": "A comprehensive analysis of Spring Boot 3.5 reveals remarkable performance enhancements across all critical metrics when compared to version 3.0.",
	"Processing - Server - ByPerformance": "",
	"Processing - Server - ByPerformance - Quarkus": "Quarkus killing SpringBoot",
	"Processing - Server - ByPerformance - SpringBoot3.5+VirtualThreads": "",
	"Processing - Server - ByPerformance - SpringBoot": "",

	"Middleware": "SECTION",
	"Middleware - Asynchronous": "For write-intensive operations, we can leverage message queues like Kafka or RabbitMQ to handle tasks asynchronously, reducing the immediate load on the database.",
	"Middleware - VM - VirtualThreads": ".",
	"Middleware - VM - VirtualThreads - SpringBoot": "spring.threads.virtual.enabled=true - This enables virtual thread-per-request, making it extremely cheap to scale HTTP connections.",
	"Middleware - VM - StructuredConcurrency": ".",
	"Middleware - Brokers": "https://medium.com/@vermatanisha666/why-spring-boot-3-5-is-killing-the-need-for-message-queues-d040687b5c87",
	
	"Data": "SECTION",
	"Data - Archiving": "Archive older, less-used data to a separate storage system to keep the active dataset manageable. This helps maintain fast query performance on current data.",
	"Data - ConnectionPool": "Reuse existing database connections instead of opening a new one for each request. This lowers latency and increases database efficiency.",
	"Data - Timeouts": ".",
	"Data - LIMITQueries": ".",
	"Data - Indexes": "Speed up queries by indexing key fields in your database. This makes searches faster and improves overall data access times.",
	"Data - Sharding": ".",
	"Data - ReadReplicas": ".",
	"Data - Performance": ".",
	"Data - Performance - Caching": "Integrate caching solutions like Redis or Memcached to store frequently accessed data in memory, reducing the load on the database. Use query-level caching for expensive operations to further enhance performance.",
	"Data - Performance - Replication": "Use master-slave replication where the master handles writes, and the replicas handle reads, improving both performance and reliability. In more complex systems, multi-master replication can be used to handle writes from multiple locations.",
	"Data - Performance - HorizontalScaling": "Implement sharding to distribute data across multiple nodes. For example, we can shard based on user ID or geographic regions to evenly distribute the load. Partition large tables logically, such as by time ranges (e.g., monthly partitions for a logging system).",
	"Data - Performance - DatabaseSchemaDesign": "Start with a normalized schema to eliminate redundancy and ensure consistency. For performance-critical applications, we can selectively denormalize certain tables to optimize read-heavy operations.",
	"Data - Database - Metrics - QueryPerformance": "Measure execution time and use EXPLAIN plans to optimize queries.",
	"Data - Database - Metrics - ResponseTime": "Track round-trip time for queries, aiming for low latency.",
	"Data - Database - Metrics - Throughput": "Monitor how many queries the database handles per second/minute.",
	"Data - Database - Metrics - DatabaseConnections": "Monitor the number of active connections and optimize connection pooling.",
	"Data - Database - Metrics - DiskI/O": "Measure read/write speeds, queue length, and disk throughput.",
	"Data - Database - Metrics - CPUUsage": "Track CPU utilization to ensure the database is not overburdened.",
	"Data - Database - Metrics - MemoryUsage": "Monitor memory consumption to avoid excessive usage leading to slowdowns.",
	"Data - Database - Metrics - LockContention": "Track lock conflicts and deadlocks to avoid delays.",
	"Data - Database - Metrics - CacheHitRatio": "Monitor cache hit ratios to ensure frequently accessed data is cached.",
	"Data - Database - Metrics - NetworkLatency": "Measure round-trip time for data transfer between the application and database.",
	"Data - Database - Metrics - SlowQueryLogs": "Capture and analyze slow queries for optimization.",
	"Data - Database - Metrics - IndexOptimization": "Ensure efficient indexing and monitor index fragmentation.",
	"Data - Database - Metrics - QueryExecutionPlan:": "Mentioned briefly but should include advice on using query profiling tools like EXPLAIN in SQL databases.",
	"Data - Database - Metrics - DatabaseSchemaDesign": "Optimizing schema design impacts performance and should be addressed."

}

