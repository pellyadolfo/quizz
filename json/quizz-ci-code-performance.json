{

	"Performance": "SECTION",
	"Performance 0": "https://www.linkedin.com/posts/maheshma_performanceengineering-testing-softwareengineering-activity-7316271546635825153-_Dkl/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 1": "https://www.linkedin.com/posts/piyush-ranjan-9297a632_boost-your-api-performance-key-strategies-activity-7312315205512749056-OycL/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 2": "https://www.linkedin.com/posts/sina-riyahi_20-steps-to-improveing-api-performance-activity-7312843447411838976-m3jp/?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 3": "https://www.linkedin.com/posts/maheshma_caching-caching-to-reduce-latency-and-activity-7317358681019293699-G2me/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 4": "https://www.linkedin.com/posts/arslanahmad_%F0%9D%90%87%F0%9D%90%A8%F0%9D%90%B0-%F0%9D%90%AD%F0%9D%90%A8-%F0%9D%90%AB%F0%9D%90%9E%F0%9D%90%9D%F0%9D%90%AE%F0%9D%90%9C%F0%9D%90%9E-%F0%9D%90%AD%F0%9D%90%A1%F0%9D%90%9E-%F0%9D%90%A5%F0%9D%90%9A%F0%9D%90%AD%F0%9D%90%9E%F0%9D%90%A7%F0%9D%90%9C%F0%9D%90%B2-activity-7323625433923489792-g8eE?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 5": "https://medium.com/@yewang222/i-tried-running-a-billion-requests-through-5-web-frameworks-heres-what-survived-e7e8c418fd3b",
	"Performance 6": "https://www.linkedin.com/posts/piyush-ranjan-9297a632_boost-your-api-performance-key-strategies-activity-7331522789146783744-Iryu?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 7": "https://www.linkedin.com/posts/santhoshjampala_approach-for-handling-sudden-increase-in-activity-7334335401706311683-5FbZ?utm_source=share&utm_medium=member_android&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 8": "https://www.linkedin.com/posts/riyazsayyad_cdn-is-the-secret-to-faster-more-secure-activity-7313519474391822338-_I2d/?utm_source=share&utm_medium=member_desktop&rcm=ACoAAABC9LwBrHjPW40o31rZRtAXH6eii8ctLzQ",
	"Performance 9": "",
	"Performance 10": "",

	"Client": "SECTION",
	"Client - ArrowFuntions": "https://javascript.plainenglish.io/the-javascript-interview-question-thats-failing-senior-developers-929a884294e7",
	"Client - Caching - Goal - access": "",
	"Client - Caching - Goal - load": "Cacheability isn't just about the transfer, it's also about decreasing server load in a lot of applications.",
	"Client - Caching - Layers": "HTTP caching involves client, forward proxy, reverse proxy and server.",
	"Client - Caching - Layers - Client": "",
	"Client - Caching - Layers - Client - CDN": "",
	"Client - Caching - Layers - Client - CDN - Static": "Cache static assets and public API responses at edge locations.",
	"Client - Caching - Layers - Client - CDN - Accept": "Configure cache keys by URL + headers (Accept, Accept-Language)",
	"Client - Caching - Layers - Client - CDN - TTL": "Typical TTL: 1 minute to 1 hour for dynamic content",
	"Client - Caching - Layers - Transport - Headers": "HTTP response headers: Expires, Cache-Control, ETag, Last-Modified",
	"Client - Caching - Layers - Transport - Headers - Cache-Control": "Use Cache-Control headers for browser caching",
	"Client - Caching - Layers - Transport - Headers - Expire": ".",
	"Client - Caching - Layers - Transport - Headers - ETag": "Implement ETag/Last-Modified for conditional requests. ETags (Entity Tags) are HTTP response headers (ETag) that act as unique identifiers for a specific version of a resource. They help browsers and servers determine whether a cached resource is still fresh or needs to be re-downloaded.",
	"Client - Caching - Layers - Transport - Headers - Last-Modified": "Implement ETag/Last-Modified for conditional requests",
	"Client - Caching - Layers - Transport - Headers - private, no-cache": "For dynamic content: private, no-cache with validation",

	"Networking": "SECTION",
	"Networking - Scaling": ".",
	"Networking - Caching": "Save frequently requested data in memory or edge locations. This reduces database hits and avoids repeating the same processing.",
	"Networking - Caching - CDN": "Store static files like images, scripts, and stylesheets on edge servers closer to your users. This reduces round-trip time and speeds up content delivery.",

	"Infra": "SECTION",
	"Infra - Throttling": ".",
	"Infra - RateLimiting": ".",
	"Infra - LoadBalancing": "Avoid server overload by distributing user requests across multiple servers. This keeps traffic flowing smoothly and improves uptime.",

	"Processing": "SECTION",
	"Processing - LoadBalancing": "Add a load balancer to distribute queries across multiple database instances, ensuring no single node becomes a bottleneck.",
	"Processing - JWTAuthentication": ".",
	"Processing - NoStickySessions": ".",
	"Processing - Caching": ".",
	"Processing - Caching - Strategies - Driver - Consumer - CacheAside": "Lazy Loading. First checks the cache. If data is found (a cache hit) use it. If not found (a cache miss), retrieves from database and store in cache.",
	"Processing - Caching - Strategies - Driver - Provider - WriteThrough": "When data is updated, it is written to the cache and the database simultaneously.",
	"Processing - Caching - Strategies - Driver - Provider - WriteBack": "Data is written to the cache first and then to the database 'asynchronously.",
	"Processing - Caching - Strategies - Driver - Provider - WriteAround": "Bypasses the cache for writes, writing directly to the database. The cache is updated only on subsequent reads.",
	"Processing - Caching - Strategies - Driver - Cache - ReadThrough": "The cache acts as data loader. If data isn't in the cache, it's retrieved from the database and stored in the cache.",
	"Processing - Caching - Strategies - Driver - Cache - RefreshAhead": "The cache proactively refreshes data before it expires.",
	"Processing - Caching - Strategies - Eviction": "Cache Invalidation.",
	"Processing - Caching - Strategies - Eviction - TTL": "𝐓𝐢𝐦𝐞 𝐭𝐨 𝐋𝐢𝐯𝐞 (𝐓𝐓𝐋) - Items are evicted after a set time limit (expiry time). - Prevents stale data, useful in distributed systems. - Example: DNS records have TTL values, so if an IP address changes, clients don’t hold onto outdated mappings.",
	"Processing - Caching - Strategies - Eviction - FIFO": "𝐅𝐢𝐫𝐬𝐭 𝐈𝐧, 𝐅𝐢𝐫𝐬𝐭 𝐎𝐮𝐭 (𝐅𝐈𝐅𝐎) - Evicts the oldest stored item first, regardless of usage. - Simple to implement but may remove still-relevant data. - Example: Simple queue-based caching systems.",
	"Processing - Caching - Strategies - Eviction - LRU": "𝐋𝐞𝐚𝐬𝐭 𝐑𝐞𝐜𝐞𝐧𝐭𝐥𝐲 𝐔𝐬𝐞𝐝 (𝐋𝐑𝐔) - Removes the least recently accessed item first. - Works well when older data is less likely to be used again. - Example: Browsers use LRU to discard old pages from memory when opening new tabs.",
	"Processing - Caching - Strategies - Eviction - LFU": "𝐋𝐞𝐚𝐬𝐭 𝐅𝐫𝐞𝐪𝐮𝐞𝐧𝐭𝐥𝐲 𝐔𝐬𝐞𝐝 (𝐋𝐅𝐔) - Evicts the least accessed items over time. - Prioritizes keeping frequently used items in cache. - Example: CDNs use LFU to keep trending videos in cache while removing rarely watched ones.",
	"Processing - Caching - Strategies - Eviction - MRU": "𝐌𝐨𝐬𝐭 𝐑𝐞𝐜𝐞𝐧𝐭𝐥𝐲 𝐔𝐬𝐞𝐝 (𝐌𝐑𝐔) - Opposite of LRU – evicts the most recently accessed item first. - Useful when recent data becomes obsolete quickly. - Example: In a music streaming app, the last played song is less likely to be played again, making MRU a better choice.",
	"Processing - Caching - Strategies - Eviction - RR": "𝐑𝐚𝐧𝐝𝐨𝐦 𝐑𝐞𝐩𝐥𝐚𝐜𝐞𝐦𝐞𝐧𝐭 (𝐑𝐑) - Randomly evicts an item when the cache is full. - Low overhead, but less predictable performance. - Example: Some network routers use RR for managing limited memory, avoiding complex eviction policies.",
	"Processing - Caching - Strategies - Eviction - TT": "𝐓𝐰𝐨-𝐓𝐢𝐞𝐫𝐞𝐝 𝐂𝐚𝐜𝐡𝐢𝐧𝐠 - Uses a fast in-memory cache (e.g., Redis) & a slower persistent cache (e.g., disk-based). - Optimizes speed & storage by balancing hot and cold data. - Example: A CDN stores frequently accessed content in RAM (L1 cache) while keeping less-accessed content on disk (L2 cache) to balance performance and cost.",
	"Processing - Caching - Tools - Redis": "",
	"Processing - Caching - Tools - Memcache": "",
	"Processing - Caching - Tools - VarnishCache": ".",
	"Processing - Async": "Run background jobs using worker systems to handle heavy tasks. This keeps your app responsive by freeing up the main thread.",
	"Processing - Server - SpringBoot - 3.5": "A comprehensive analysis of Spring Boot 3.5 reveals remarkable performance enhancements across all critical metrics when compared to version 3.0.",
	"Processing - Server - ByPerformance": "",
	"Processing - Server - ByPerformance - Quarkus": "Quarkus killing SpringBoot",
	"Processing - Server - ByPerformance - SpringBoot3.5+VirtualThreads": "",
	"Processing - Server - ByPerformance - SpringBoot": "",

	"Middleware": "SECTION",
	"Middleware - Asynchronous": "For write-intensive operations, we can leverage message queues like Kafka or RabbitMQ to handle tasks asynchronously, reducing the immediate load on the database.",
	"Middleware - Brokers": "https://medium.com/@vermatanisha666/why-spring-boot-3-5-is-killing-the-need-for-message-queues-d040687b5c87",
	
	"Data": "SECTION",
	"Data - Scaling": ".",
	"Data - Scaling - Archiving": "Archive older, less-used data to a separate storage system to keep the active dataset manageable. This helps maintain fast query performance on current data.",
	"Data - Scaling - Replication": "Use master-slave replication.",
	"Data - Scaling - Replication - Writes": "The master handles writes.",
	"Data - Scaling - Replication - Reads": "The replicas handle reads.",
	"Data - Scaling - Replication - Multiple": "In more complex systems, multi-master replication can be used to handle writes from multiple locations.",
	"Data - Scaling - Sharding": "Implement sharding to distribute data across multiple nodes. For example, we can shard based on user ID or geographic regions to evenly distribute the load.",
	"Data - Scaling - Partition": "Partition large tables logically, such as by time ranges (e.g., monthly partitions for a logging system).",
	"Data - Scaling - Vertical": "",
	"Data - Scaling - Caching - Layers - Database": "",
	"Data - Scaling - Caching - Layers - Database - query": "Enable query cache (MySQL, PostgreSQL)",
	"Data - Scaling - Caching - Layers - Database - materializedViews": "Use materialized views for complex queries",
	"Data - Scaling - Caching - Layers - Database - memory": "Configure appropriate memory allocations",
	"Data - Scaling - Caching": "Integrate caching solutions like Redis or Memcached to store frequently accessed data in memory, reducing the load on the database. Use query-level caching for expensive operations to further enhance performance.",
	"Data - Scaling - Indexes": "Speed up queries by indexing key fields in your database. This makes searches faster and improves overall data access times.",
	"Data - Scaling - ConnectionPool": "Reuse existing database connections instead of opening a new one for each request. This lowers latency and increases database efficiency.",
	"Data - Scaling - ConnectionPool - Timeouts": ".",
	"Data - Scaling - ConnectionPool - maximum-pool-size": ".",
	"Data - Scaling - ConnectionPool - Tools - HikariCP": "Use HikariCP, which is now Spring Boot’s default.",
	"Data - Scaling - QueryOptimization": ".",
	"Data - Scaling - QueryOptimization - LIMITQueries": ".",	
	"Data - Design - Denormalize": "For performance-critical applications, we can selectively denormalize certain tables to optimize read-heavy operations.",
	"Data - Design - Normalize": "Start with a normalized schema to eliminate redundancy and ensure consistency.",

	"CI - Packaging": "SECTION",
	"CI - Packaging - CodeReduction": ".",
	"CI - Packaging - CodeReduction - Compression": "Request and response payloads can be compressed using algorithms such as gzip to reduce transmitted data volume. This speeds up upload and download times.",
	"CI - Packaging - CodeReduction - Compression - Formats": "Use formats like Gzip or Brotli to compress files before sending them. Smaller files mean faster transfers and less bandwidth usage.",
	"CI - Packaging - CodeReduction - Compression - Headers": "HTTP response headers: Accept-Encoding, Content-Encoding",
	"CI - Packaging - CodeReduction - Pagination": "Pagination is a common optimization technique when result sets are large. By streaming results back to the client in pages, service responsiveness can be improved.",
	"CI - Packaging - CodeReduction - Pagination - OffsetBased": "This technique uses an offset and a limit parameter to define the starting point and the number of records to return. Example: GET /orders?offset=0&limit=3 ",
	"CI - Packaging - CodeReduction - Pagination - CursorBased": "This technique uses a cursor (a unique identifier) to mark the position in the dataset. Typically, the cursor is an encoded string that points to a specific record. Example: GET /orders?cursor=xxx ",
	"CI - Packaging - CodeReduction - Pagination - PageBased": "This technique specifies the page number and the size of each page. Example: GET /items?page=2&size=3 ",
	"CI - Packaging - CodeReduction - Pagination - KeysetBased": "This technique uses a key to filter the dataset, often the primary key or another indexed column. Example: GET /items?after_id=102&limit=3 ",
	"CI - Packaging - CodeReduction - Pagination - TimeBased": "This technique uses a timestamp or date to paginate through records. Example: GET /items?start_time=xxx&end_time=yyy ",
	"CI - Packaging - CodeReduction - Pagination - Hybrid": "This technique combines multiple pagination techniques to leverage their strengths. Example: Combining cursor and time-based pagination for efficient scrolling through time-ordered records. ",
	"CI - Packaging - CodeSplitting": ".",
	"CI - Packaging - CodeFetching": ".",

	"CI - Building": "SECTION",
	"CI - Building - GraalVM": "GraalVM is a game-changer here. It supports ahead-of-time (AOT) compilation, reducing runtime overhead dramatically. You’ll see faster startup and lower memory consumption.",

	"CI - Integration": "SECTION",
	"CI - Integration - VM - VirtualThreads": ".",
	"CI - Integration - VM - VirtualThreads - SpringBoot": "spring.threads.virtual.enabled=true - This enables virtual thread-per-request, making it extremely cheap to scale HTTP connections.",
	"CI - Integration - VM - StructuredConcurrency": ".",
	"CI - Integration - Execution - ZGC": "ZGC (-XX:+UseZGC) shines in ultra-low-latency scenarios.",
	"CI - Integration - Memory - CDS": "Enable Class Data Sharing with -Xshare:on to speed up startup and reduce memory footprint."

}

