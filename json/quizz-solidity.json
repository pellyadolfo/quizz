{
  "Solidity": "SECTION",
  "Solidity - quizz": "https://www.rareskills.io/post/solidity-interview-questions",
  "Solidity - quizz2": "https://coinsbench.com/master-solidity-must-know-interview-questions-for-ethereum-developers-%EF%B8%8F-practical-only-00cc15a9b9bf",

	"Variables": "SECTION",
  "Variables - DataTypes - types - Value - Literals - Address": "literals that pass the address checksum test, for example 0xdCad3a6d3569DF655070DEd06cb7A1b2Ccd1D3AF are of address type.",
  "Variables - DataTypes - types - Value - Literals - Rational": "",
  "Variables - DataTypes - types - Value - Literals - Integer": "",
  "Variables - DataTypes - types - Value - Literals - Integer - Arithmetic": "A fixed-point number is an integer that stores only the numerator of a fraction â€” while the denominator is implied. This type of arithmetic is not necessary in most programming languages because they have floating point numbers. It is necessary in Solidity because Solidity only has integers, and we often need to perform operations with fractional numbers. https://medium.com/rareskills/fixed-point-arithmetic-in-solidity-using-solady-solmate-and-abdk-as-examples-100d972f884f",
  "Variables - DataTypes - types - Value - Literals - String": "",
  "Variables - DataTypes - types - Value - Literals - Unicode": "",
  "Variables - DataTypes - types - Value - Literals - Hexadecimal": "",
  "Variables - DataTypes - types - Value - Variables - Boolean": "",
  "Variables - DataTypes - types - Value - Variables - Integer": "",
  "Variables - DataTypes - types - Value - Variables - Address": "Holds a 20 byte value (size of an Ethereum address).",
  "Variables - DataTypes - types - Value - Variables - Address - balance": "It is possible to query the balance of an address using the property balance.",
  "Variables - DataTypes - types - Value - Variables - Address - transfer": "It is possible to send Ether (in units of wei) to a payable address using the transfer function",
  "Variables - DataTypes - types - Value - Variables - AddressPayable": "The idea behind this distinction is that address payable is an address you can send Ether to. Same as address, but with the additional members transfer and send.",
	"Variables - DataTypes - types - Value - Variables - FixedPointNumbers": "",
  "Variables - DataTypes - types - Value - Variables - Enums": "",
  "Variables - DataTypes - types - Value - Variables - Functions": "",
  "Variables - DataTypes - types - Reference": "",
  "Variables - DataTypes - types - Reference - Arrays": "",
  "Variables - DataTypes - types - Reference - ArraysSlides": "",
  "Variables - DataTypes - types - Reference - Structs": "",
  "Variables - DataTypes - types - Mapping": "https://coinsbench.com/understanding-mappings-in-solidity-a-deep-dive-0a4a59034e72",
  "Variables - DataTypes - types - Mapping - IterableMappings": "",
  "Variables - DataTypes - Conversions - uint160 - address": "Explicit conversions to and from address are allowed for uint160",
  "Variables - DataTypes - Conversions - integer - address": "Explicit conversions to and from address are allowed for integer literals",
  "Variables - DataTypes - Conversions - bytes20 - address": "Explicit conversions to and from address are allowed for bytes20",
  "Variables - DataTypes - Conversions - payable - address": "Implicit conversions from address payable to address are allowed",
  "Variables - DataTypes - Conversions - contract - address": "Explicit conversions to and from address are allowed for contract",
  "Variables - DataTypes - Conversions - address - payable": "from address to address payable must be explicit via payable(<address>).",
  "Variables - DataTypes - Conversions - contract - payable": "from address to address payable must be explicit via payable(<contract>). For contract-type, this conversion is only allowed if the contract can receive Ether, i.e., the contract either has a receive or a payable fallback function. Note that payable(0) is valid and is an exception to this rule.",

	"Logic": "SECTION",
	"Logic - Sync - Imperative - ControlFlow - Expressions": "",
	"Logic - Sync - Imperative - ControlFlow - Ternary": "The ternary operator is used in expressions of the form <expression> ? <trueExpression> : <falseExpression>. It evaluates one of the latter two given expressions depending upon the result of the evaluation of the main <expression>. If <expression> evaluates to true, then <trueExpression> will be evaluated, otherwise <falseExpression> is evaluated.",
	"Logic - Sync - Imperative - ControlFlow - if": "",
	"Logic - Sync - Imperative - ControlFlow - else": "",
	"Logic - Sync - Imperative - ControlFlow - Iterators - while": ".",
	"Logic - Sync - Imperative - ControlFlow - Iterators - do": ".",
	"Logic - Sync - Imperative - ControlFlow - Iterators - for": ".",
	"Logic - Sync - Imperative - ControlFlow - Iterators - break": ".",
	"Logic - Sync - Imperative - ControlFlow - Iterators - continue": ".",
	"Logic - Sync - Imperative - ControlFlow - ErrorHandling - trycatch": "",

	"CICD - Architecture": "SECTION",
	"CICD - Architecture - Structure - Contract": "Contracts in Solidity are similar to classes in object-oriented languages.",
	"CICD - Architecture - Structure - AbstractContract": "",
	"CICD - Architecture - Structure - Interface": "",
	"CICD - Architecture - Structure - Functions": "",
	"CICD - Architecture - Structure - Inheritance": ".",
	"CICD - Architecture - Structure - ABI": "The Contract Application Binary Interface (ABI) is the standard way to interact with contracts in the Ethereum ecosystem, both from outside the blockchain and for contract-to-contract interaction.",
	"CICD - Architecture - Patterns - Proxy": "",
	"CICD - Architecture - Patterns - Proxy - UUPS": "",
	"CICD - Architecture - Patterns - Proxy - TUP": "",

	"CICD - Bundling": "SECTION",
	"CICD - Bundling - Arch - Functions - selector": "https://medium.com/rareskills/understanding-the-function-selector-in-solidity-f8d115372ef9",
	"CICD - Bundling - Arch - Functions - receive": "https://coinsbench.com/understanding-fallback-vs-receive-functions-in-solidity-647986a82af2",

	"CICD - Building": "SECTION",
	"CICD - Building - solc": "",

	"CICD - Execution": "SECTION",
	"CICD - Execution - Scopes - functions - private": "",
	"CICD - Execution - Scopes - functions - internal": "",
	"CICD - Execution - Scopes - functions - public": "",
	"CICD - Execution - Scopes - functions - external": "",
	"CICD - Execution - Scopes - functionargs - memory": "",
	"CICD - Execution - Scopes - functionargs - calldata": "",
  "CICD - Execution - Storage - transient": "https://coinsbench.com/transient-storage-in-solidity-a-closer-look-at-eip-1153-f5db99b3698d",

	"CICD - Audit": "SECTION"


}

