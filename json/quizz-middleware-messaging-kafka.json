{
  "Kafka": "SECTION",
  "Kafka - Advantages": "Kafka can handle multiple producers and consumers, while providing disk-based data retention and high scalability. ",

  "KafkaMessage": "SECTION",
  "KafkaMessage ": "Message is the basic unit of data in Kafka. It consists of headers, key, and value. ",
  "KafkaTopics ": "Messages are organized into topics, which are divided into partitions for scalability. Every message goes to a particular Topic. Topics have multiple partitions.",
  "KafkaTopics - RetentionPolicy": "Adjust log.retention.hours & segment.bytes wisely.",
	"KafkaPartitions": "",
	"KafkaPartitions - Strategies": "",



	"KafkaProducer": "SECTION",
	"KafkaProducer ": "Producers in Kafka create new messages, batch them, and send them to a Kafka topic.",
	"KafkaProducer - Tuning": "Set acks=all, tweak linger.ms & batch.size for efficiency.",
	"KafkaProducer - Idempotent": "Enable enable.idempotence=true for exactly-once delivery.",


	"KafkaConsumer": "SECTION",
	"KafkaConsumer ": "Kafka consumers work together as a consumer group to read messages from the broker. ",
	"KafkaConsumer - Balanced": "Ensure even consumer distribution across partitions.",



	"KafkaCluster": "SECTION",
	"KafkaCluster ": "A Kafka cluster consists of several brokers where each partition is replicated across multiple brokers to provide high availability and redundancy. ",

	"UseCases": "SECTION",
	"UseCases - MonitorLag ": "Use Kafka Manager or Prometheus to track consumer lag.",
	"UseCases - StreamProcessing ": "Use Kafka Streams or Flink for real-time processing."

}

