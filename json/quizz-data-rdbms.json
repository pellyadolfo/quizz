{
	"SQL": "SECTION",

	"SQL - Comamnds": "SECTION",
	"SQL - Comamnds - CONSTRAINTS": "",
	"SQL - Comamnds - CONSTRAINTS ": "A set of conditions defining the type of data that can be input into each column of a table. Constraints ensure data integrity in a table and block undesired actions.",
	"SQL - Comamnds - CONSTRAINTS - DEFAULT": "provides a default value for a column.",
	"SQL - Comamnds - CONSTRAINTS - UNIQUE": "allows only unique values.",
	"SQL - Comamnds - CONSTRAINTS - NOT NULL": "allows only non-null values.",
	"SQL - Comamnds - CONSTRAINTS - PRIMARY KEY": "allows only unique and strictly non-null values (NOT NULL and UNIQUE).",
	"SQL - Comamnds - CONSTRAINTS - FOREIGN KEY": "provides shared keys between two or more tables.",
	"SQL - Comamnds - OPERATORS": "",
	"SQL - Comamnds - OPERATORS - Arithmetic": "Arithmetic (+, -, *, /, etc.)",
	"SQL - Comamnds - OPERATORS - Comparison": "Comparison (>, <, =, >=, etc.)",
	"SQL - Comamnds - OPERATORS - Compound": "Compound (+=, -=, *=, /=, etc.)",
	"SQL - Comamnds - OPERATORS - Logical": "Logical (AND, OR, NOT, BETWEEN, etc.)",
	"SQL - Comamnds - OPERATORS - String": "String (%, _, +, ^, etc.)",
	"SQL - Comamnds - OPERATORS - Set": "Set (UNION, UNION ALL, INTERSECT, and MINUS (or EXCEPT))",
	"SQL - Comamnds - CLAUSE": "",
	"SQL - Comamnds - CLAUSE ": "A condition imposed on a SQL query to filter the data to obtain the desired result. Some examples are WHERE, LIMIT, HAVING, LIKE, AND, OR, ORDER BY, etc.",
	"SQL - Comamnds - CLAUSE - FROM": "",
	"SQL - Comamnds - CLAUSE - GROUP BY": "",
	"SQL - Comamnds - CLAUSE - JOIN": "",
	"SQL - Comamnds - CLAUSE - WHERE": "checks each row individually",
	"SQL - Comamnds - CLAUSE - ORDER BY": "",
	"SQL - Comamnds - CLAUSE - LIMIT": "",
	"SQL - Comamnds - CLAUSE - HAVING": "works on aggregated data after they are grouped",

	"SQL - Querying": "SECTION",
	"SQL - Querying - TCL": "",
	"SQL - Querying - TCL - COMMIT": "",
	"SQL - Querying - TCL - SET TRANSACTION": "",
	"SQL - Querying - TCL - ROLLBACK": "",
	"SQL - Querying - TCL - SAVEPOINT": "",
	"SQL - Querying - DQL": "",
	"SQL - Querying - DQL - SELECT": "",
	"SQL - Querying - DQL - SELECT - DISTINCT": "",
	"SQL - Querying - DQL - SELECT - JOIN": "A SQL clause used to combine and retrieve records from two or multiple tables. https://www.naukri.com/code360/library/sql-joins-interview-questions",
	"SQL - Querying - DQL - SELECT - JOIN - Tools": "",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - LEFT JOIN": "Even if there is no matching row in the right table, a left join returns every entry from the left table. The values NULL will be returned for any columns from the right table that don't have a corresponding entry in the left table.",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - INNER JOIN": "SQL Inner Join returns all rows from tables where one table's key record is equal to another table's key records.",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - OUTER JOIN": "This is also known as a full join. It combines all rows from the left and right tables to create the result set. This Join Query will return records from both tables, even if they have NULL values. The joined table (result set) will display NULL values if there are no matching rows.",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - RIGHT JOIN": "Even if there is no matching row in the left table, a right join retrieves every row from the right table. The values NULL will be returned for any columns from the left table that don't have a corresponding entry in the right table.",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - SELF JOIN": "This technique involves joining a table to itself, employing recursion, a concept widely used in computer programming.",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - LOOKUP JOIN": ".",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - EQI JOIN": "SQL Equi Join is a simple SQL join that uses the comparison operator equal sign(=) for the condition. It is of two types SQL Inner join and SQL Outer join.",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - NON EQI JOIN": "SQL Non-Equi Join is a join that uses a comparison operator other than the equal sign with the condition. It can be >, <, >=, or <=.",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - NESTED JOIN": "A Nested Join uses two tables. One joining table is an outer input table, while the other is an inner input table. A Nested Loop Join involves: Retrieving one row from the outside table. Searching for it in the inner table. Repeating this procedure until all the output rows from the outer table are searched for in the inner table.",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - NESTED JOIN - NaiveNested": "",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - NESTED JOIN - IndexedNested": "",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - NESTED JOIN - TemporaryIndexNested": "",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - NATURAL JOIN": "Natural Join combines two tables based on similar attribute names and data types, and the resulting table consists of the attributes from both tables by keeping only one copy of each common column. Therefore, two tables are combined on the basis of their similar column names, and the table in output consists of only one instance of the common column.",
	"SQL - Querying - DQL - SELECT - JOIN - Tools - CROSS JOIN": "Less commonly used due to performance issues, it returns a Cartesian product of all records from both tables.",
	"SQL - Querying - DQL - SELECT - JOIN - Cases": "ONLY_TABLE_A - INTERSECTION - ONLY_TABLE_B",
	"SQL - Querying - DQL - SELECT - JOIN - Cases - (INNER) JOIN": "INNER JOIN is same as JOIN -> INTERSECTION",
	"SQL - Querying - DQL - SELECT - JOIN - Cases - LEFT (OUTER) JOIN": "LEFT OUTER JOIN is same as LEFT JOIN. Completes TableA with columns of TableB - > ONLY_TABLE_A + INTERSECTION + matching (ONLY_TABLE_B)",
	"SQL - Querying - DQL - SELECT - JOIN - Cases - RIGHT (OUTER) JOIN": "RIGHT OUTER JOIN is same as RIGHT JOIN Completes TableB with columns of TableA -> ONLY_TABLE_A + INTERSECTION + matching (ONLY_TABLE_B)",
	"SQL - Querying - DQL - SELECT - JOIN - Cases - FULL (OUTER) JOIN": "FULL OUTER JOIN is same as FULL JOIN -> matching (ONLY_TABLE_A) + INTERSECTION + ONLY_TABLE_B.",
	"SQL - Querying - DQL - SUBQUERY": "It is a query enclosed within another query. In this, the inner query is known as a subquery. While the outer query is known as the main query. There are two types of subqueries: Nested, Correlated.",
	"SQL - Querying - DQL - SUBQUERY - NestedQuery:": "Nested Query: It first executes the inner query, and only once. Then an outer query is executed depending on the results of the inner query. Therefore the inner query is used to execute the outer query.",
	"SQL - Querying - DQL - SUBQUERY - CorrelatedQuery": "Correlated Query: It first executes the outer query. For every outer query row, the inner query is executed. Therefore, values from the outer query are used in the inner query.",
	"SQL - Querying - DQL - VIEW - View": "A view is a virtual table that fetches data dynamically whenever queried.",
	"SQL - Querying - DQL - VIEW - View - MaterializedVIew": "A materialized view is a pre-computed data set derived from a query and stored for later use.",
	"SQL - Querying - DQL - VIEW - View - MaterializedVIew - faster": "Because the data is pre-computed, querying a materialized view is faster than executing a query against the base table of the view.",

	"SQL - DataModel": "SECTION",
	"SQL - DataModel - Objects - Schema": "A collection of database structural elements such as tables, stored procedures, indexes, functions, and triggers. It shows the overall database architecture, specifies the relationships between various objects of a database, and defines different access permissions for them. Read our database schema guide for a deeper understanding.",
	"SQL - DataModel - Objects - Entities": ".",
	"SQL - DataModel - Objects - Table": ".",
	"SQL - DataModel - Objects - View": ".",
	"SQL - DataModel - Objects - MaterializedView": ".",
	"SQL - DataModel - DDL": "",
	"SQL - DataModel - DDL - CREATE": "",
	"SQL - DataModel - DDL - ALTERTABLE": "",
	"SQL - DataModel - DDL - DELETE": "",
	"SQL - DataModel - DDL - DROP": "DROP deletes a table from the database completely, including the table structure and all the associated constraints, relationships with other tables, and access privileges. TRUNCATE deletes all rows from a table without affecting the table structure and constraints. DROP works slower than TRUNCATE. Both are irreversible DDL (Data Definition Language) commands.",
	"SQL - DataModel - DDL - TRUNCATE": "",
	"SQL - DataModel - DDL - ADDCOLUMN": "",
	"SQL - DataModel - DML": "",
	"SQL - DataModel - DML - INSERT": "",
	"SQL - DataModel - DML - UPDATE": "",
	"SQL - DataModel - DML - DELETE": "",
	"SQL - DataModel - DCL": "",
	"SQL - DataModel - DCL - GRANT": "",
	"SQL - DataModel - DCL - REVOKE": ""

}